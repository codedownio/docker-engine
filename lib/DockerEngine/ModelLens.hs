{-
   Docker Engine API

   The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release of Docker, so API calls are versioned to ensure that clients don't break.  For Docker Engine 17.06, the API version is 1.30. To lock to this version, you prefix the URL with `/v1.30`. For example, calling `/info` is the same as calling `/v1.30/info`.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  In previous versions of Docker, it was possible to access the API without providing a version. This behaviour is now deprecated will be removed in a future version of Docker.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer Docker daemons.  This documentation is for version 1.30 of the API, which was introduced with Docker 17.06. Use this table to find documentation for previous versions of the API:  Docker version  | API version | Changes ----------------|-------------|--------- 17.05.x | [1.29](https://docs.docker.com/engine/api/v1.29/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-29-api-changes) 17.04.x | [1.28](https://docs.docker.com/engine/api/v1.28/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-28-api-changes) 17.03.1 | [1.27](https://docs.docker.com/engine/api/v1.27/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-27-api-changes) 1.13.1 & 17.03.0 | [1.26](https://docs.docker.com/engine/api/v1.26/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-26-api-changes) 1.13.0 | [1.25](https://docs.docker.com/engine/api/v1.25/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-25-api-changes) 1.12.x | [1.24](https://docs.docker.com/engine/api/v1.24/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-24-api-changes) 1.11.x | [1.23](https://docs.docker.com/engine/api/v1.23/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-23-api-changes) 1.10.x | [1.22](https://docs.docker.com/engine/api/v1.22/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-22-api-changes) 1.9.x | [1.21](https://docs.docker.com/engine/api/v1.21/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-21-api-changes) 1.8.x | [1.20](https://docs.docker.com/engine/api/v1.20/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-20-api-changes) 1.7.x | [1.19](https://docs.docker.com/engine/api/v1.19/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-19-api-changes) 1.6.x | [1.18](https://docs.docker.com/engine/api/v1.18/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-18-api-changes)  # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a Base64 encoded (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 

   OpenAPI Version: 3.0.1
   Docker Engine API API version: 1.30
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : DockerEngine.Lens
-}

{-# LANGUAGE KindSignatures #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE RankNTypes #-}
{-# LANGUAGE RecordWildCards #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-matches -fno-warn-unused-binds -fno-warn-unused-imports #-}

module DockerEngine.ModelLens where

import qualified Data.Aeson as A
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Data, Typeable)
import qualified Data.Map as Map
import qualified Data.Set as Set
import qualified Data.Time as TI

import Data.Text (Text)

import Prelude (($), (.),(<$>),(<*>),(=<<),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

import DockerEngine.Model
import DockerEngine.Core


-- * AuthConfig

-- | 'authConfigUsername' Lens
authConfigUsernameL :: Lens_' AuthConfig (Maybe Text)
authConfigUsernameL f AuthConfig{..} = (\authConfigUsername -> AuthConfig { authConfigUsername, ..} ) <$> f authConfigUsername
{-# INLINE authConfigUsernameL #-}

-- | 'authConfigPassword' Lens
authConfigPasswordL :: Lens_' AuthConfig (Maybe Text)
authConfigPasswordL f AuthConfig{..} = (\authConfigPassword -> AuthConfig { authConfigPassword, ..} ) <$> f authConfigPassword
{-# INLINE authConfigPasswordL #-}

-- | 'authConfigEmail' Lens
authConfigEmailL :: Lens_' AuthConfig (Maybe Text)
authConfigEmailL f AuthConfig{..} = (\authConfigEmail -> AuthConfig { authConfigEmail, ..} ) <$> f authConfigEmail
{-# INLINE authConfigEmailL #-}

-- | 'authConfigServeraddress' Lens
authConfigServeraddressL :: Lens_' AuthConfig (Maybe Text)
authConfigServeraddressL f AuthConfig{..} = (\authConfigServeraddress -> AuthConfig { authConfigServeraddress, ..} ) <$> f authConfigServeraddress
{-# INLINE authConfigServeraddressL #-}



-- * BuildInfo

-- | 'buildInfoId' Lens
buildInfoIdL :: Lens_' BuildInfo (Maybe Text)
buildInfoIdL f BuildInfo{..} = (\buildInfoId -> BuildInfo { buildInfoId, ..} ) <$> f buildInfoId
{-# INLINE buildInfoIdL #-}

-- | 'buildInfoStream' Lens
buildInfoStreamL :: Lens_' BuildInfo (Maybe Text)
buildInfoStreamL f BuildInfo{..} = (\buildInfoStream -> BuildInfo { buildInfoStream, ..} ) <$> f buildInfoStream
{-# INLINE buildInfoStreamL #-}

-- | 'buildInfoError' Lens
buildInfoErrorL :: Lens_' BuildInfo (Maybe Text)
buildInfoErrorL f BuildInfo{..} = (\buildInfoError -> BuildInfo { buildInfoError, ..} ) <$> f buildInfoError
{-# INLINE buildInfoErrorL #-}

-- | 'buildInfoErrorDetail' Lens
buildInfoErrorDetailL :: Lens_' BuildInfo (Maybe ErrorDetail)
buildInfoErrorDetailL f BuildInfo{..} = (\buildInfoErrorDetail -> BuildInfo { buildInfoErrorDetail, ..} ) <$> f buildInfoErrorDetail
{-# INLINE buildInfoErrorDetailL #-}

-- | 'buildInfoStatus' Lens
buildInfoStatusL :: Lens_' BuildInfo (Maybe Text)
buildInfoStatusL f BuildInfo{..} = (\buildInfoStatus -> BuildInfo { buildInfoStatus, ..} ) <$> f buildInfoStatus
{-# INLINE buildInfoStatusL #-}

-- | 'buildInfoProgress' Lens
buildInfoProgressL :: Lens_' BuildInfo (Maybe Text)
buildInfoProgressL f BuildInfo{..} = (\buildInfoProgress -> BuildInfo { buildInfoProgress, ..} ) <$> f buildInfoProgress
{-# INLINE buildInfoProgressL #-}

-- | 'buildInfoProgressDetail' Lens
buildInfoProgressDetailL :: Lens_' BuildInfo (Maybe ProgressDetail)
buildInfoProgressDetailL f BuildInfo{..} = (\buildInfoProgressDetail -> BuildInfo { buildInfoProgressDetail, ..} ) <$> f buildInfoProgressDetail
{-# INLINE buildInfoProgressDetailL #-}



-- * ClusterInfo

-- | 'clusterInfoId' Lens
clusterInfoIdL :: Lens_' ClusterInfo (Maybe Text)
clusterInfoIdL f ClusterInfo{..} = (\clusterInfoId -> ClusterInfo { clusterInfoId, ..} ) <$> f clusterInfoId
{-# INLINE clusterInfoIdL #-}

-- | 'clusterInfoVersion' Lens
clusterInfoVersionL :: Lens_' ClusterInfo (Maybe ObjectVersion)
clusterInfoVersionL f ClusterInfo{..} = (\clusterInfoVersion -> ClusterInfo { clusterInfoVersion, ..} ) <$> f clusterInfoVersion
{-# INLINE clusterInfoVersionL #-}

-- | 'clusterInfoCreatedAt' Lens
clusterInfoCreatedAtL :: Lens_' ClusterInfo (Maybe Text)
clusterInfoCreatedAtL f ClusterInfo{..} = (\clusterInfoCreatedAt -> ClusterInfo { clusterInfoCreatedAt, ..} ) <$> f clusterInfoCreatedAt
{-# INLINE clusterInfoCreatedAtL #-}

-- | 'clusterInfoUpdatedAt' Lens
clusterInfoUpdatedAtL :: Lens_' ClusterInfo (Maybe Text)
clusterInfoUpdatedAtL f ClusterInfo{..} = (\clusterInfoUpdatedAt -> ClusterInfo { clusterInfoUpdatedAt, ..} ) <$> f clusterInfoUpdatedAt
{-# INLINE clusterInfoUpdatedAtL #-}

-- | 'clusterInfoSpec' Lens
clusterInfoSpecL :: Lens_' ClusterInfo (Maybe SwarmSpec)
clusterInfoSpecL f ClusterInfo{..} = (\clusterInfoSpec -> ClusterInfo { clusterInfoSpec, ..} ) <$> f clusterInfoSpec
{-# INLINE clusterInfoSpecL #-}

-- | 'clusterInfoTlsInfo' Lens
clusterInfoTlsInfoL :: Lens_' ClusterInfo (Maybe TLSInfo)
clusterInfoTlsInfoL f ClusterInfo{..} = (\clusterInfoTlsInfo -> ClusterInfo { clusterInfoTlsInfo, ..} ) <$> f clusterInfoTlsInfo
{-# INLINE clusterInfoTlsInfoL #-}

-- | 'clusterInfoRootRotationInProgress' Lens
clusterInfoRootRotationInProgressL :: Lens_' ClusterInfo (Maybe Bool)
clusterInfoRootRotationInProgressL f ClusterInfo{..} = (\clusterInfoRootRotationInProgress -> ClusterInfo { clusterInfoRootRotationInProgress, ..} ) <$> f clusterInfoRootRotationInProgress
{-# INLINE clusterInfoRootRotationInProgressL #-}



-- * Config

-- | 'configId' Lens
configIdL :: Lens_' Config (Maybe Text)
configIdL f Config{..} = (\configId -> Config { configId, ..} ) <$> f configId
{-# INLINE configIdL #-}

-- | 'configVersion' Lens
configVersionL :: Lens_' Config (Maybe ObjectVersion)
configVersionL f Config{..} = (\configVersion -> Config { configVersion, ..} ) <$> f configVersion
{-# INLINE configVersionL #-}

-- | 'configCreatedAt' Lens
configCreatedAtL :: Lens_' Config (Maybe Text)
configCreatedAtL f Config{..} = (\configCreatedAt -> Config { configCreatedAt, ..} ) <$> f configCreatedAt
{-# INLINE configCreatedAtL #-}

-- | 'configUpdatedAt' Lens
configUpdatedAtL :: Lens_' Config (Maybe Text)
configUpdatedAtL f Config{..} = (\configUpdatedAt -> Config { configUpdatedAt, ..} ) <$> f configUpdatedAt
{-# INLINE configUpdatedAtL #-}

-- | 'configSpec' Lens
configSpecL :: Lens_' Config (Maybe ConfigSpec)
configSpecL f Config{..} = (\configSpec -> Config { configSpec, ..} ) <$> f configSpec
{-# INLINE configSpecL #-}



-- * ConfigSpec

-- | 'configSpecName' Lens
configSpecNameL :: Lens_' ConfigSpec (Maybe Text)
configSpecNameL f ConfigSpec{..} = (\configSpecName -> ConfigSpec { configSpecName, ..} ) <$> f configSpecName
{-# INLINE configSpecNameL #-}

-- | 'configSpecLabels' Lens
configSpecLabelsL :: Lens_' ConfigSpec (Maybe (Map.Map String Text))
configSpecLabelsL f ConfigSpec{..} = (\configSpecLabels -> ConfigSpec { configSpecLabels, ..} ) <$> f configSpecLabels
{-# INLINE configSpecLabelsL #-}

-- | 'configSpecData' Lens
configSpecDataL :: Lens_' ConfigSpec (Maybe [Text])
configSpecDataL f ConfigSpec{..} = (\configSpecData -> ConfigSpec { configSpecData, ..} ) <$> f configSpecData
{-# INLINE configSpecDataL #-}



-- * ContainerConfig

-- | 'containerConfigHostname' Lens
containerConfigHostnameL :: Lens_' ContainerConfig (Maybe Text)
containerConfigHostnameL f ContainerConfig{..} = (\containerConfigHostname -> ContainerConfig { containerConfigHostname, ..} ) <$> f containerConfigHostname
{-# INLINE containerConfigHostnameL #-}

-- | 'containerConfigDomainname' Lens
containerConfigDomainnameL :: Lens_' ContainerConfig (Maybe Text)
containerConfigDomainnameL f ContainerConfig{..} = (\containerConfigDomainname -> ContainerConfig { containerConfigDomainname, ..} ) <$> f containerConfigDomainname
{-# INLINE containerConfigDomainnameL #-}

-- | 'containerConfigUser' Lens
containerConfigUserL :: Lens_' ContainerConfig (Maybe Text)
containerConfigUserL f ContainerConfig{..} = (\containerConfigUser -> ContainerConfig { containerConfigUser, ..} ) <$> f containerConfigUser
{-# INLINE containerConfigUserL #-}

-- | 'containerConfigAttachStdin' Lens
containerConfigAttachStdinL :: Lens_' ContainerConfig (Maybe Bool)
containerConfigAttachStdinL f ContainerConfig{..} = (\containerConfigAttachStdin -> ContainerConfig { containerConfigAttachStdin, ..} ) <$> f containerConfigAttachStdin
{-# INLINE containerConfigAttachStdinL #-}

-- | 'containerConfigAttachStdout' Lens
containerConfigAttachStdoutL :: Lens_' ContainerConfig (Maybe Bool)
containerConfigAttachStdoutL f ContainerConfig{..} = (\containerConfigAttachStdout -> ContainerConfig { containerConfigAttachStdout, ..} ) <$> f containerConfigAttachStdout
{-# INLINE containerConfigAttachStdoutL #-}

-- | 'containerConfigAttachStderr' Lens
containerConfigAttachStderrL :: Lens_' ContainerConfig (Maybe Bool)
containerConfigAttachStderrL f ContainerConfig{..} = (\containerConfigAttachStderr -> ContainerConfig { containerConfigAttachStderr, ..} ) <$> f containerConfigAttachStderr
{-# INLINE containerConfigAttachStderrL #-}

-- | 'containerConfigExposedPorts' Lens
containerConfigExposedPortsL :: Lens_' ContainerConfig (Maybe (Map.Map String A.Value))
containerConfigExposedPortsL f ContainerConfig{..} = (\containerConfigExposedPorts -> ContainerConfig { containerConfigExposedPorts, ..} ) <$> f containerConfigExposedPorts
{-# INLINE containerConfigExposedPortsL #-}

-- | 'containerConfigTty' Lens
containerConfigTtyL :: Lens_' ContainerConfig (Maybe Bool)
containerConfigTtyL f ContainerConfig{..} = (\containerConfigTty -> ContainerConfig { containerConfigTty, ..} ) <$> f containerConfigTty
{-# INLINE containerConfigTtyL #-}

-- | 'containerConfigOpenStdin' Lens
containerConfigOpenStdinL :: Lens_' ContainerConfig (Maybe Bool)
containerConfigOpenStdinL f ContainerConfig{..} = (\containerConfigOpenStdin -> ContainerConfig { containerConfigOpenStdin, ..} ) <$> f containerConfigOpenStdin
{-# INLINE containerConfigOpenStdinL #-}

-- | 'containerConfigStdinOnce' Lens
containerConfigStdinOnceL :: Lens_' ContainerConfig (Maybe Bool)
containerConfigStdinOnceL f ContainerConfig{..} = (\containerConfigStdinOnce -> ContainerConfig { containerConfigStdinOnce, ..} ) <$> f containerConfigStdinOnce
{-# INLINE containerConfigStdinOnceL #-}

-- | 'containerConfigEnv' Lens
containerConfigEnvL :: Lens_' ContainerConfig (Maybe [Text])
containerConfigEnvL f ContainerConfig{..} = (\containerConfigEnv -> ContainerConfig { containerConfigEnv, ..} ) <$> f containerConfigEnv
{-# INLINE containerConfigEnvL #-}

-- | 'containerConfigHealthcheck' Lens
containerConfigHealthcheckL :: Lens_' ContainerConfig (Maybe HealthConfig)
containerConfigHealthcheckL f ContainerConfig{..} = (\containerConfigHealthcheck -> ContainerConfig { containerConfigHealthcheck, ..} ) <$> f containerConfigHealthcheck
{-# INLINE containerConfigHealthcheckL #-}

-- | 'containerConfigArgsEscaped' Lens
containerConfigArgsEscapedL :: Lens_' ContainerConfig (Maybe Bool)
containerConfigArgsEscapedL f ContainerConfig{..} = (\containerConfigArgsEscaped -> ContainerConfig { containerConfigArgsEscaped, ..} ) <$> f containerConfigArgsEscaped
{-# INLINE containerConfigArgsEscapedL #-}

-- | 'containerConfigImage' Lens
containerConfigImageL :: Lens_' ContainerConfig (Maybe Text)
containerConfigImageL f ContainerConfig{..} = (\containerConfigImage -> ContainerConfig { containerConfigImage, ..} ) <$> f containerConfigImage
{-# INLINE containerConfigImageL #-}

-- | 'containerConfigVolumes' Lens
containerConfigVolumesL :: Lens_' ContainerConfig (Maybe ContainerConfigVolumes)
containerConfigVolumesL f ContainerConfig{..} = (\containerConfigVolumes -> ContainerConfig { containerConfigVolumes, ..} ) <$> f containerConfigVolumes
{-# INLINE containerConfigVolumesL #-}

-- | 'containerConfigWorkingDir' Lens
containerConfigWorkingDirL :: Lens_' ContainerConfig (Maybe Text)
containerConfigWorkingDirL f ContainerConfig{..} = (\containerConfigWorkingDir -> ContainerConfig { containerConfigWorkingDir, ..} ) <$> f containerConfigWorkingDir
{-# INLINE containerConfigWorkingDirL #-}

-- | 'containerConfigNetworkDisabled' Lens
containerConfigNetworkDisabledL :: Lens_' ContainerConfig (Maybe Bool)
containerConfigNetworkDisabledL f ContainerConfig{..} = (\containerConfigNetworkDisabled -> ContainerConfig { containerConfigNetworkDisabled, ..} ) <$> f containerConfigNetworkDisabled
{-# INLINE containerConfigNetworkDisabledL #-}

-- | 'containerConfigMacAddress' Lens
containerConfigMacAddressL :: Lens_' ContainerConfig (Maybe Text)
containerConfigMacAddressL f ContainerConfig{..} = (\containerConfigMacAddress -> ContainerConfig { containerConfigMacAddress, ..} ) <$> f containerConfigMacAddress
{-# INLINE containerConfigMacAddressL #-}

-- | 'containerConfigOnBuild' Lens
containerConfigOnBuildL :: Lens_' ContainerConfig (Maybe [Text])
containerConfigOnBuildL f ContainerConfig{..} = (\containerConfigOnBuild -> ContainerConfig { containerConfigOnBuild, ..} ) <$> f containerConfigOnBuild
{-# INLINE containerConfigOnBuildL #-}

-- | 'containerConfigLabels' Lens
containerConfigLabelsL :: Lens_' ContainerConfig (Maybe (Map.Map String Text))
containerConfigLabelsL f ContainerConfig{..} = (\containerConfigLabels -> ContainerConfig { containerConfigLabels, ..} ) <$> f containerConfigLabels
{-# INLINE containerConfigLabelsL #-}

-- | 'containerConfigStopSignal' Lens
containerConfigStopSignalL :: Lens_' ContainerConfig (Maybe Text)
containerConfigStopSignalL f ContainerConfig{..} = (\containerConfigStopSignal -> ContainerConfig { containerConfigStopSignal, ..} ) <$> f containerConfigStopSignal
{-# INLINE containerConfigStopSignalL #-}

-- | 'containerConfigStopTimeout' Lens
containerConfigStopTimeoutL :: Lens_' ContainerConfig (Maybe Int)
containerConfigStopTimeoutL f ContainerConfig{..} = (\containerConfigStopTimeout -> ContainerConfig { containerConfigStopTimeout, ..} ) <$> f containerConfigStopTimeout
{-# INLINE containerConfigStopTimeoutL #-}

-- | 'containerConfigShell' Lens
containerConfigShellL :: Lens_' ContainerConfig (Maybe [Text])
containerConfigShellL f ContainerConfig{..} = (\containerConfigShell -> ContainerConfig { containerConfigShell, ..} ) <$> f containerConfigShell
{-# INLINE containerConfigShellL #-}



-- * ContainerConfigVolumes

-- | 'containerConfigVolumesAdditionalProperties' Lens
containerConfigVolumesAdditionalPropertiesL :: Lens_' ContainerConfigVolumes (Maybe A.Value)
containerConfigVolumesAdditionalPropertiesL f ContainerConfigVolumes{..} = (\containerConfigVolumesAdditionalProperties -> ContainerConfigVolumes { containerConfigVolumesAdditionalProperties, ..} ) <$> f containerConfigVolumesAdditionalProperties
{-# INLINE containerConfigVolumesAdditionalPropertiesL #-}



-- * CreateImageInfo

-- | 'createImageInfoError' Lens
createImageInfoErrorL :: Lens_' CreateImageInfo (Maybe Text)
createImageInfoErrorL f CreateImageInfo{..} = (\createImageInfoError -> CreateImageInfo { createImageInfoError, ..} ) <$> f createImageInfoError
{-# INLINE createImageInfoErrorL #-}

-- | 'createImageInfoStatus' Lens
createImageInfoStatusL :: Lens_' CreateImageInfo (Maybe Text)
createImageInfoStatusL f CreateImageInfo{..} = (\createImageInfoStatus -> CreateImageInfo { createImageInfoStatus, ..} ) <$> f createImageInfoStatus
{-# INLINE createImageInfoStatusL #-}

-- | 'createImageInfoProgress' Lens
createImageInfoProgressL :: Lens_' CreateImageInfo (Maybe Text)
createImageInfoProgressL f CreateImageInfo{..} = (\createImageInfoProgress -> CreateImageInfo { createImageInfoProgress, ..} ) <$> f createImageInfoProgress
{-# INLINE createImageInfoProgressL #-}

-- | 'createImageInfoProgressDetail' Lens
createImageInfoProgressDetailL :: Lens_' CreateImageInfo (Maybe ProgressDetail)
createImageInfoProgressDetailL f CreateImageInfo{..} = (\createImageInfoProgressDetail -> CreateImageInfo { createImageInfoProgressDetail, ..} ) <$> f createImageInfoProgressDetail
{-# INLINE createImageInfoProgressDetailL #-}



-- * DeviceMapping

-- | 'deviceMappingPathOnHost' Lens
deviceMappingPathOnHostL :: Lens_' DeviceMapping (Maybe Text)
deviceMappingPathOnHostL f DeviceMapping{..} = (\deviceMappingPathOnHost -> DeviceMapping { deviceMappingPathOnHost, ..} ) <$> f deviceMappingPathOnHost
{-# INLINE deviceMappingPathOnHostL #-}

-- | 'deviceMappingPathInContainer' Lens
deviceMappingPathInContainerL :: Lens_' DeviceMapping (Maybe Text)
deviceMappingPathInContainerL f DeviceMapping{..} = (\deviceMappingPathInContainer -> DeviceMapping { deviceMappingPathInContainer, ..} ) <$> f deviceMappingPathInContainer
{-# INLINE deviceMappingPathInContainerL #-}

-- | 'deviceMappingCgroupPermissions' Lens
deviceMappingCgroupPermissionsL :: Lens_' DeviceMapping (Maybe Text)
deviceMappingCgroupPermissionsL f DeviceMapping{..} = (\deviceMappingCgroupPermissions -> DeviceMapping { deviceMappingCgroupPermissions, ..} ) <$> f deviceMappingCgroupPermissions
{-# INLINE deviceMappingCgroupPermissionsL #-}



-- * EndpointPortConfig

-- | 'endpointPortConfigName' Lens
endpointPortConfigNameL :: Lens_' EndpointPortConfig (Maybe Text)
endpointPortConfigNameL f EndpointPortConfig{..} = (\endpointPortConfigName -> EndpointPortConfig { endpointPortConfigName, ..} ) <$> f endpointPortConfigName
{-# INLINE endpointPortConfigNameL #-}

-- | 'endpointPortConfigProtocol' Lens
endpointPortConfigProtocolL :: Lens_' EndpointPortConfig (Maybe E'Type)
endpointPortConfigProtocolL f EndpointPortConfig{..} = (\endpointPortConfigProtocol -> EndpointPortConfig { endpointPortConfigProtocol, ..} ) <$> f endpointPortConfigProtocol
{-# INLINE endpointPortConfigProtocolL #-}

-- | 'endpointPortConfigTargetPort' Lens
endpointPortConfigTargetPortL :: Lens_' EndpointPortConfig (Maybe Int)
endpointPortConfigTargetPortL f EndpointPortConfig{..} = (\endpointPortConfigTargetPort -> EndpointPortConfig { endpointPortConfigTargetPort, ..} ) <$> f endpointPortConfigTargetPort
{-# INLINE endpointPortConfigTargetPortL #-}

-- | 'endpointPortConfigPublishedPort' Lens
endpointPortConfigPublishedPortL :: Lens_' EndpointPortConfig (Maybe Int)
endpointPortConfigPublishedPortL f EndpointPortConfig{..} = (\endpointPortConfigPublishedPort -> EndpointPortConfig { endpointPortConfigPublishedPort, ..} ) <$> f endpointPortConfigPublishedPort
{-# INLINE endpointPortConfigPublishedPortL #-}



-- * EndpointSettings

-- | 'endpointSettingsIpamConfig' Lens
endpointSettingsIpamConfigL :: Lens_' EndpointSettings (Maybe EndpointSettingsIPAMConfig)
endpointSettingsIpamConfigL f EndpointSettings{..} = (\endpointSettingsIpamConfig -> EndpointSettings { endpointSettingsIpamConfig, ..} ) <$> f endpointSettingsIpamConfig
{-# INLINE endpointSettingsIpamConfigL #-}

-- | 'endpointSettingsLinks' Lens
endpointSettingsLinksL :: Lens_' EndpointSettings (Maybe [Text])
endpointSettingsLinksL f EndpointSettings{..} = (\endpointSettingsLinks -> EndpointSettings { endpointSettingsLinks, ..} ) <$> f endpointSettingsLinks
{-# INLINE endpointSettingsLinksL #-}

-- | 'endpointSettingsAliases' Lens
endpointSettingsAliasesL :: Lens_' EndpointSettings (Maybe [Text])
endpointSettingsAliasesL f EndpointSettings{..} = (\endpointSettingsAliases -> EndpointSettings { endpointSettingsAliases, ..} ) <$> f endpointSettingsAliases
{-# INLINE endpointSettingsAliasesL #-}

-- | 'endpointSettingsNetworkId' Lens
endpointSettingsNetworkIdL :: Lens_' EndpointSettings (Maybe Text)
endpointSettingsNetworkIdL f EndpointSettings{..} = (\endpointSettingsNetworkId -> EndpointSettings { endpointSettingsNetworkId, ..} ) <$> f endpointSettingsNetworkId
{-# INLINE endpointSettingsNetworkIdL #-}

-- | 'endpointSettingsEndpointId' Lens
endpointSettingsEndpointIdL :: Lens_' EndpointSettings (Maybe Text)
endpointSettingsEndpointIdL f EndpointSettings{..} = (\endpointSettingsEndpointId -> EndpointSettings { endpointSettingsEndpointId, ..} ) <$> f endpointSettingsEndpointId
{-# INLINE endpointSettingsEndpointIdL #-}

-- | 'endpointSettingsGateway' Lens
endpointSettingsGatewayL :: Lens_' EndpointSettings (Maybe Text)
endpointSettingsGatewayL f EndpointSettings{..} = (\endpointSettingsGateway -> EndpointSettings { endpointSettingsGateway, ..} ) <$> f endpointSettingsGateway
{-# INLINE endpointSettingsGatewayL #-}

-- | 'endpointSettingsIpAddress' Lens
endpointSettingsIpAddressL :: Lens_' EndpointSettings (Maybe Text)
endpointSettingsIpAddressL f EndpointSettings{..} = (\endpointSettingsIpAddress -> EndpointSettings { endpointSettingsIpAddress, ..} ) <$> f endpointSettingsIpAddress
{-# INLINE endpointSettingsIpAddressL #-}

-- | 'endpointSettingsIpPrefixLen' Lens
endpointSettingsIpPrefixLenL :: Lens_' EndpointSettings (Maybe Int)
endpointSettingsIpPrefixLenL f EndpointSettings{..} = (\endpointSettingsIpPrefixLen -> EndpointSettings { endpointSettingsIpPrefixLen, ..} ) <$> f endpointSettingsIpPrefixLen
{-# INLINE endpointSettingsIpPrefixLenL #-}

-- | 'endpointSettingsIPv6Gateway' Lens
endpointSettingsIPv6GatewayL :: Lens_' EndpointSettings (Maybe Text)
endpointSettingsIPv6GatewayL f EndpointSettings{..} = (\endpointSettingsIPv6Gateway -> EndpointSettings { endpointSettingsIPv6Gateway, ..} ) <$> f endpointSettingsIPv6Gateway
{-# INLINE endpointSettingsIPv6GatewayL #-}

-- | 'endpointSettingsGlobalIPv6Address' Lens
endpointSettingsGlobalIPv6AddressL :: Lens_' EndpointSettings (Maybe Text)
endpointSettingsGlobalIPv6AddressL f EndpointSettings{..} = (\endpointSettingsGlobalIPv6Address -> EndpointSettings { endpointSettingsGlobalIPv6Address, ..} ) <$> f endpointSettingsGlobalIPv6Address
{-# INLINE endpointSettingsGlobalIPv6AddressL #-}

-- | 'endpointSettingsGlobalIPv6PrefixLen' Lens
endpointSettingsGlobalIPv6PrefixLenL :: Lens_' EndpointSettings (Maybe Integer)
endpointSettingsGlobalIPv6PrefixLenL f EndpointSettings{..} = (\endpointSettingsGlobalIPv6PrefixLen -> EndpointSettings { endpointSettingsGlobalIPv6PrefixLen, ..} ) <$> f endpointSettingsGlobalIPv6PrefixLen
{-# INLINE endpointSettingsGlobalIPv6PrefixLenL #-}

-- | 'endpointSettingsMacAddress' Lens
endpointSettingsMacAddressL :: Lens_' EndpointSettings (Maybe Text)
endpointSettingsMacAddressL f EndpointSettings{..} = (\endpointSettingsMacAddress -> EndpointSettings { endpointSettingsMacAddress, ..} ) <$> f endpointSettingsMacAddress
{-# INLINE endpointSettingsMacAddressL #-}



-- * EndpointSettingsIPAMConfig

-- | 'endpointSettingsIPAMConfigIPv4Address' Lens
endpointSettingsIPAMConfigIPv4AddressL :: Lens_' EndpointSettingsIPAMConfig (Maybe Text)
endpointSettingsIPAMConfigIPv4AddressL f EndpointSettingsIPAMConfig{..} = (\endpointSettingsIPAMConfigIPv4Address -> EndpointSettingsIPAMConfig { endpointSettingsIPAMConfigIPv4Address, ..} ) <$> f endpointSettingsIPAMConfigIPv4Address
{-# INLINE endpointSettingsIPAMConfigIPv4AddressL #-}

-- | 'endpointSettingsIPAMConfigIPv6Address' Lens
endpointSettingsIPAMConfigIPv6AddressL :: Lens_' EndpointSettingsIPAMConfig (Maybe Text)
endpointSettingsIPAMConfigIPv6AddressL f EndpointSettingsIPAMConfig{..} = (\endpointSettingsIPAMConfigIPv6Address -> EndpointSettingsIPAMConfig { endpointSettingsIPAMConfigIPv6Address, ..} ) <$> f endpointSettingsIPAMConfigIPv6Address
{-# INLINE endpointSettingsIPAMConfigIPv6AddressL #-}

-- | 'endpointSettingsIPAMConfigLinkLocalIPs' Lens
endpointSettingsIPAMConfigLinkLocalIPsL :: Lens_' EndpointSettingsIPAMConfig (Maybe [Text])
endpointSettingsIPAMConfigLinkLocalIPsL f EndpointSettingsIPAMConfig{..} = (\endpointSettingsIPAMConfigLinkLocalIPs -> EndpointSettingsIPAMConfig { endpointSettingsIPAMConfigLinkLocalIPs, ..} ) <$> f endpointSettingsIPAMConfigLinkLocalIPs
{-# INLINE endpointSettingsIPAMConfigLinkLocalIPsL #-}



-- * EndpointSpec

-- | 'endpointSpecMode' Lens
endpointSpecModeL :: Lens_' EndpointSpec (Maybe E'Mode)
endpointSpecModeL f EndpointSpec{..} = (\endpointSpecMode -> EndpointSpec { endpointSpecMode, ..} ) <$> f endpointSpecMode
{-# INLINE endpointSpecModeL #-}

-- | 'endpointSpecPorts' Lens
endpointSpecPortsL :: Lens_' EndpointSpec (Maybe [EndpointPortConfig])
endpointSpecPortsL f EndpointSpec{..} = (\endpointSpecPorts -> EndpointSpec { endpointSpecPorts, ..} ) <$> f endpointSpecPorts
{-# INLINE endpointSpecPortsL #-}



-- * ErrorDetail

-- | 'errorDetailCode' Lens
errorDetailCodeL :: Lens_' ErrorDetail (Maybe Int)
errorDetailCodeL f ErrorDetail{..} = (\errorDetailCode -> ErrorDetail { errorDetailCode, ..} ) <$> f errorDetailCode
{-# INLINE errorDetailCodeL #-}

-- | 'errorDetailMessage' Lens
errorDetailMessageL :: Lens_' ErrorDetail (Maybe Text)
errorDetailMessageL f ErrorDetail{..} = (\errorDetailMessage -> ErrorDetail { errorDetailMessage, ..} ) <$> f errorDetailMessage
{-# INLINE errorDetailMessageL #-}



-- * ErrorResponse

-- | 'errorResponseMessage' Lens
errorResponseMessageL :: Lens_' ErrorResponse (Text)
errorResponseMessageL f ErrorResponse{..} = (\errorResponseMessage -> ErrorResponse { errorResponseMessage, ..} ) <$> f errorResponseMessage
{-# INLINE errorResponseMessageL #-}



-- * GraphDriverData

-- | 'graphDriverDataName' Lens
graphDriverDataNameL :: Lens_' GraphDriverData (Text)
graphDriverDataNameL f GraphDriverData{..} = (\graphDriverDataName -> GraphDriverData { graphDriverDataName, ..} ) <$> f graphDriverDataName
{-# INLINE graphDriverDataNameL #-}

-- | 'graphDriverDataData' Lens
graphDriverDataDataL :: Lens_' GraphDriverData ((Map.Map String Text))
graphDriverDataDataL f GraphDriverData{..} = (\graphDriverDataData -> GraphDriverData { graphDriverDataData, ..} ) <$> f graphDriverDataData
{-# INLINE graphDriverDataDataL #-}



-- * HealthConfig

-- | 'healthConfigTest' Lens
healthConfigTestL :: Lens_' HealthConfig (Maybe [Text])
healthConfigTestL f HealthConfig{..} = (\healthConfigTest -> HealthConfig { healthConfigTest, ..} ) <$> f healthConfigTest
{-# INLINE healthConfigTestL #-}

-- | 'healthConfigInterval' Lens
healthConfigIntervalL :: Lens_' HealthConfig (Maybe Int)
healthConfigIntervalL f HealthConfig{..} = (\healthConfigInterval -> HealthConfig { healthConfigInterval, ..} ) <$> f healthConfigInterval
{-# INLINE healthConfigIntervalL #-}

-- | 'healthConfigTimeout' Lens
healthConfigTimeoutL :: Lens_' HealthConfig (Maybe Int)
healthConfigTimeoutL f HealthConfig{..} = (\healthConfigTimeout -> HealthConfig { healthConfigTimeout, ..} ) <$> f healthConfigTimeout
{-# INLINE healthConfigTimeoutL #-}

-- | 'healthConfigRetries' Lens
healthConfigRetriesL :: Lens_' HealthConfig (Maybe Int)
healthConfigRetriesL f HealthConfig{..} = (\healthConfigRetries -> HealthConfig { healthConfigRetries, ..} ) <$> f healthConfigRetries
{-# INLINE healthConfigRetriesL #-}

-- | 'healthConfigStartPeriod' Lens
healthConfigStartPeriodL :: Lens_' HealthConfig (Maybe Int)
healthConfigStartPeriodL f HealthConfig{..} = (\healthConfigStartPeriod -> HealthConfig { healthConfigStartPeriod, ..} ) <$> f healthConfigStartPeriod
{-# INLINE healthConfigStartPeriodL #-}



-- * HostConfig

-- | 'hostConfigCpuShares' Lens
hostConfigCpuSharesL :: Lens_' HostConfig (Maybe Int)
hostConfigCpuSharesL f HostConfig{..} = (\hostConfigCpuShares -> HostConfig { hostConfigCpuShares, ..} ) <$> f hostConfigCpuShares
{-# INLINE hostConfigCpuSharesL #-}

-- | 'hostConfigMemory' Lens
hostConfigMemoryL :: Lens_' HostConfig (Maybe Int)
hostConfigMemoryL f HostConfig{..} = (\hostConfigMemory -> HostConfig { hostConfigMemory, ..} ) <$> f hostConfigMemory
{-# INLINE hostConfigMemoryL #-}

-- | 'hostConfigCgroupParent' Lens
hostConfigCgroupParentL :: Lens_' HostConfig (Maybe Text)
hostConfigCgroupParentL f HostConfig{..} = (\hostConfigCgroupParent -> HostConfig { hostConfigCgroupParent, ..} ) <$> f hostConfigCgroupParent
{-# INLINE hostConfigCgroupParentL #-}

-- | 'hostConfigBlkioWeight' Lens
hostConfigBlkioWeightL :: Lens_' HostConfig (Maybe Int)
hostConfigBlkioWeightL f HostConfig{..} = (\hostConfigBlkioWeight -> HostConfig { hostConfigBlkioWeight, ..} ) <$> f hostConfigBlkioWeight
{-# INLINE hostConfigBlkioWeightL #-}

-- | 'hostConfigBlkioWeightDevice' Lens
hostConfigBlkioWeightDeviceL :: Lens_' HostConfig (Maybe [ResourcesBlkioWeightDevice])
hostConfigBlkioWeightDeviceL f HostConfig{..} = (\hostConfigBlkioWeightDevice -> HostConfig { hostConfigBlkioWeightDevice, ..} ) <$> f hostConfigBlkioWeightDevice
{-# INLINE hostConfigBlkioWeightDeviceL #-}

-- | 'hostConfigBlkioDeviceReadBps' Lens
hostConfigBlkioDeviceReadBpsL :: Lens_' HostConfig (Maybe [ThrottleDevice])
hostConfigBlkioDeviceReadBpsL f HostConfig{..} = (\hostConfigBlkioDeviceReadBps -> HostConfig { hostConfigBlkioDeviceReadBps, ..} ) <$> f hostConfigBlkioDeviceReadBps
{-# INLINE hostConfigBlkioDeviceReadBpsL #-}

-- | 'hostConfigBlkioDeviceWriteBps' Lens
hostConfigBlkioDeviceWriteBpsL :: Lens_' HostConfig (Maybe [ThrottleDevice])
hostConfigBlkioDeviceWriteBpsL f HostConfig{..} = (\hostConfigBlkioDeviceWriteBps -> HostConfig { hostConfigBlkioDeviceWriteBps, ..} ) <$> f hostConfigBlkioDeviceWriteBps
{-# INLINE hostConfigBlkioDeviceWriteBpsL #-}

-- | 'hostConfigBlkioDeviceReadIOps' Lens
hostConfigBlkioDeviceReadIOpsL :: Lens_' HostConfig (Maybe [ThrottleDevice])
hostConfigBlkioDeviceReadIOpsL f HostConfig{..} = (\hostConfigBlkioDeviceReadIOps -> HostConfig { hostConfigBlkioDeviceReadIOps, ..} ) <$> f hostConfigBlkioDeviceReadIOps
{-# INLINE hostConfigBlkioDeviceReadIOpsL #-}

-- | 'hostConfigBlkioDeviceWriteIOps' Lens
hostConfigBlkioDeviceWriteIOpsL :: Lens_' HostConfig (Maybe [ThrottleDevice])
hostConfigBlkioDeviceWriteIOpsL f HostConfig{..} = (\hostConfigBlkioDeviceWriteIOps -> HostConfig { hostConfigBlkioDeviceWriteIOps, ..} ) <$> f hostConfigBlkioDeviceWriteIOps
{-# INLINE hostConfigBlkioDeviceWriteIOpsL #-}

-- | 'hostConfigCpuPeriod' Lens
hostConfigCpuPeriodL :: Lens_' HostConfig (Maybe Integer)
hostConfigCpuPeriodL f HostConfig{..} = (\hostConfigCpuPeriod -> HostConfig { hostConfigCpuPeriod, ..} ) <$> f hostConfigCpuPeriod
{-# INLINE hostConfigCpuPeriodL #-}

-- | 'hostConfigCpuQuota' Lens
hostConfigCpuQuotaL :: Lens_' HostConfig (Maybe Integer)
hostConfigCpuQuotaL f HostConfig{..} = (\hostConfigCpuQuota -> HostConfig { hostConfigCpuQuota, ..} ) <$> f hostConfigCpuQuota
{-# INLINE hostConfigCpuQuotaL #-}

-- | 'hostConfigCpuRealtimePeriod' Lens
hostConfigCpuRealtimePeriodL :: Lens_' HostConfig (Maybe Integer)
hostConfigCpuRealtimePeriodL f HostConfig{..} = (\hostConfigCpuRealtimePeriod -> HostConfig { hostConfigCpuRealtimePeriod, ..} ) <$> f hostConfigCpuRealtimePeriod
{-# INLINE hostConfigCpuRealtimePeriodL #-}

-- | 'hostConfigCpuRealtimeRuntime' Lens
hostConfigCpuRealtimeRuntimeL :: Lens_' HostConfig (Maybe Integer)
hostConfigCpuRealtimeRuntimeL f HostConfig{..} = (\hostConfigCpuRealtimeRuntime -> HostConfig { hostConfigCpuRealtimeRuntime, ..} ) <$> f hostConfigCpuRealtimeRuntime
{-# INLINE hostConfigCpuRealtimeRuntimeL #-}

-- | 'hostConfigCpusetCpus' Lens
hostConfigCpusetCpusL :: Lens_' HostConfig (Maybe Text)
hostConfigCpusetCpusL f HostConfig{..} = (\hostConfigCpusetCpus -> HostConfig { hostConfigCpusetCpus, ..} ) <$> f hostConfigCpusetCpus
{-# INLINE hostConfigCpusetCpusL #-}

-- | 'hostConfigCpusetMems' Lens
hostConfigCpusetMemsL :: Lens_' HostConfig (Maybe Text)
hostConfigCpusetMemsL f HostConfig{..} = (\hostConfigCpusetMems -> HostConfig { hostConfigCpusetMems, ..} ) <$> f hostConfigCpusetMems
{-# INLINE hostConfigCpusetMemsL #-}

-- | 'hostConfigDevices' Lens
hostConfigDevicesL :: Lens_' HostConfig (Maybe [DeviceMapping])
hostConfigDevicesL f HostConfig{..} = (\hostConfigDevices -> HostConfig { hostConfigDevices, ..} ) <$> f hostConfigDevices
{-# INLINE hostConfigDevicesL #-}

-- | 'hostConfigDeviceCgroupRules' Lens
hostConfigDeviceCgroupRulesL :: Lens_' HostConfig (Maybe [Text])
hostConfigDeviceCgroupRulesL f HostConfig{..} = (\hostConfigDeviceCgroupRules -> HostConfig { hostConfigDeviceCgroupRules, ..} ) <$> f hostConfigDeviceCgroupRules
{-# INLINE hostConfigDeviceCgroupRulesL #-}

-- | 'hostConfigDiskQuota' Lens
hostConfigDiskQuotaL :: Lens_' HostConfig (Maybe Integer)
hostConfigDiskQuotaL f HostConfig{..} = (\hostConfigDiskQuota -> HostConfig { hostConfigDiskQuota, ..} ) <$> f hostConfigDiskQuota
{-# INLINE hostConfigDiskQuotaL #-}

-- | 'hostConfigKernelMemory' Lens
hostConfigKernelMemoryL :: Lens_' HostConfig (Maybe Integer)
hostConfigKernelMemoryL f HostConfig{..} = (\hostConfigKernelMemory -> HostConfig { hostConfigKernelMemory, ..} ) <$> f hostConfigKernelMemory
{-# INLINE hostConfigKernelMemoryL #-}

-- | 'hostConfigMemoryReservation' Lens
hostConfigMemoryReservationL :: Lens_' HostConfig (Maybe Integer)
hostConfigMemoryReservationL f HostConfig{..} = (\hostConfigMemoryReservation -> HostConfig { hostConfigMemoryReservation, ..} ) <$> f hostConfigMemoryReservation
{-# INLINE hostConfigMemoryReservationL #-}

-- | 'hostConfigMemorySwap' Lens
hostConfigMemorySwapL :: Lens_' HostConfig (Maybe Integer)
hostConfigMemorySwapL f HostConfig{..} = (\hostConfigMemorySwap -> HostConfig { hostConfigMemorySwap, ..} ) <$> f hostConfigMemorySwap
{-# INLINE hostConfigMemorySwapL #-}

-- | 'hostConfigMemorySwappiness' Lens
hostConfigMemorySwappinessL :: Lens_' HostConfig (Maybe Integer)
hostConfigMemorySwappinessL f HostConfig{..} = (\hostConfigMemorySwappiness -> HostConfig { hostConfigMemorySwappiness, ..} ) <$> f hostConfigMemorySwappiness
{-# INLINE hostConfigMemorySwappinessL #-}

-- | 'hostConfigNanoCpUs' Lens
hostConfigNanoCpUsL :: Lens_' HostConfig (Maybe Integer)
hostConfigNanoCpUsL f HostConfig{..} = (\hostConfigNanoCpUs -> HostConfig { hostConfigNanoCpUs, ..} ) <$> f hostConfigNanoCpUs
{-# INLINE hostConfigNanoCpUsL #-}

-- | 'hostConfigOomKillDisable' Lens
hostConfigOomKillDisableL :: Lens_' HostConfig (Maybe Bool)
hostConfigOomKillDisableL f HostConfig{..} = (\hostConfigOomKillDisable -> HostConfig { hostConfigOomKillDisable, ..} ) <$> f hostConfigOomKillDisable
{-# INLINE hostConfigOomKillDisableL #-}

-- | 'hostConfigPidsLimit' Lens
hostConfigPidsLimitL :: Lens_' HostConfig (Maybe Integer)
hostConfigPidsLimitL f HostConfig{..} = (\hostConfigPidsLimit -> HostConfig { hostConfigPidsLimit, ..} ) <$> f hostConfigPidsLimit
{-# INLINE hostConfigPidsLimitL #-}

-- | 'hostConfigUlimits' Lens
hostConfigUlimitsL :: Lens_' HostConfig (Maybe [ResourcesUlimits])
hostConfigUlimitsL f HostConfig{..} = (\hostConfigUlimits -> HostConfig { hostConfigUlimits, ..} ) <$> f hostConfigUlimits
{-# INLINE hostConfigUlimitsL #-}

-- | 'hostConfigCpuCount' Lens
hostConfigCpuCountL :: Lens_' HostConfig (Maybe Integer)
hostConfigCpuCountL f HostConfig{..} = (\hostConfigCpuCount -> HostConfig { hostConfigCpuCount, ..} ) <$> f hostConfigCpuCount
{-# INLINE hostConfigCpuCountL #-}

-- | 'hostConfigCpuPercent' Lens
hostConfigCpuPercentL :: Lens_' HostConfig (Maybe Integer)
hostConfigCpuPercentL f HostConfig{..} = (\hostConfigCpuPercent -> HostConfig { hostConfigCpuPercent, ..} ) <$> f hostConfigCpuPercent
{-# INLINE hostConfigCpuPercentL #-}

-- | 'hostConfigIoMaximumIOps' Lens
hostConfigIoMaximumIOpsL :: Lens_' HostConfig (Maybe Integer)
hostConfigIoMaximumIOpsL f HostConfig{..} = (\hostConfigIoMaximumIOps -> HostConfig { hostConfigIoMaximumIOps, ..} ) <$> f hostConfigIoMaximumIOps
{-# INLINE hostConfigIoMaximumIOpsL #-}

-- | 'hostConfigIoMaximumBandwidth' Lens
hostConfigIoMaximumBandwidthL :: Lens_' HostConfig (Maybe Integer)
hostConfigIoMaximumBandwidthL f HostConfig{..} = (\hostConfigIoMaximumBandwidth -> HostConfig { hostConfigIoMaximumBandwidth, ..} ) <$> f hostConfigIoMaximumBandwidth
{-# INLINE hostConfigIoMaximumBandwidthL #-}

-- | 'hostConfigBinds' Lens
hostConfigBindsL :: Lens_' HostConfig (Maybe [Text])
hostConfigBindsL f HostConfig{..} = (\hostConfigBinds -> HostConfig { hostConfigBinds, ..} ) <$> f hostConfigBinds
{-# INLINE hostConfigBindsL #-}

-- | 'hostConfigContainerIdFile' Lens
hostConfigContainerIdFileL :: Lens_' HostConfig (Maybe Text)
hostConfigContainerIdFileL f HostConfig{..} = (\hostConfigContainerIdFile -> HostConfig { hostConfigContainerIdFile, ..} ) <$> f hostConfigContainerIdFile
{-# INLINE hostConfigContainerIdFileL #-}

-- | 'hostConfigLogConfig' Lens
hostConfigLogConfigL :: Lens_' HostConfig (Maybe HostConfigAllOfLogConfig)
hostConfigLogConfigL f HostConfig{..} = (\hostConfigLogConfig -> HostConfig { hostConfigLogConfig, ..} ) <$> f hostConfigLogConfig
{-# INLINE hostConfigLogConfigL #-}

-- | 'hostConfigNetworkMode' Lens
hostConfigNetworkModeL :: Lens_' HostConfig (Maybe Text)
hostConfigNetworkModeL f HostConfig{..} = (\hostConfigNetworkMode -> HostConfig { hostConfigNetworkMode, ..} ) <$> f hostConfigNetworkMode
{-# INLINE hostConfigNetworkModeL #-}

-- | 'hostConfigPortBindings' Lens
hostConfigPortBindingsL :: Lens_' HostConfig (Maybe (Map.Map String HostConfigAllOfPortBindings))
hostConfigPortBindingsL f HostConfig{..} = (\hostConfigPortBindings -> HostConfig { hostConfigPortBindings, ..} ) <$> f hostConfigPortBindings
{-# INLINE hostConfigPortBindingsL #-}

-- | 'hostConfigRestartPolicy' Lens
hostConfigRestartPolicyL :: Lens_' HostConfig (Maybe RestartPolicy)
hostConfigRestartPolicyL f HostConfig{..} = (\hostConfigRestartPolicy -> HostConfig { hostConfigRestartPolicy, ..} ) <$> f hostConfigRestartPolicy
{-# INLINE hostConfigRestartPolicyL #-}

-- | 'hostConfigAutoRemove' Lens
hostConfigAutoRemoveL :: Lens_' HostConfig (Maybe Bool)
hostConfigAutoRemoveL f HostConfig{..} = (\hostConfigAutoRemove -> HostConfig { hostConfigAutoRemove, ..} ) <$> f hostConfigAutoRemove
{-# INLINE hostConfigAutoRemoveL #-}

-- | 'hostConfigVolumeDriver' Lens
hostConfigVolumeDriverL :: Lens_' HostConfig (Maybe Text)
hostConfigVolumeDriverL f HostConfig{..} = (\hostConfigVolumeDriver -> HostConfig { hostConfigVolumeDriver, ..} ) <$> f hostConfigVolumeDriver
{-# INLINE hostConfigVolumeDriverL #-}

-- | 'hostConfigVolumesFrom' Lens
hostConfigVolumesFromL :: Lens_' HostConfig (Maybe [Text])
hostConfigVolumesFromL f HostConfig{..} = (\hostConfigVolumesFrom -> HostConfig { hostConfigVolumesFrom, ..} ) <$> f hostConfigVolumesFrom
{-# INLINE hostConfigVolumesFromL #-}

-- | 'hostConfigMounts' Lens
hostConfigMountsL :: Lens_' HostConfig (Maybe [Mount])
hostConfigMountsL f HostConfig{..} = (\hostConfigMounts -> HostConfig { hostConfigMounts, ..} ) <$> f hostConfigMounts
{-# INLINE hostConfigMountsL #-}

-- | 'hostConfigCapAdd' Lens
hostConfigCapAddL :: Lens_' HostConfig (Maybe [Text])
hostConfigCapAddL f HostConfig{..} = (\hostConfigCapAdd -> HostConfig { hostConfigCapAdd, ..} ) <$> f hostConfigCapAdd
{-# INLINE hostConfigCapAddL #-}

-- | 'hostConfigCapDrop' Lens
hostConfigCapDropL :: Lens_' HostConfig (Maybe [Text])
hostConfigCapDropL f HostConfig{..} = (\hostConfigCapDrop -> HostConfig { hostConfigCapDrop, ..} ) <$> f hostConfigCapDrop
{-# INLINE hostConfigCapDropL #-}

-- | 'hostConfigDns' Lens
hostConfigDnsL :: Lens_' HostConfig (Maybe [Text])
hostConfigDnsL f HostConfig{..} = (\hostConfigDns -> HostConfig { hostConfigDns, ..} ) <$> f hostConfigDns
{-# INLINE hostConfigDnsL #-}

-- | 'hostConfigDnsOptions' Lens
hostConfigDnsOptionsL :: Lens_' HostConfig (Maybe [Text])
hostConfigDnsOptionsL f HostConfig{..} = (\hostConfigDnsOptions -> HostConfig { hostConfigDnsOptions, ..} ) <$> f hostConfigDnsOptions
{-# INLINE hostConfigDnsOptionsL #-}

-- | 'hostConfigDnsSearch' Lens
hostConfigDnsSearchL :: Lens_' HostConfig (Maybe [Text])
hostConfigDnsSearchL f HostConfig{..} = (\hostConfigDnsSearch -> HostConfig { hostConfigDnsSearch, ..} ) <$> f hostConfigDnsSearch
{-# INLINE hostConfigDnsSearchL #-}

-- | 'hostConfigExtraHosts' Lens
hostConfigExtraHostsL :: Lens_' HostConfig (Maybe [Text])
hostConfigExtraHostsL f HostConfig{..} = (\hostConfigExtraHosts -> HostConfig { hostConfigExtraHosts, ..} ) <$> f hostConfigExtraHosts
{-# INLINE hostConfigExtraHostsL #-}

-- | 'hostConfigGroupAdd' Lens
hostConfigGroupAddL :: Lens_' HostConfig (Maybe [Text])
hostConfigGroupAddL f HostConfig{..} = (\hostConfigGroupAdd -> HostConfig { hostConfigGroupAdd, ..} ) <$> f hostConfigGroupAdd
{-# INLINE hostConfigGroupAddL #-}

-- | 'hostConfigIpcMode' Lens
hostConfigIpcModeL :: Lens_' HostConfig (Maybe Text)
hostConfigIpcModeL f HostConfig{..} = (\hostConfigIpcMode -> HostConfig { hostConfigIpcMode, ..} ) <$> f hostConfigIpcMode
{-# INLINE hostConfigIpcModeL #-}

-- | 'hostConfigCgroup' Lens
hostConfigCgroupL :: Lens_' HostConfig (Maybe Text)
hostConfigCgroupL f HostConfig{..} = (\hostConfigCgroup -> HostConfig { hostConfigCgroup, ..} ) <$> f hostConfigCgroup
{-# INLINE hostConfigCgroupL #-}

-- | 'hostConfigLinks' Lens
hostConfigLinksL :: Lens_' HostConfig (Maybe [Text])
hostConfigLinksL f HostConfig{..} = (\hostConfigLinks -> HostConfig { hostConfigLinks, ..} ) <$> f hostConfigLinks
{-# INLINE hostConfigLinksL #-}

-- | 'hostConfigOomScoreAdj' Lens
hostConfigOomScoreAdjL :: Lens_' HostConfig (Maybe Int)
hostConfigOomScoreAdjL f HostConfig{..} = (\hostConfigOomScoreAdj -> HostConfig { hostConfigOomScoreAdj, ..} ) <$> f hostConfigOomScoreAdj
{-# INLINE hostConfigOomScoreAdjL #-}

-- | 'hostConfigPidMode' Lens
hostConfigPidModeL :: Lens_' HostConfig (Maybe Text)
hostConfigPidModeL f HostConfig{..} = (\hostConfigPidMode -> HostConfig { hostConfigPidMode, ..} ) <$> f hostConfigPidMode
{-# INLINE hostConfigPidModeL #-}

-- | 'hostConfigPrivileged' Lens
hostConfigPrivilegedL :: Lens_' HostConfig (Maybe Bool)
hostConfigPrivilegedL f HostConfig{..} = (\hostConfigPrivileged -> HostConfig { hostConfigPrivileged, ..} ) <$> f hostConfigPrivileged
{-# INLINE hostConfigPrivilegedL #-}

-- | 'hostConfigPublishAllPorts' Lens
hostConfigPublishAllPortsL :: Lens_' HostConfig (Maybe Bool)
hostConfigPublishAllPortsL f HostConfig{..} = (\hostConfigPublishAllPorts -> HostConfig { hostConfigPublishAllPorts, ..} ) <$> f hostConfigPublishAllPorts
{-# INLINE hostConfigPublishAllPortsL #-}

-- | 'hostConfigReadonlyRootfs' Lens
hostConfigReadonlyRootfsL :: Lens_' HostConfig (Maybe Bool)
hostConfigReadonlyRootfsL f HostConfig{..} = (\hostConfigReadonlyRootfs -> HostConfig { hostConfigReadonlyRootfs, ..} ) <$> f hostConfigReadonlyRootfs
{-# INLINE hostConfigReadonlyRootfsL #-}

-- | 'hostConfigSecurityOpt' Lens
hostConfigSecurityOptL :: Lens_' HostConfig (Maybe [Text])
hostConfigSecurityOptL f HostConfig{..} = (\hostConfigSecurityOpt -> HostConfig { hostConfigSecurityOpt, ..} ) <$> f hostConfigSecurityOpt
{-# INLINE hostConfigSecurityOptL #-}

-- | 'hostConfigStorageOpt' Lens
hostConfigStorageOptL :: Lens_' HostConfig (Maybe (Map.Map String Text))
hostConfigStorageOptL f HostConfig{..} = (\hostConfigStorageOpt -> HostConfig { hostConfigStorageOpt, ..} ) <$> f hostConfigStorageOpt
{-# INLINE hostConfigStorageOptL #-}

-- | 'hostConfigTmpfs' Lens
hostConfigTmpfsL :: Lens_' HostConfig (Maybe (Map.Map String Text))
hostConfigTmpfsL f HostConfig{..} = (\hostConfigTmpfs -> HostConfig { hostConfigTmpfs, ..} ) <$> f hostConfigTmpfs
{-# INLINE hostConfigTmpfsL #-}

-- | 'hostConfigUtsMode' Lens
hostConfigUtsModeL :: Lens_' HostConfig (Maybe Text)
hostConfigUtsModeL f HostConfig{..} = (\hostConfigUtsMode -> HostConfig { hostConfigUtsMode, ..} ) <$> f hostConfigUtsMode
{-# INLINE hostConfigUtsModeL #-}

-- | 'hostConfigUsernsMode' Lens
hostConfigUsernsModeL :: Lens_' HostConfig (Maybe Text)
hostConfigUsernsModeL f HostConfig{..} = (\hostConfigUsernsMode -> HostConfig { hostConfigUsernsMode, ..} ) <$> f hostConfigUsernsMode
{-# INLINE hostConfigUsernsModeL #-}

-- | 'hostConfigShmSize' Lens
hostConfigShmSizeL :: Lens_' HostConfig (Maybe Int)
hostConfigShmSizeL f HostConfig{..} = (\hostConfigShmSize -> HostConfig { hostConfigShmSize, ..} ) <$> f hostConfigShmSize
{-# INLINE hostConfigShmSizeL #-}

-- | 'hostConfigSysctls' Lens
hostConfigSysctlsL :: Lens_' HostConfig (Maybe (Map.Map String Text))
hostConfigSysctlsL f HostConfig{..} = (\hostConfigSysctls -> HostConfig { hostConfigSysctls, ..} ) <$> f hostConfigSysctls
{-# INLINE hostConfigSysctlsL #-}

-- | 'hostConfigRuntime' Lens
hostConfigRuntimeL :: Lens_' HostConfig (Maybe Text)
hostConfigRuntimeL f HostConfig{..} = (\hostConfigRuntime -> HostConfig { hostConfigRuntime, ..} ) <$> f hostConfigRuntime
{-# INLINE hostConfigRuntimeL #-}

-- | 'hostConfigConsoleSize' Lens
hostConfigConsoleSizeL :: Lens_' HostConfig (Maybe [Int])
hostConfigConsoleSizeL f HostConfig{..} = (\hostConfigConsoleSize -> HostConfig { hostConfigConsoleSize, ..} ) <$> f hostConfigConsoleSize
{-# INLINE hostConfigConsoleSizeL #-}

-- | 'hostConfigIsolation' Lens
hostConfigIsolationL :: Lens_' HostConfig (Maybe E'Isolation)
hostConfigIsolationL f HostConfig{..} = (\hostConfigIsolation -> HostConfig { hostConfigIsolation, ..} ) <$> f hostConfigIsolation
{-# INLINE hostConfigIsolationL #-}



-- * HostConfigAllOf

-- | 'hostConfigAllOfBinds' Lens
hostConfigAllOfBindsL :: Lens_' HostConfigAllOf (Maybe [Text])
hostConfigAllOfBindsL f HostConfigAllOf{..} = (\hostConfigAllOfBinds -> HostConfigAllOf { hostConfigAllOfBinds, ..} ) <$> f hostConfigAllOfBinds
{-# INLINE hostConfigAllOfBindsL #-}

-- | 'hostConfigAllOfContainerIdFile' Lens
hostConfigAllOfContainerIdFileL :: Lens_' HostConfigAllOf (Maybe Text)
hostConfigAllOfContainerIdFileL f HostConfigAllOf{..} = (\hostConfigAllOfContainerIdFile -> HostConfigAllOf { hostConfigAllOfContainerIdFile, ..} ) <$> f hostConfigAllOfContainerIdFile
{-# INLINE hostConfigAllOfContainerIdFileL #-}

-- | 'hostConfigAllOfLogConfig' Lens
hostConfigAllOfLogConfigL :: Lens_' HostConfigAllOf (Maybe HostConfigAllOfLogConfig)
hostConfigAllOfLogConfigL f HostConfigAllOf{..} = (\hostConfigAllOfLogConfig -> HostConfigAllOf { hostConfigAllOfLogConfig, ..} ) <$> f hostConfigAllOfLogConfig
{-# INLINE hostConfigAllOfLogConfigL #-}

-- | 'hostConfigAllOfNetworkMode' Lens
hostConfigAllOfNetworkModeL :: Lens_' HostConfigAllOf (Maybe Text)
hostConfigAllOfNetworkModeL f HostConfigAllOf{..} = (\hostConfigAllOfNetworkMode -> HostConfigAllOf { hostConfigAllOfNetworkMode, ..} ) <$> f hostConfigAllOfNetworkMode
{-# INLINE hostConfigAllOfNetworkModeL #-}

-- | 'hostConfigAllOfPortBindings' Lens
hostConfigAllOfPortBindingsL :: Lens_' HostConfigAllOf (Maybe (Map.Map String HostConfigAllOfPortBindings))
hostConfigAllOfPortBindingsL f HostConfigAllOf{..} = (\hostConfigAllOfPortBindings -> HostConfigAllOf { hostConfigAllOfPortBindings, ..} ) <$> f hostConfigAllOfPortBindings
{-# INLINE hostConfigAllOfPortBindingsL #-}

-- | 'hostConfigAllOfRestartPolicy' Lens
hostConfigAllOfRestartPolicyL :: Lens_' HostConfigAllOf (Maybe RestartPolicy)
hostConfigAllOfRestartPolicyL f HostConfigAllOf{..} = (\hostConfigAllOfRestartPolicy -> HostConfigAllOf { hostConfigAllOfRestartPolicy, ..} ) <$> f hostConfigAllOfRestartPolicy
{-# INLINE hostConfigAllOfRestartPolicyL #-}

-- | 'hostConfigAllOfAutoRemove' Lens
hostConfigAllOfAutoRemoveL :: Lens_' HostConfigAllOf (Maybe Bool)
hostConfigAllOfAutoRemoveL f HostConfigAllOf{..} = (\hostConfigAllOfAutoRemove -> HostConfigAllOf { hostConfigAllOfAutoRemove, ..} ) <$> f hostConfigAllOfAutoRemove
{-# INLINE hostConfigAllOfAutoRemoveL #-}

-- | 'hostConfigAllOfVolumeDriver' Lens
hostConfigAllOfVolumeDriverL :: Lens_' HostConfigAllOf (Maybe Text)
hostConfigAllOfVolumeDriverL f HostConfigAllOf{..} = (\hostConfigAllOfVolumeDriver -> HostConfigAllOf { hostConfigAllOfVolumeDriver, ..} ) <$> f hostConfigAllOfVolumeDriver
{-# INLINE hostConfigAllOfVolumeDriverL #-}

-- | 'hostConfigAllOfVolumesFrom' Lens
hostConfigAllOfVolumesFromL :: Lens_' HostConfigAllOf (Maybe [Text])
hostConfigAllOfVolumesFromL f HostConfigAllOf{..} = (\hostConfigAllOfVolumesFrom -> HostConfigAllOf { hostConfigAllOfVolumesFrom, ..} ) <$> f hostConfigAllOfVolumesFrom
{-# INLINE hostConfigAllOfVolumesFromL #-}

-- | 'hostConfigAllOfMounts' Lens
hostConfigAllOfMountsL :: Lens_' HostConfigAllOf (Maybe [Mount])
hostConfigAllOfMountsL f HostConfigAllOf{..} = (\hostConfigAllOfMounts -> HostConfigAllOf { hostConfigAllOfMounts, ..} ) <$> f hostConfigAllOfMounts
{-# INLINE hostConfigAllOfMountsL #-}

-- | 'hostConfigAllOfCapAdd' Lens
hostConfigAllOfCapAddL :: Lens_' HostConfigAllOf (Maybe [Text])
hostConfigAllOfCapAddL f HostConfigAllOf{..} = (\hostConfigAllOfCapAdd -> HostConfigAllOf { hostConfigAllOfCapAdd, ..} ) <$> f hostConfigAllOfCapAdd
{-# INLINE hostConfigAllOfCapAddL #-}

-- | 'hostConfigAllOfCapDrop' Lens
hostConfigAllOfCapDropL :: Lens_' HostConfigAllOf (Maybe [Text])
hostConfigAllOfCapDropL f HostConfigAllOf{..} = (\hostConfigAllOfCapDrop -> HostConfigAllOf { hostConfigAllOfCapDrop, ..} ) <$> f hostConfigAllOfCapDrop
{-# INLINE hostConfigAllOfCapDropL #-}

-- | 'hostConfigAllOfDns' Lens
hostConfigAllOfDnsL :: Lens_' HostConfigAllOf (Maybe [Text])
hostConfigAllOfDnsL f HostConfigAllOf{..} = (\hostConfigAllOfDns -> HostConfigAllOf { hostConfigAllOfDns, ..} ) <$> f hostConfigAllOfDns
{-# INLINE hostConfigAllOfDnsL #-}

-- | 'hostConfigAllOfDnsOptions' Lens
hostConfigAllOfDnsOptionsL :: Lens_' HostConfigAllOf (Maybe [Text])
hostConfigAllOfDnsOptionsL f HostConfigAllOf{..} = (\hostConfigAllOfDnsOptions -> HostConfigAllOf { hostConfigAllOfDnsOptions, ..} ) <$> f hostConfigAllOfDnsOptions
{-# INLINE hostConfigAllOfDnsOptionsL #-}

-- | 'hostConfigAllOfDnsSearch' Lens
hostConfigAllOfDnsSearchL :: Lens_' HostConfigAllOf (Maybe [Text])
hostConfigAllOfDnsSearchL f HostConfigAllOf{..} = (\hostConfigAllOfDnsSearch -> HostConfigAllOf { hostConfigAllOfDnsSearch, ..} ) <$> f hostConfigAllOfDnsSearch
{-# INLINE hostConfigAllOfDnsSearchL #-}

-- | 'hostConfigAllOfExtraHosts' Lens
hostConfigAllOfExtraHostsL :: Lens_' HostConfigAllOf (Maybe [Text])
hostConfigAllOfExtraHostsL f HostConfigAllOf{..} = (\hostConfigAllOfExtraHosts -> HostConfigAllOf { hostConfigAllOfExtraHosts, ..} ) <$> f hostConfigAllOfExtraHosts
{-# INLINE hostConfigAllOfExtraHostsL #-}

-- | 'hostConfigAllOfGroupAdd' Lens
hostConfigAllOfGroupAddL :: Lens_' HostConfigAllOf (Maybe [Text])
hostConfigAllOfGroupAddL f HostConfigAllOf{..} = (\hostConfigAllOfGroupAdd -> HostConfigAllOf { hostConfigAllOfGroupAdd, ..} ) <$> f hostConfigAllOfGroupAdd
{-# INLINE hostConfigAllOfGroupAddL #-}

-- | 'hostConfigAllOfIpcMode' Lens
hostConfigAllOfIpcModeL :: Lens_' HostConfigAllOf (Maybe Text)
hostConfigAllOfIpcModeL f HostConfigAllOf{..} = (\hostConfigAllOfIpcMode -> HostConfigAllOf { hostConfigAllOfIpcMode, ..} ) <$> f hostConfigAllOfIpcMode
{-# INLINE hostConfigAllOfIpcModeL #-}

-- | 'hostConfigAllOfCgroup' Lens
hostConfigAllOfCgroupL :: Lens_' HostConfigAllOf (Maybe Text)
hostConfigAllOfCgroupL f HostConfigAllOf{..} = (\hostConfigAllOfCgroup -> HostConfigAllOf { hostConfigAllOfCgroup, ..} ) <$> f hostConfigAllOfCgroup
{-# INLINE hostConfigAllOfCgroupL #-}

-- | 'hostConfigAllOfLinks' Lens
hostConfigAllOfLinksL :: Lens_' HostConfigAllOf (Maybe [Text])
hostConfigAllOfLinksL f HostConfigAllOf{..} = (\hostConfigAllOfLinks -> HostConfigAllOf { hostConfigAllOfLinks, ..} ) <$> f hostConfigAllOfLinks
{-# INLINE hostConfigAllOfLinksL #-}

-- | 'hostConfigAllOfOomScoreAdj' Lens
hostConfigAllOfOomScoreAdjL :: Lens_' HostConfigAllOf (Maybe Int)
hostConfigAllOfOomScoreAdjL f HostConfigAllOf{..} = (\hostConfigAllOfOomScoreAdj -> HostConfigAllOf { hostConfigAllOfOomScoreAdj, ..} ) <$> f hostConfigAllOfOomScoreAdj
{-# INLINE hostConfigAllOfOomScoreAdjL #-}

-- | 'hostConfigAllOfPidMode' Lens
hostConfigAllOfPidModeL :: Lens_' HostConfigAllOf (Maybe Text)
hostConfigAllOfPidModeL f HostConfigAllOf{..} = (\hostConfigAllOfPidMode -> HostConfigAllOf { hostConfigAllOfPidMode, ..} ) <$> f hostConfigAllOfPidMode
{-# INLINE hostConfigAllOfPidModeL #-}

-- | 'hostConfigAllOfPrivileged' Lens
hostConfigAllOfPrivilegedL :: Lens_' HostConfigAllOf (Maybe Bool)
hostConfigAllOfPrivilegedL f HostConfigAllOf{..} = (\hostConfigAllOfPrivileged -> HostConfigAllOf { hostConfigAllOfPrivileged, ..} ) <$> f hostConfigAllOfPrivileged
{-# INLINE hostConfigAllOfPrivilegedL #-}

-- | 'hostConfigAllOfPublishAllPorts' Lens
hostConfigAllOfPublishAllPortsL :: Lens_' HostConfigAllOf (Maybe Bool)
hostConfigAllOfPublishAllPortsL f HostConfigAllOf{..} = (\hostConfigAllOfPublishAllPorts -> HostConfigAllOf { hostConfigAllOfPublishAllPorts, ..} ) <$> f hostConfigAllOfPublishAllPorts
{-# INLINE hostConfigAllOfPublishAllPortsL #-}

-- | 'hostConfigAllOfReadonlyRootfs' Lens
hostConfigAllOfReadonlyRootfsL :: Lens_' HostConfigAllOf (Maybe Bool)
hostConfigAllOfReadonlyRootfsL f HostConfigAllOf{..} = (\hostConfigAllOfReadonlyRootfs -> HostConfigAllOf { hostConfigAllOfReadonlyRootfs, ..} ) <$> f hostConfigAllOfReadonlyRootfs
{-# INLINE hostConfigAllOfReadonlyRootfsL #-}

-- | 'hostConfigAllOfSecurityOpt' Lens
hostConfigAllOfSecurityOptL :: Lens_' HostConfigAllOf (Maybe [Text])
hostConfigAllOfSecurityOptL f HostConfigAllOf{..} = (\hostConfigAllOfSecurityOpt -> HostConfigAllOf { hostConfigAllOfSecurityOpt, ..} ) <$> f hostConfigAllOfSecurityOpt
{-# INLINE hostConfigAllOfSecurityOptL #-}

-- | 'hostConfigAllOfStorageOpt' Lens
hostConfigAllOfStorageOptL :: Lens_' HostConfigAllOf (Maybe (Map.Map String Text))
hostConfigAllOfStorageOptL f HostConfigAllOf{..} = (\hostConfigAllOfStorageOpt -> HostConfigAllOf { hostConfigAllOfStorageOpt, ..} ) <$> f hostConfigAllOfStorageOpt
{-# INLINE hostConfigAllOfStorageOptL #-}

-- | 'hostConfigAllOfTmpfs' Lens
hostConfigAllOfTmpfsL :: Lens_' HostConfigAllOf (Maybe (Map.Map String Text))
hostConfigAllOfTmpfsL f HostConfigAllOf{..} = (\hostConfigAllOfTmpfs -> HostConfigAllOf { hostConfigAllOfTmpfs, ..} ) <$> f hostConfigAllOfTmpfs
{-# INLINE hostConfigAllOfTmpfsL #-}

-- | 'hostConfigAllOfUtsMode' Lens
hostConfigAllOfUtsModeL :: Lens_' HostConfigAllOf (Maybe Text)
hostConfigAllOfUtsModeL f HostConfigAllOf{..} = (\hostConfigAllOfUtsMode -> HostConfigAllOf { hostConfigAllOfUtsMode, ..} ) <$> f hostConfigAllOfUtsMode
{-# INLINE hostConfigAllOfUtsModeL #-}

-- | 'hostConfigAllOfUsernsMode' Lens
hostConfigAllOfUsernsModeL :: Lens_' HostConfigAllOf (Maybe Text)
hostConfigAllOfUsernsModeL f HostConfigAllOf{..} = (\hostConfigAllOfUsernsMode -> HostConfigAllOf { hostConfigAllOfUsernsMode, ..} ) <$> f hostConfigAllOfUsernsMode
{-# INLINE hostConfigAllOfUsernsModeL #-}

-- | 'hostConfigAllOfShmSize' Lens
hostConfigAllOfShmSizeL :: Lens_' HostConfigAllOf (Maybe Int)
hostConfigAllOfShmSizeL f HostConfigAllOf{..} = (\hostConfigAllOfShmSize -> HostConfigAllOf { hostConfigAllOfShmSize, ..} ) <$> f hostConfigAllOfShmSize
{-# INLINE hostConfigAllOfShmSizeL #-}

-- | 'hostConfigAllOfSysctls' Lens
hostConfigAllOfSysctlsL :: Lens_' HostConfigAllOf (Maybe (Map.Map String Text))
hostConfigAllOfSysctlsL f HostConfigAllOf{..} = (\hostConfigAllOfSysctls -> HostConfigAllOf { hostConfigAllOfSysctls, ..} ) <$> f hostConfigAllOfSysctls
{-# INLINE hostConfigAllOfSysctlsL #-}

-- | 'hostConfigAllOfRuntime' Lens
hostConfigAllOfRuntimeL :: Lens_' HostConfigAllOf (Maybe Text)
hostConfigAllOfRuntimeL f HostConfigAllOf{..} = (\hostConfigAllOfRuntime -> HostConfigAllOf { hostConfigAllOfRuntime, ..} ) <$> f hostConfigAllOfRuntime
{-# INLINE hostConfigAllOfRuntimeL #-}

-- | 'hostConfigAllOfConsoleSize' Lens
hostConfigAllOfConsoleSizeL :: Lens_' HostConfigAllOf (Maybe [Int])
hostConfigAllOfConsoleSizeL f HostConfigAllOf{..} = (\hostConfigAllOfConsoleSize -> HostConfigAllOf { hostConfigAllOfConsoleSize, ..} ) <$> f hostConfigAllOfConsoleSize
{-# INLINE hostConfigAllOfConsoleSizeL #-}

-- | 'hostConfigAllOfIsolation' Lens
hostConfigAllOfIsolationL :: Lens_' HostConfigAllOf (Maybe E'Isolation)
hostConfigAllOfIsolationL f HostConfigAllOf{..} = (\hostConfigAllOfIsolation -> HostConfigAllOf { hostConfigAllOfIsolation, ..} ) <$> f hostConfigAllOfIsolation
{-# INLINE hostConfigAllOfIsolationL #-}



-- * HostConfigAllOfLogConfig

-- | 'hostConfigAllOfLogConfigType' Lens
hostConfigAllOfLogConfigTypeL :: Lens_' HostConfigAllOfLogConfig (Maybe E'Type3)
hostConfigAllOfLogConfigTypeL f HostConfigAllOfLogConfig{..} = (\hostConfigAllOfLogConfigType -> HostConfigAllOfLogConfig { hostConfigAllOfLogConfigType, ..} ) <$> f hostConfigAllOfLogConfigType
{-# INLINE hostConfigAllOfLogConfigTypeL #-}

-- | 'hostConfigAllOfLogConfigConfig' Lens
hostConfigAllOfLogConfigConfigL :: Lens_' HostConfigAllOfLogConfig (Maybe (Map.Map String Text))
hostConfigAllOfLogConfigConfigL f HostConfigAllOfLogConfig{..} = (\hostConfigAllOfLogConfigConfig -> HostConfigAllOfLogConfig { hostConfigAllOfLogConfigConfig, ..} ) <$> f hostConfigAllOfLogConfigConfig
{-# INLINE hostConfigAllOfLogConfigConfigL #-}



-- * HostConfigAllOfPortBindings

-- | 'hostConfigAllOfPortBindingsHostIp' Lens
hostConfigAllOfPortBindingsHostIpL :: Lens_' HostConfigAllOfPortBindings (Maybe Text)
hostConfigAllOfPortBindingsHostIpL f HostConfigAllOfPortBindings{..} = (\hostConfigAllOfPortBindingsHostIp -> HostConfigAllOfPortBindings { hostConfigAllOfPortBindingsHostIp, ..} ) <$> f hostConfigAllOfPortBindingsHostIp
{-# INLINE hostConfigAllOfPortBindingsHostIpL #-}

-- | 'hostConfigAllOfPortBindingsHostPort' Lens
hostConfigAllOfPortBindingsHostPortL :: Lens_' HostConfigAllOfPortBindings (Maybe Text)
hostConfigAllOfPortBindingsHostPortL f HostConfigAllOfPortBindings{..} = (\hostConfigAllOfPortBindingsHostPort -> HostConfigAllOfPortBindings { hostConfigAllOfPortBindingsHostPort, ..} ) <$> f hostConfigAllOfPortBindingsHostPort
{-# INLINE hostConfigAllOfPortBindingsHostPortL #-}



-- * IPAM

-- | 'iPAMDriver' Lens
iPAMDriverL :: Lens_' IPAM (Maybe Text)
iPAMDriverL f IPAM{..} = (\iPAMDriver -> IPAM { iPAMDriver, ..} ) <$> f iPAMDriver
{-# INLINE iPAMDriverL #-}

-- | 'iPAMConfig' Lens
iPAMConfigL :: Lens_' IPAM (Maybe [(Map.Map String Text)])
iPAMConfigL f IPAM{..} = (\iPAMConfig -> IPAM { iPAMConfig, ..} ) <$> f iPAMConfig
{-# INLINE iPAMConfigL #-}

-- | 'iPAMOptions' Lens
iPAMOptionsL :: Lens_' IPAM (Maybe [(Map.Map String Text)])
iPAMOptionsL f IPAM{..} = (\iPAMOptions -> IPAM { iPAMOptions, ..} ) <$> f iPAMOptions
{-# INLINE iPAMOptionsL #-}



-- * IdResponse

-- | 'idResponseId' Lens
idResponseIdL :: Lens_' IdResponse (Text)
idResponseIdL f IdResponse{..} = (\idResponseId -> IdResponse { idResponseId, ..} ) <$> f idResponseId
{-# INLINE idResponseIdL #-}



-- * Image

-- | 'imageId' Lens
imageIdL :: Lens_' Image (Text)
imageIdL f Image{..} = (\imageId -> Image { imageId, ..} ) <$> f imageId
{-# INLINE imageIdL #-}

-- | 'imageRepoTags' Lens
imageRepoTagsL :: Lens_' Image (Maybe [Text])
imageRepoTagsL f Image{..} = (\imageRepoTags -> Image { imageRepoTags, ..} ) <$> f imageRepoTags
{-# INLINE imageRepoTagsL #-}

-- | 'imageRepoDigests' Lens
imageRepoDigestsL :: Lens_' Image (Maybe [Text])
imageRepoDigestsL f Image{..} = (\imageRepoDigests -> Image { imageRepoDigests, ..} ) <$> f imageRepoDigests
{-# INLINE imageRepoDigestsL #-}

-- | 'imageParent' Lens
imageParentL :: Lens_' Image (Text)
imageParentL f Image{..} = (\imageParent -> Image { imageParent, ..} ) <$> f imageParent
{-# INLINE imageParentL #-}

-- | 'imageComment' Lens
imageCommentL :: Lens_' Image (Text)
imageCommentL f Image{..} = (\imageComment -> Image { imageComment, ..} ) <$> f imageComment
{-# INLINE imageCommentL #-}

-- | 'imageCreated' Lens
imageCreatedL :: Lens_' Image (Text)
imageCreatedL f Image{..} = (\imageCreated -> Image { imageCreated, ..} ) <$> f imageCreated
{-# INLINE imageCreatedL #-}

-- | 'imageContainer' Lens
imageContainerL :: Lens_' Image (Text)
imageContainerL f Image{..} = (\imageContainer -> Image { imageContainer, ..} ) <$> f imageContainer
{-# INLINE imageContainerL #-}

-- | 'imageContainerConfig' Lens
imageContainerConfigL :: Lens_' Image (Maybe ContainerConfig)
imageContainerConfigL f Image{..} = (\imageContainerConfig -> Image { imageContainerConfig, ..} ) <$> f imageContainerConfig
{-# INLINE imageContainerConfigL #-}

-- | 'imageDockerVersion' Lens
imageDockerVersionL :: Lens_' Image (Text)
imageDockerVersionL f Image{..} = (\imageDockerVersion -> Image { imageDockerVersion, ..} ) <$> f imageDockerVersion
{-# INLINE imageDockerVersionL #-}

-- | 'imageAuthor' Lens
imageAuthorL :: Lens_' Image (Text)
imageAuthorL f Image{..} = (\imageAuthor -> Image { imageAuthor, ..} ) <$> f imageAuthor
{-# INLINE imageAuthorL #-}

-- | 'imageConfig' Lens
imageConfigL :: Lens_' Image (Maybe ContainerConfig)
imageConfigL f Image{..} = (\imageConfig -> Image { imageConfig, ..} ) <$> f imageConfig
{-# INLINE imageConfigL #-}

-- | 'imageArchitecture' Lens
imageArchitectureL :: Lens_' Image (Text)
imageArchitectureL f Image{..} = (\imageArchitecture -> Image { imageArchitecture, ..} ) <$> f imageArchitecture
{-# INLINE imageArchitectureL #-}

-- | 'imageOs' Lens
imageOsL :: Lens_' Image (Text)
imageOsL f Image{..} = (\imageOs -> Image { imageOs, ..} ) <$> f imageOs
{-# INLINE imageOsL #-}

-- | 'imageOsVersion' Lens
imageOsVersionL :: Lens_' Image (Maybe Text)
imageOsVersionL f Image{..} = (\imageOsVersion -> Image { imageOsVersion, ..} ) <$> f imageOsVersion
{-# INLINE imageOsVersionL #-}

-- | 'imageSize' Lens
imageSizeL :: Lens_' Image (Integer)
imageSizeL f Image{..} = (\imageSize -> Image { imageSize, ..} ) <$> f imageSize
{-# INLINE imageSizeL #-}

-- | 'imageVirtualSize' Lens
imageVirtualSizeL :: Lens_' Image (Integer)
imageVirtualSizeL f Image{..} = (\imageVirtualSize -> Image { imageVirtualSize, ..} ) <$> f imageVirtualSize
{-# INLINE imageVirtualSizeL #-}

-- | 'imageGraphDriver' Lens
imageGraphDriverL :: Lens_' Image (GraphDriverData)
imageGraphDriverL f Image{..} = (\imageGraphDriver -> Image { imageGraphDriver, ..} ) <$> f imageGraphDriver
{-# INLINE imageGraphDriverL #-}

-- | 'imageRootFs' Lens
imageRootFsL :: Lens_' Image (ImageRootFS)
imageRootFsL f Image{..} = (\imageRootFs -> Image { imageRootFs, ..} ) <$> f imageRootFs
{-# INLINE imageRootFsL #-}



-- * ImageDeleteResponseItem

-- | 'imageDeleteResponseItemUntagged' Lens
imageDeleteResponseItemUntaggedL :: Lens_' ImageDeleteResponseItem (Maybe Text)
imageDeleteResponseItemUntaggedL f ImageDeleteResponseItem{..} = (\imageDeleteResponseItemUntagged -> ImageDeleteResponseItem { imageDeleteResponseItemUntagged, ..} ) <$> f imageDeleteResponseItemUntagged
{-# INLINE imageDeleteResponseItemUntaggedL #-}

-- | 'imageDeleteResponseItemDeleted' Lens
imageDeleteResponseItemDeletedL :: Lens_' ImageDeleteResponseItem (Maybe Text)
imageDeleteResponseItemDeletedL f ImageDeleteResponseItem{..} = (\imageDeleteResponseItemDeleted -> ImageDeleteResponseItem { imageDeleteResponseItemDeleted, ..} ) <$> f imageDeleteResponseItemDeleted
{-# INLINE imageDeleteResponseItemDeletedL #-}



-- * ImageRootFS

-- | 'imageRootFSType' Lens
imageRootFSTypeL :: Lens_' ImageRootFS (Text)
imageRootFSTypeL f ImageRootFS{..} = (\imageRootFSType -> ImageRootFS { imageRootFSType, ..} ) <$> f imageRootFSType
{-# INLINE imageRootFSTypeL #-}

-- | 'imageRootFSLayers' Lens
imageRootFSLayersL :: Lens_' ImageRootFS (Maybe [Text])
imageRootFSLayersL f ImageRootFS{..} = (\imageRootFSLayers -> ImageRootFS { imageRootFSLayers, ..} ) <$> f imageRootFSLayers
{-# INLINE imageRootFSLayersL #-}

-- | 'imageRootFSBaseLayer' Lens
imageRootFSBaseLayerL :: Lens_' ImageRootFS (Maybe Text)
imageRootFSBaseLayerL f ImageRootFS{..} = (\imageRootFSBaseLayer -> ImageRootFS { imageRootFSBaseLayer, ..} ) <$> f imageRootFSBaseLayer
{-# INLINE imageRootFSBaseLayerL #-}



-- * ImageSummary

-- | 'imageSummaryId' Lens
imageSummaryIdL :: Lens_' ImageSummary (Text)
imageSummaryIdL f ImageSummary{..} = (\imageSummaryId -> ImageSummary { imageSummaryId, ..} ) <$> f imageSummaryId
{-# INLINE imageSummaryIdL #-}

-- | 'imageSummaryParentId' Lens
imageSummaryParentIdL :: Lens_' ImageSummary (Text)
imageSummaryParentIdL f ImageSummary{..} = (\imageSummaryParentId -> ImageSummary { imageSummaryParentId, ..} ) <$> f imageSummaryParentId
{-# INLINE imageSummaryParentIdL #-}

-- | 'imageSummaryRepoTags' Lens
imageSummaryRepoTagsL :: Lens_' ImageSummary ([Text])
imageSummaryRepoTagsL f ImageSummary{..} = (\imageSummaryRepoTags -> ImageSummary { imageSummaryRepoTags, ..} ) <$> f imageSummaryRepoTags
{-# INLINE imageSummaryRepoTagsL #-}

-- | 'imageSummaryRepoDigests' Lens
imageSummaryRepoDigestsL :: Lens_' ImageSummary ([Text])
imageSummaryRepoDigestsL f ImageSummary{..} = (\imageSummaryRepoDigests -> ImageSummary { imageSummaryRepoDigests, ..} ) <$> f imageSummaryRepoDigests
{-# INLINE imageSummaryRepoDigestsL #-}

-- | 'imageSummaryCreated' Lens
imageSummaryCreatedL :: Lens_' ImageSummary (Int)
imageSummaryCreatedL f ImageSummary{..} = (\imageSummaryCreated -> ImageSummary { imageSummaryCreated, ..} ) <$> f imageSummaryCreated
{-# INLINE imageSummaryCreatedL #-}

-- | 'imageSummarySize' Lens
imageSummarySizeL :: Lens_' ImageSummary (Int)
imageSummarySizeL f ImageSummary{..} = (\imageSummarySize -> ImageSummary { imageSummarySize, ..} ) <$> f imageSummarySize
{-# INLINE imageSummarySizeL #-}

-- | 'imageSummarySharedSize' Lens
imageSummarySharedSizeL :: Lens_' ImageSummary (Int)
imageSummarySharedSizeL f ImageSummary{..} = (\imageSummarySharedSize -> ImageSummary { imageSummarySharedSize, ..} ) <$> f imageSummarySharedSize
{-# INLINE imageSummarySharedSizeL #-}

-- | 'imageSummaryVirtualSize' Lens
imageSummaryVirtualSizeL :: Lens_' ImageSummary (Int)
imageSummaryVirtualSizeL f ImageSummary{..} = (\imageSummaryVirtualSize -> ImageSummary { imageSummaryVirtualSize, ..} ) <$> f imageSummaryVirtualSize
{-# INLINE imageSummaryVirtualSizeL #-}

-- | 'imageSummaryLabels' Lens
imageSummaryLabelsL :: Lens_' ImageSummary ((Map.Map String Text))
imageSummaryLabelsL f ImageSummary{..} = (\imageSummaryLabels -> ImageSummary { imageSummaryLabels, ..} ) <$> f imageSummaryLabels
{-# INLINE imageSummaryLabelsL #-}

-- | 'imageSummaryContainers' Lens
imageSummaryContainersL :: Lens_' ImageSummary (Int)
imageSummaryContainersL f ImageSummary{..} = (\imageSummaryContainers -> ImageSummary { imageSummaryContainers, ..} ) <$> f imageSummaryContainers
{-# INLINE imageSummaryContainersL #-}



-- * InlineObject

-- | 'inlineObjectName' Lens
inlineObjectNameL :: Lens_' InlineObject (Maybe Text)
inlineObjectNameL f InlineObject{..} = (\inlineObjectName -> InlineObject { inlineObjectName, ..} ) <$> f inlineObjectName
{-# INLINE inlineObjectNameL #-}

-- | 'inlineObjectDescription' Lens
inlineObjectDescriptionL :: Lens_' InlineObject (Maybe Text)
inlineObjectDescriptionL f InlineObject{..} = (\inlineObjectDescription -> InlineObject { inlineObjectDescription, ..} ) <$> f inlineObjectDescription
{-# INLINE inlineObjectDescriptionL #-}

-- | 'inlineObjectValue' Lens
inlineObjectValueL :: Lens_' InlineObject (Maybe [Text])
inlineObjectValueL f InlineObject{..} = (\inlineObjectValue -> InlineObject { inlineObjectValue, ..} ) <$> f inlineObjectValue
{-# INLINE inlineObjectValueL #-}



-- * InlineObject1

-- | 'inlineObject1Detach' Lens
inlineObject1DetachL :: Lens_' InlineObject1 (Maybe Bool)
inlineObject1DetachL f InlineObject1{..} = (\inlineObject1Detach -> InlineObject1 { inlineObject1Detach, ..} ) <$> f inlineObject1Detach
{-# INLINE inlineObject1DetachL #-}

-- | 'inlineObject1Tty' Lens
inlineObject1TtyL :: Lens_' InlineObject1 (Maybe Bool)
inlineObject1TtyL f InlineObject1{..} = (\inlineObject1Tty -> InlineObject1 { inlineObject1Tty, ..} ) <$> f inlineObject1Tty
{-# INLINE inlineObject1TtyL #-}



-- * InlineObject2

-- | 'inlineObject2Name' Lens
inlineObject2NameL :: Lens_' InlineObject2 (Maybe Text)
inlineObject2NameL f InlineObject2{..} = (\inlineObject2Name -> InlineObject2 { inlineObject2Name, ..} ) <$> f inlineObject2Name
{-# INLINE inlineObject2NameL #-}

-- | 'inlineObject2Driver' Lens
inlineObject2DriverL :: Lens_' InlineObject2 (Maybe Text)
inlineObject2DriverL f InlineObject2{..} = (\inlineObject2Driver -> InlineObject2 { inlineObject2Driver, ..} ) <$> f inlineObject2Driver
{-# INLINE inlineObject2DriverL #-}

-- | 'inlineObject2DriverOpts' Lens
inlineObject2DriverOptsL :: Lens_' InlineObject2 (Maybe (Map.Map String Text))
inlineObject2DriverOptsL f InlineObject2{..} = (\inlineObject2DriverOpts -> InlineObject2 { inlineObject2DriverOpts, ..} ) <$> f inlineObject2DriverOpts
{-# INLINE inlineObject2DriverOptsL #-}

-- | 'inlineObject2Labels' Lens
inlineObject2LabelsL :: Lens_' InlineObject2 (Maybe (Map.Map String Text))
inlineObject2LabelsL f InlineObject2{..} = (\inlineObject2Labels -> InlineObject2 { inlineObject2Labels, ..} ) <$> f inlineObject2Labels
{-# INLINE inlineObject2LabelsL #-}



-- * InlineObject3

-- | 'inlineObject3Name' Lens
inlineObject3NameL :: Lens_' InlineObject3 (Text)
inlineObject3NameL f InlineObject3{..} = (\inlineObject3Name -> InlineObject3 { inlineObject3Name, ..} ) <$> f inlineObject3Name
{-# INLINE inlineObject3NameL #-}

-- | 'inlineObject3CheckDuplicate' Lens
inlineObject3CheckDuplicateL :: Lens_' InlineObject3 (Maybe Bool)
inlineObject3CheckDuplicateL f InlineObject3{..} = (\inlineObject3CheckDuplicate -> InlineObject3 { inlineObject3CheckDuplicate, ..} ) <$> f inlineObject3CheckDuplicate
{-# INLINE inlineObject3CheckDuplicateL #-}

-- | 'inlineObject3Driver' Lens
inlineObject3DriverL :: Lens_' InlineObject3 (Maybe Text)
inlineObject3DriverL f InlineObject3{..} = (\inlineObject3Driver -> InlineObject3 { inlineObject3Driver, ..} ) <$> f inlineObject3Driver
{-# INLINE inlineObject3DriverL #-}

-- | 'inlineObject3Internal' Lens
inlineObject3InternalL :: Lens_' InlineObject3 (Maybe Bool)
inlineObject3InternalL f InlineObject3{..} = (\inlineObject3Internal -> InlineObject3 { inlineObject3Internal, ..} ) <$> f inlineObject3Internal
{-# INLINE inlineObject3InternalL #-}

-- | 'inlineObject3Attachable' Lens
inlineObject3AttachableL :: Lens_' InlineObject3 (Maybe Bool)
inlineObject3AttachableL f InlineObject3{..} = (\inlineObject3Attachable -> InlineObject3 { inlineObject3Attachable, ..} ) <$> f inlineObject3Attachable
{-# INLINE inlineObject3AttachableL #-}

-- | 'inlineObject3Ingress' Lens
inlineObject3IngressL :: Lens_' InlineObject3 (Maybe Bool)
inlineObject3IngressL f InlineObject3{..} = (\inlineObject3Ingress -> InlineObject3 { inlineObject3Ingress, ..} ) <$> f inlineObject3Ingress
{-# INLINE inlineObject3IngressL #-}

-- | 'inlineObject3Ipam' Lens
inlineObject3IpamL :: Lens_' InlineObject3 (Maybe IPAM)
inlineObject3IpamL f InlineObject3{..} = (\inlineObject3Ipam -> InlineObject3 { inlineObject3Ipam, ..} ) <$> f inlineObject3Ipam
{-# INLINE inlineObject3IpamL #-}

-- | 'inlineObject3EnableIPv6' Lens
inlineObject3EnableIPv6L :: Lens_' InlineObject3 (Maybe Bool)
inlineObject3EnableIPv6L f InlineObject3{..} = (\inlineObject3EnableIPv6 -> InlineObject3 { inlineObject3EnableIPv6, ..} ) <$> f inlineObject3EnableIPv6
{-# INLINE inlineObject3EnableIPv6L #-}

-- | 'inlineObject3Options' Lens
inlineObject3OptionsL :: Lens_' InlineObject3 (Maybe (Map.Map String Text))
inlineObject3OptionsL f InlineObject3{..} = (\inlineObject3Options -> InlineObject3 { inlineObject3Options, ..} ) <$> f inlineObject3Options
{-# INLINE inlineObject3OptionsL #-}

-- | 'inlineObject3Labels' Lens
inlineObject3LabelsL :: Lens_' InlineObject3 (Maybe (Map.Map String Text))
inlineObject3LabelsL f InlineObject3{..} = (\inlineObject3Labels -> InlineObject3 { inlineObject3Labels, ..} ) <$> f inlineObject3Labels
{-# INLINE inlineObject3LabelsL #-}



-- * InlineObject4

-- | 'inlineObject4Container' Lens
inlineObject4ContainerL :: Lens_' InlineObject4 (Maybe Text)
inlineObject4ContainerL f InlineObject4{..} = (\inlineObject4Container -> InlineObject4 { inlineObject4Container, ..} ) <$> f inlineObject4Container
{-# INLINE inlineObject4ContainerL #-}

-- | 'inlineObject4EndpointConfig' Lens
inlineObject4EndpointConfigL :: Lens_' InlineObject4 (Maybe EndpointSettings)
inlineObject4EndpointConfigL f InlineObject4{..} = (\inlineObject4EndpointConfig -> InlineObject4 { inlineObject4EndpointConfig, ..} ) <$> f inlineObject4EndpointConfig
{-# INLINE inlineObject4EndpointConfigL #-}



-- * InlineObject5

-- | 'inlineObject5Container' Lens
inlineObject5ContainerL :: Lens_' InlineObject5 (Maybe Text)
inlineObject5ContainerL f InlineObject5{..} = (\inlineObject5Container -> InlineObject5 { inlineObject5Container, ..} ) <$> f inlineObject5Container
{-# INLINE inlineObject5ContainerL #-}

-- | 'inlineObject5Force' Lens
inlineObject5ForceL :: Lens_' InlineObject5 (Maybe Bool)
inlineObject5ForceL f InlineObject5{..} = (\inlineObject5Force -> InlineObject5 { inlineObject5Force, ..} ) <$> f inlineObject5Force
{-# INLINE inlineObject5ForceL #-}



-- * InlineObject6

-- | 'inlineObject6ListenAddr' Lens
inlineObject6ListenAddrL :: Lens_' InlineObject6 (Maybe Text)
inlineObject6ListenAddrL f InlineObject6{..} = (\inlineObject6ListenAddr -> InlineObject6 { inlineObject6ListenAddr, ..} ) <$> f inlineObject6ListenAddr
{-# INLINE inlineObject6ListenAddrL #-}

-- | 'inlineObject6AdvertiseAddr' Lens
inlineObject6AdvertiseAddrL :: Lens_' InlineObject6 (Maybe Text)
inlineObject6AdvertiseAddrL f InlineObject6{..} = (\inlineObject6AdvertiseAddr -> InlineObject6 { inlineObject6AdvertiseAddr, ..} ) <$> f inlineObject6AdvertiseAddr
{-# INLINE inlineObject6AdvertiseAddrL #-}

-- | 'inlineObject6DataPathAddr' Lens
inlineObject6DataPathAddrL :: Lens_' InlineObject6 (Maybe Text)
inlineObject6DataPathAddrL f InlineObject6{..} = (\inlineObject6DataPathAddr -> InlineObject6 { inlineObject6DataPathAddr, ..} ) <$> f inlineObject6DataPathAddr
{-# INLINE inlineObject6DataPathAddrL #-}

-- | 'inlineObject6ForceNewCluster' Lens
inlineObject6ForceNewClusterL :: Lens_' InlineObject6 (Maybe Bool)
inlineObject6ForceNewClusterL f InlineObject6{..} = (\inlineObject6ForceNewCluster -> InlineObject6 { inlineObject6ForceNewCluster, ..} ) <$> f inlineObject6ForceNewCluster
{-# INLINE inlineObject6ForceNewClusterL #-}

-- | 'inlineObject6Spec' Lens
inlineObject6SpecL :: Lens_' InlineObject6 (Maybe SwarmSpec)
inlineObject6SpecL f InlineObject6{..} = (\inlineObject6Spec -> InlineObject6 { inlineObject6Spec, ..} ) <$> f inlineObject6Spec
{-# INLINE inlineObject6SpecL #-}



-- * InlineObject7

-- | 'inlineObject7ListenAddr' Lens
inlineObject7ListenAddrL :: Lens_' InlineObject7 (Maybe Text)
inlineObject7ListenAddrL f InlineObject7{..} = (\inlineObject7ListenAddr -> InlineObject7 { inlineObject7ListenAddr, ..} ) <$> f inlineObject7ListenAddr
{-# INLINE inlineObject7ListenAddrL #-}

-- | 'inlineObject7AdvertiseAddr' Lens
inlineObject7AdvertiseAddrL :: Lens_' InlineObject7 (Maybe Text)
inlineObject7AdvertiseAddrL f InlineObject7{..} = (\inlineObject7AdvertiseAddr -> InlineObject7 { inlineObject7AdvertiseAddr, ..} ) <$> f inlineObject7AdvertiseAddr
{-# INLINE inlineObject7AdvertiseAddrL #-}

-- | 'inlineObject7DataPathAddr' Lens
inlineObject7DataPathAddrL :: Lens_' InlineObject7 (Maybe Text)
inlineObject7DataPathAddrL f InlineObject7{..} = (\inlineObject7DataPathAddr -> InlineObject7 { inlineObject7DataPathAddr, ..} ) <$> f inlineObject7DataPathAddr
{-# INLINE inlineObject7DataPathAddrL #-}

-- | 'inlineObject7RemoteAddrs' Lens
inlineObject7RemoteAddrsL :: Lens_' InlineObject7 (Maybe Text)
inlineObject7RemoteAddrsL f InlineObject7{..} = (\inlineObject7RemoteAddrs -> InlineObject7 { inlineObject7RemoteAddrs, ..} ) <$> f inlineObject7RemoteAddrs
{-# INLINE inlineObject7RemoteAddrsL #-}

-- | 'inlineObject7JoinToken' Lens
inlineObject7JoinTokenL :: Lens_' InlineObject7 (Maybe Text)
inlineObject7JoinTokenL f InlineObject7{..} = (\inlineObject7JoinToken -> InlineObject7 { inlineObject7JoinToken, ..} ) <$> f inlineObject7JoinToken
{-# INLINE inlineObject7JoinTokenL #-}



-- * InlineObject8

-- | 'inlineObject8UnlockKey' Lens
inlineObject8UnlockKeyL :: Lens_' InlineObject8 (Maybe Text)
inlineObject8UnlockKeyL f InlineObject8{..} = (\inlineObject8UnlockKey -> InlineObject8 { inlineObject8UnlockKey, ..} ) <$> f inlineObject8UnlockKey
{-# INLINE inlineObject8UnlockKeyL #-}



-- * InlineResponse200

-- | 'inlineResponse200Id' Lens
inlineResponse200IdL :: Lens_' InlineResponse200 (Maybe Text)
inlineResponse200IdL f InlineResponse200{..} = (\inlineResponse200Id -> InlineResponse200 { inlineResponse200Id, ..} ) <$> f inlineResponse200Id
{-# INLINE inlineResponse200IdL #-}

-- | 'inlineResponse200Created' Lens
inlineResponse200CreatedL :: Lens_' InlineResponse200 (Maybe Text)
inlineResponse200CreatedL f InlineResponse200{..} = (\inlineResponse200Created -> InlineResponse200 { inlineResponse200Created, ..} ) <$> f inlineResponse200Created
{-# INLINE inlineResponse200CreatedL #-}

-- | 'inlineResponse200Path' Lens
inlineResponse200PathL :: Lens_' InlineResponse200 (Maybe Text)
inlineResponse200PathL f InlineResponse200{..} = (\inlineResponse200Path -> InlineResponse200 { inlineResponse200Path, ..} ) <$> f inlineResponse200Path
{-# INLINE inlineResponse200PathL #-}

-- | 'inlineResponse200Args' Lens
inlineResponse200ArgsL :: Lens_' InlineResponse200 (Maybe [Text])
inlineResponse200ArgsL f InlineResponse200{..} = (\inlineResponse200Args -> InlineResponse200 { inlineResponse200Args, ..} ) <$> f inlineResponse200Args
{-# INLINE inlineResponse200ArgsL #-}

-- | 'inlineResponse200State' Lens
inlineResponse200StateL :: Lens_' InlineResponse200 (Maybe InlineResponse200State)
inlineResponse200StateL f InlineResponse200{..} = (\inlineResponse200State -> InlineResponse200 { inlineResponse200State, ..} ) <$> f inlineResponse200State
{-# INLINE inlineResponse200StateL #-}

-- | 'inlineResponse200Image' Lens
inlineResponse200ImageL :: Lens_' InlineResponse200 (Maybe Text)
inlineResponse200ImageL f InlineResponse200{..} = (\inlineResponse200Image -> InlineResponse200 { inlineResponse200Image, ..} ) <$> f inlineResponse200Image
{-# INLINE inlineResponse200ImageL #-}

-- | 'inlineResponse200ResolvConfPath' Lens
inlineResponse200ResolvConfPathL :: Lens_' InlineResponse200 (Maybe Text)
inlineResponse200ResolvConfPathL f InlineResponse200{..} = (\inlineResponse200ResolvConfPath -> InlineResponse200 { inlineResponse200ResolvConfPath, ..} ) <$> f inlineResponse200ResolvConfPath
{-# INLINE inlineResponse200ResolvConfPathL #-}

-- | 'inlineResponse200HostnamePath' Lens
inlineResponse200HostnamePathL :: Lens_' InlineResponse200 (Maybe Text)
inlineResponse200HostnamePathL f InlineResponse200{..} = (\inlineResponse200HostnamePath -> InlineResponse200 { inlineResponse200HostnamePath, ..} ) <$> f inlineResponse200HostnamePath
{-# INLINE inlineResponse200HostnamePathL #-}

-- | 'inlineResponse200HostsPath' Lens
inlineResponse200HostsPathL :: Lens_' InlineResponse200 (Maybe Text)
inlineResponse200HostsPathL f InlineResponse200{..} = (\inlineResponse200HostsPath -> InlineResponse200 { inlineResponse200HostsPath, ..} ) <$> f inlineResponse200HostsPath
{-# INLINE inlineResponse200HostsPathL #-}

-- | 'inlineResponse200LogPath' Lens
inlineResponse200LogPathL :: Lens_' InlineResponse200 (Maybe Text)
inlineResponse200LogPathL f InlineResponse200{..} = (\inlineResponse200LogPath -> InlineResponse200 { inlineResponse200LogPath, ..} ) <$> f inlineResponse200LogPath
{-# INLINE inlineResponse200LogPathL #-}

-- | 'inlineResponse200Node' Lens
inlineResponse200NodeL :: Lens_' InlineResponse200 (Maybe A.Value)
inlineResponse200NodeL f InlineResponse200{..} = (\inlineResponse200Node -> InlineResponse200 { inlineResponse200Node, ..} ) <$> f inlineResponse200Node
{-# INLINE inlineResponse200NodeL #-}

-- | 'inlineResponse200Name' Lens
inlineResponse200NameL :: Lens_' InlineResponse200 (Maybe Text)
inlineResponse200NameL f InlineResponse200{..} = (\inlineResponse200Name -> InlineResponse200 { inlineResponse200Name, ..} ) <$> f inlineResponse200Name
{-# INLINE inlineResponse200NameL #-}

-- | 'inlineResponse200RestartCount' Lens
inlineResponse200RestartCountL :: Lens_' InlineResponse200 (Maybe Int)
inlineResponse200RestartCountL f InlineResponse200{..} = (\inlineResponse200RestartCount -> InlineResponse200 { inlineResponse200RestartCount, ..} ) <$> f inlineResponse200RestartCount
{-# INLINE inlineResponse200RestartCountL #-}

-- | 'inlineResponse200Driver' Lens
inlineResponse200DriverL :: Lens_' InlineResponse200 (Maybe Text)
inlineResponse200DriverL f InlineResponse200{..} = (\inlineResponse200Driver -> InlineResponse200 { inlineResponse200Driver, ..} ) <$> f inlineResponse200Driver
{-# INLINE inlineResponse200DriverL #-}

-- | 'inlineResponse200MountLabel' Lens
inlineResponse200MountLabelL :: Lens_' InlineResponse200 (Maybe Text)
inlineResponse200MountLabelL f InlineResponse200{..} = (\inlineResponse200MountLabel -> InlineResponse200 { inlineResponse200MountLabel, ..} ) <$> f inlineResponse200MountLabel
{-# INLINE inlineResponse200MountLabelL #-}

-- | 'inlineResponse200ProcessLabel' Lens
inlineResponse200ProcessLabelL :: Lens_' InlineResponse200 (Maybe Text)
inlineResponse200ProcessLabelL f InlineResponse200{..} = (\inlineResponse200ProcessLabel -> InlineResponse200 { inlineResponse200ProcessLabel, ..} ) <$> f inlineResponse200ProcessLabel
{-# INLINE inlineResponse200ProcessLabelL #-}

-- | 'inlineResponse200AppArmorProfile' Lens
inlineResponse200AppArmorProfileL :: Lens_' InlineResponse200 (Maybe Text)
inlineResponse200AppArmorProfileL f InlineResponse200{..} = (\inlineResponse200AppArmorProfile -> InlineResponse200 { inlineResponse200AppArmorProfile, ..} ) <$> f inlineResponse200AppArmorProfile
{-# INLINE inlineResponse200AppArmorProfileL #-}

-- | 'inlineResponse200ExecIDs' Lens
inlineResponse200ExecIDsL :: Lens_' InlineResponse200 (Maybe Text)
inlineResponse200ExecIDsL f InlineResponse200{..} = (\inlineResponse200ExecIDs -> InlineResponse200 { inlineResponse200ExecIDs, ..} ) <$> f inlineResponse200ExecIDs
{-# INLINE inlineResponse200ExecIDsL #-}

-- | 'inlineResponse200HostConfig' Lens
inlineResponse200HostConfigL :: Lens_' InlineResponse200 (Maybe HostConfig)
inlineResponse200HostConfigL f InlineResponse200{..} = (\inlineResponse200HostConfig -> InlineResponse200 { inlineResponse200HostConfig, ..} ) <$> f inlineResponse200HostConfig
{-# INLINE inlineResponse200HostConfigL #-}

-- | 'inlineResponse200GraphDriver' Lens
inlineResponse200GraphDriverL :: Lens_' InlineResponse200 (Maybe GraphDriverData)
inlineResponse200GraphDriverL f InlineResponse200{..} = (\inlineResponse200GraphDriver -> InlineResponse200 { inlineResponse200GraphDriver, ..} ) <$> f inlineResponse200GraphDriver
{-# INLINE inlineResponse200GraphDriverL #-}

-- | 'inlineResponse200SizeRw' Lens
inlineResponse200SizeRwL :: Lens_' InlineResponse200 (Maybe Integer)
inlineResponse200SizeRwL f InlineResponse200{..} = (\inlineResponse200SizeRw -> InlineResponse200 { inlineResponse200SizeRw, ..} ) <$> f inlineResponse200SizeRw
{-# INLINE inlineResponse200SizeRwL #-}

-- | 'inlineResponse200SizeRootFs' Lens
inlineResponse200SizeRootFsL :: Lens_' InlineResponse200 (Maybe Integer)
inlineResponse200SizeRootFsL f InlineResponse200{..} = (\inlineResponse200SizeRootFs -> InlineResponse200 { inlineResponse200SizeRootFs, ..} ) <$> f inlineResponse200SizeRootFs
{-# INLINE inlineResponse200SizeRootFsL #-}

-- | 'inlineResponse200Mounts' Lens
inlineResponse200MountsL :: Lens_' InlineResponse200 (Maybe [MountPoint])
inlineResponse200MountsL f InlineResponse200{..} = (\inlineResponse200Mounts -> InlineResponse200 { inlineResponse200Mounts, ..} ) <$> f inlineResponse200Mounts
{-# INLINE inlineResponse200MountsL #-}

-- | 'inlineResponse200Config' Lens
inlineResponse200ConfigL :: Lens_' InlineResponse200 (Maybe ContainerConfig)
inlineResponse200ConfigL f InlineResponse200{..} = (\inlineResponse200Config -> InlineResponse200 { inlineResponse200Config, ..} ) <$> f inlineResponse200Config
{-# INLINE inlineResponse200ConfigL #-}

-- | 'inlineResponse200NetworkSettings' Lens
inlineResponse200NetworkSettingsL :: Lens_' InlineResponse200 (Maybe NetworkConfig)
inlineResponse200NetworkSettingsL f InlineResponse200{..} = (\inlineResponse200NetworkSettings -> InlineResponse200 { inlineResponse200NetworkSettings, ..} ) <$> f inlineResponse200NetworkSettings
{-# INLINE inlineResponse200NetworkSettingsL #-}



-- * InlineResponse2001

-- | 'inlineResponse2001Titles' Lens
inlineResponse2001TitlesL :: Lens_' InlineResponse2001 (Maybe [Text])
inlineResponse2001TitlesL f InlineResponse2001{..} = (\inlineResponse2001Titles -> InlineResponse2001 { inlineResponse2001Titles, ..} ) <$> f inlineResponse2001Titles
{-# INLINE inlineResponse2001TitlesL #-}

-- | 'inlineResponse2001Processes' Lens
inlineResponse2001ProcessesL :: Lens_' InlineResponse2001 (Maybe [[Text]])
inlineResponse2001ProcessesL f InlineResponse2001{..} = (\inlineResponse2001Processes -> InlineResponse2001 { inlineResponse2001Processes, ..} ) <$> f inlineResponse2001Processes
{-# INLINE inlineResponse2001ProcessesL #-}



-- * InlineResponse20010

-- | 'inlineResponse20010Architecture' Lens
inlineResponse20010ArchitectureL :: Lens_' InlineResponse20010 (Maybe Text)
inlineResponse20010ArchitectureL f InlineResponse20010{..} = (\inlineResponse20010Architecture -> InlineResponse20010 { inlineResponse20010Architecture, ..} ) <$> f inlineResponse20010Architecture
{-# INLINE inlineResponse20010ArchitectureL #-}

-- | 'inlineResponse20010Containers' Lens
inlineResponse20010ContainersL :: Lens_' InlineResponse20010 (Maybe Int)
inlineResponse20010ContainersL f InlineResponse20010{..} = (\inlineResponse20010Containers -> InlineResponse20010 { inlineResponse20010Containers, ..} ) <$> f inlineResponse20010Containers
{-# INLINE inlineResponse20010ContainersL #-}

-- | 'inlineResponse20010ContainersRunning' Lens
inlineResponse20010ContainersRunningL :: Lens_' InlineResponse20010 (Maybe Int)
inlineResponse20010ContainersRunningL f InlineResponse20010{..} = (\inlineResponse20010ContainersRunning -> InlineResponse20010 { inlineResponse20010ContainersRunning, ..} ) <$> f inlineResponse20010ContainersRunning
{-# INLINE inlineResponse20010ContainersRunningL #-}

-- | 'inlineResponse20010ContainersStopped' Lens
inlineResponse20010ContainersStoppedL :: Lens_' InlineResponse20010 (Maybe Int)
inlineResponse20010ContainersStoppedL f InlineResponse20010{..} = (\inlineResponse20010ContainersStopped -> InlineResponse20010 { inlineResponse20010ContainersStopped, ..} ) <$> f inlineResponse20010ContainersStopped
{-# INLINE inlineResponse20010ContainersStoppedL #-}

-- | 'inlineResponse20010ContainersPaused' Lens
inlineResponse20010ContainersPausedL :: Lens_' InlineResponse20010 (Maybe Int)
inlineResponse20010ContainersPausedL f InlineResponse20010{..} = (\inlineResponse20010ContainersPaused -> InlineResponse20010 { inlineResponse20010ContainersPaused, ..} ) <$> f inlineResponse20010ContainersPaused
{-# INLINE inlineResponse20010ContainersPausedL #-}

-- | 'inlineResponse20010CpuCfsPeriod' Lens
inlineResponse20010CpuCfsPeriodL :: Lens_' InlineResponse20010 (Maybe Bool)
inlineResponse20010CpuCfsPeriodL f InlineResponse20010{..} = (\inlineResponse20010CpuCfsPeriod -> InlineResponse20010 { inlineResponse20010CpuCfsPeriod, ..} ) <$> f inlineResponse20010CpuCfsPeriod
{-# INLINE inlineResponse20010CpuCfsPeriodL #-}

-- | 'inlineResponse20010CpuCfsQuota' Lens
inlineResponse20010CpuCfsQuotaL :: Lens_' InlineResponse20010 (Maybe Bool)
inlineResponse20010CpuCfsQuotaL f InlineResponse20010{..} = (\inlineResponse20010CpuCfsQuota -> InlineResponse20010 { inlineResponse20010CpuCfsQuota, ..} ) <$> f inlineResponse20010CpuCfsQuota
{-# INLINE inlineResponse20010CpuCfsQuotaL #-}

-- | 'inlineResponse20010Debug' Lens
inlineResponse20010DebugL :: Lens_' InlineResponse20010 (Maybe Bool)
inlineResponse20010DebugL f InlineResponse20010{..} = (\inlineResponse20010Debug -> InlineResponse20010 { inlineResponse20010Debug, ..} ) <$> f inlineResponse20010Debug
{-# INLINE inlineResponse20010DebugL #-}

-- | 'inlineResponse20010DiscoveryBackend' Lens
inlineResponse20010DiscoveryBackendL :: Lens_' InlineResponse20010 (Maybe Text)
inlineResponse20010DiscoveryBackendL f InlineResponse20010{..} = (\inlineResponse20010DiscoveryBackend -> InlineResponse20010 { inlineResponse20010DiscoveryBackend, ..} ) <$> f inlineResponse20010DiscoveryBackend
{-# INLINE inlineResponse20010DiscoveryBackendL #-}

-- | 'inlineResponse20010DockerRootDir' Lens
inlineResponse20010DockerRootDirL :: Lens_' InlineResponse20010 (Maybe Text)
inlineResponse20010DockerRootDirL f InlineResponse20010{..} = (\inlineResponse20010DockerRootDir -> InlineResponse20010 { inlineResponse20010DockerRootDir, ..} ) <$> f inlineResponse20010DockerRootDir
{-# INLINE inlineResponse20010DockerRootDirL #-}

-- | 'inlineResponse20010Driver' Lens
inlineResponse20010DriverL :: Lens_' InlineResponse20010 (Maybe Text)
inlineResponse20010DriverL f InlineResponse20010{..} = (\inlineResponse20010Driver -> InlineResponse20010 { inlineResponse20010Driver, ..} ) <$> f inlineResponse20010Driver
{-# INLINE inlineResponse20010DriverL #-}

-- | 'inlineResponse20010DriverStatus' Lens
inlineResponse20010DriverStatusL :: Lens_' InlineResponse20010 (Maybe [[Text]])
inlineResponse20010DriverStatusL f InlineResponse20010{..} = (\inlineResponse20010DriverStatus -> InlineResponse20010 { inlineResponse20010DriverStatus, ..} ) <$> f inlineResponse20010DriverStatus
{-# INLINE inlineResponse20010DriverStatusL #-}

-- | 'inlineResponse20010SystemStatus' Lens
inlineResponse20010SystemStatusL :: Lens_' InlineResponse20010 (Maybe [[Text]])
inlineResponse20010SystemStatusL f InlineResponse20010{..} = (\inlineResponse20010SystemStatus -> InlineResponse20010 { inlineResponse20010SystemStatus, ..} ) <$> f inlineResponse20010SystemStatus
{-# INLINE inlineResponse20010SystemStatusL #-}

-- | 'inlineResponse20010Plugins' Lens
inlineResponse20010PluginsL :: Lens_' InlineResponse20010 (Maybe InlineResponse20010Plugins)
inlineResponse20010PluginsL f InlineResponse20010{..} = (\inlineResponse20010Plugins -> InlineResponse20010 { inlineResponse20010Plugins, ..} ) <$> f inlineResponse20010Plugins
{-# INLINE inlineResponse20010PluginsL #-}

-- | 'inlineResponse20010ExperimentalBuild' Lens
inlineResponse20010ExperimentalBuildL :: Lens_' InlineResponse20010 (Maybe Bool)
inlineResponse20010ExperimentalBuildL f InlineResponse20010{..} = (\inlineResponse20010ExperimentalBuild -> InlineResponse20010 { inlineResponse20010ExperimentalBuild, ..} ) <$> f inlineResponse20010ExperimentalBuild
{-# INLINE inlineResponse20010ExperimentalBuildL #-}

-- | 'inlineResponse20010HttpProxy' Lens
inlineResponse20010HttpProxyL :: Lens_' InlineResponse20010 (Maybe Text)
inlineResponse20010HttpProxyL f InlineResponse20010{..} = (\inlineResponse20010HttpProxy -> InlineResponse20010 { inlineResponse20010HttpProxy, ..} ) <$> f inlineResponse20010HttpProxy
{-# INLINE inlineResponse20010HttpProxyL #-}

-- | 'inlineResponse20010HttpsProxy' Lens
inlineResponse20010HttpsProxyL :: Lens_' InlineResponse20010 (Maybe Text)
inlineResponse20010HttpsProxyL f InlineResponse20010{..} = (\inlineResponse20010HttpsProxy -> InlineResponse20010 { inlineResponse20010HttpsProxy, ..} ) <$> f inlineResponse20010HttpsProxy
{-# INLINE inlineResponse20010HttpsProxyL #-}

-- | 'inlineResponse20010Id' Lens
inlineResponse20010IdL :: Lens_' InlineResponse20010 (Maybe Text)
inlineResponse20010IdL f InlineResponse20010{..} = (\inlineResponse20010Id -> InlineResponse20010 { inlineResponse20010Id, ..} ) <$> f inlineResponse20010Id
{-# INLINE inlineResponse20010IdL #-}

-- | 'inlineResponse20010IPv4Forwarding' Lens
inlineResponse20010IPv4ForwardingL :: Lens_' InlineResponse20010 (Maybe Bool)
inlineResponse20010IPv4ForwardingL f InlineResponse20010{..} = (\inlineResponse20010IPv4Forwarding -> InlineResponse20010 { inlineResponse20010IPv4Forwarding, ..} ) <$> f inlineResponse20010IPv4Forwarding
{-# INLINE inlineResponse20010IPv4ForwardingL #-}

-- | 'inlineResponse20010Images' Lens
inlineResponse20010ImagesL :: Lens_' InlineResponse20010 (Maybe Int)
inlineResponse20010ImagesL f InlineResponse20010{..} = (\inlineResponse20010Images -> InlineResponse20010 { inlineResponse20010Images, ..} ) <$> f inlineResponse20010Images
{-# INLINE inlineResponse20010ImagesL #-}

-- | 'inlineResponse20010IndexServerAddress' Lens
inlineResponse20010IndexServerAddressL :: Lens_' InlineResponse20010 (Maybe Text)
inlineResponse20010IndexServerAddressL f InlineResponse20010{..} = (\inlineResponse20010IndexServerAddress -> InlineResponse20010 { inlineResponse20010IndexServerAddress, ..} ) <$> f inlineResponse20010IndexServerAddress
{-# INLINE inlineResponse20010IndexServerAddressL #-}

-- | 'inlineResponse20010InitPath' Lens
inlineResponse20010InitPathL :: Lens_' InlineResponse20010 (Maybe Text)
inlineResponse20010InitPathL f InlineResponse20010{..} = (\inlineResponse20010InitPath -> InlineResponse20010 { inlineResponse20010InitPath, ..} ) <$> f inlineResponse20010InitPath
{-# INLINE inlineResponse20010InitPathL #-}

-- | 'inlineResponse20010InitSha1' Lens
inlineResponse20010InitSha1L :: Lens_' InlineResponse20010 (Maybe Text)
inlineResponse20010InitSha1L f InlineResponse20010{..} = (\inlineResponse20010InitSha1 -> InlineResponse20010 { inlineResponse20010InitSha1, ..} ) <$> f inlineResponse20010InitSha1
{-# INLINE inlineResponse20010InitSha1L #-}

-- | 'inlineResponse20010KernelVersion' Lens
inlineResponse20010KernelVersionL :: Lens_' InlineResponse20010 (Maybe Text)
inlineResponse20010KernelVersionL f InlineResponse20010{..} = (\inlineResponse20010KernelVersion -> InlineResponse20010 { inlineResponse20010KernelVersion, ..} ) <$> f inlineResponse20010KernelVersion
{-# INLINE inlineResponse20010KernelVersionL #-}

-- | 'inlineResponse20010Labels' Lens
inlineResponse20010LabelsL :: Lens_' InlineResponse20010 (Maybe [Text])
inlineResponse20010LabelsL f InlineResponse20010{..} = (\inlineResponse20010Labels -> InlineResponse20010 { inlineResponse20010Labels, ..} ) <$> f inlineResponse20010Labels
{-# INLINE inlineResponse20010LabelsL #-}

-- | 'inlineResponse20010MemTotal' Lens
inlineResponse20010MemTotalL :: Lens_' InlineResponse20010 (Maybe Int)
inlineResponse20010MemTotalL f InlineResponse20010{..} = (\inlineResponse20010MemTotal -> InlineResponse20010 { inlineResponse20010MemTotal, ..} ) <$> f inlineResponse20010MemTotal
{-# INLINE inlineResponse20010MemTotalL #-}

-- | 'inlineResponse20010MemoryLimit' Lens
inlineResponse20010MemoryLimitL :: Lens_' InlineResponse20010 (Maybe Bool)
inlineResponse20010MemoryLimitL f InlineResponse20010{..} = (\inlineResponse20010MemoryLimit -> InlineResponse20010 { inlineResponse20010MemoryLimit, ..} ) <$> f inlineResponse20010MemoryLimit
{-# INLINE inlineResponse20010MemoryLimitL #-}

-- | 'inlineResponse20010Ncpu' Lens
inlineResponse20010NcpuL :: Lens_' InlineResponse20010 (Maybe Int)
inlineResponse20010NcpuL f InlineResponse20010{..} = (\inlineResponse20010Ncpu -> InlineResponse20010 { inlineResponse20010Ncpu, ..} ) <$> f inlineResponse20010Ncpu
{-# INLINE inlineResponse20010NcpuL #-}

-- | 'inlineResponse20010NEventsListener' Lens
inlineResponse20010NEventsListenerL :: Lens_' InlineResponse20010 (Maybe Int)
inlineResponse20010NEventsListenerL f InlineResponse20010{..} = (\inlineResponse20010NEventsListener -> InlineResponse20010 { inlineResponse20010NEventsListener, ..} ) <$> f inlineResponse20010NEventsListener
{-# INLINE inlineResponse20010NEventsListenerL #-}

-- | 'inlineResponse20010NFd' Lens
inlineResponse20010NFdL :: Lens_' InlineResponse20010 (Maybe Int)
inlineResponse20010NFdL f InlineResponse20010{..} = (\inlineResponse20010NFd -> InlineResponse20010 { inlineResponse20010NFd, ..} ) <$> f inlineResponse20010NFd
{-# INLINE inlineResponse20010NFdL #-}

-- | 'inlineResponse20010NGoroutines' Lens
inlineResponse20010NGoroutinesL :: Lens_' InlineResponse20010 (Maybe Int)
inlineResponse20010NGoroutinesL f InlineResponse20010{..} = (\inlineResponse20010NGoroutines -> InlineResponse20010 { inlineResponse20010NGoroutines, ..} ) <$> f inlineResponse20010NGoroutines
{-# INLINE inlineResponse20010NGoroutinesL #-}

-- | 'inlineResponse20010Name' Lens
inlineResponse20010NameL :: Lens_' InlineResponse20010 (Maybe Text)
inlineResponse20010NameL f InlineResponse20010{..} = (\inlineResponse20010Name -> InlineResponse20010 { inlineResponse20010Name, ..} ) <$> f inlineResponse20010Name
{-# INLINE inlineResponse20010NameL #-}

-- | 'inlineResponse20010NoProxy' Lens
inlineResponse20010NoProxyL :: Lens_' InlineResponse20010 (Maybe Text)
inlineResponse20010NoProxyL f InlineResponse20010{..} = (\inlineResponse20010NoProxy -> InlineResponse20010 { inlineResponse20010NoProxy, ..} ) <$> f inlineResponse20010NoProxy
{-# INLINE inlineResponse20010NoProxyL #-}

-- | 'inlineResponse20010OomKillDisable' Lens
inlineResponse20010OomKillDisableL :: Lens_' InlineResponse20010 (Maybe Bool)
inlineResponse20010OomKillDisableL f InlineResponse20010{..} = (\inlineResponse20010OomKillDisable -> InlineResponse20010 { inlineResponse20010OomKillDisable, ..} ) <$> f inlineResponse20010OomKillDisable
{-# INLINE inlineResponse20010OomKillDisableL #-}

-- | 'inlineResponse20010OsType' Lens
inlineResponse20010OsTypeL :: Lens_' InlineResponse20010 (Maybe Text)
inlineResponse20010OsTypeL f InlineResponse20010{..} = (\inlineResponse20010OsType -> InlineResponse20010 { inlineResponse20010OsType, ..} ) <$> f inlineResponse20010OsType
{-# INLINE inlineResponse20010OsTypeL #-}

-- | 'inlineResponse20010OomScoreAdj' Lens
inlineResponse20010OomScoreAdjL :: Lens_' InlineResponse20010 (Maybe Int)
inlineResponse20010OomScoreAdjL f InlineResponse20010{..} = (\inlineResponse20010OomScoreAdj -> InlineResponse20010 { inlineResponse20010OomScoreAdj, ..} ) <$> f inlineResponse20010OomScoreAdj
{-# INLINE inlineResponse20010OomScoreAdjL #-}

-- | 'inlineResponse20010OperatingSystem' Lens
inlineResponse20010OperatingSystemL :: Lens_' InlineResponse20010 (Maybe Text)
inlineResponse20010OperatingSystemL f InlineResponse20010{..} = (\inlineResponse20010OperatingSystem -> InlineResponse20010 { inlineResponse20010OperatingSystem, ..} ) <$> f inlineResponse20010OperatingSystem
{-# INLINE inlineResponse20010OperatingSystemL #-}

-- | 'inlineResponse20010RegistryConfig' Lens
inlineResponse20010RegistryConfigL :: Lens_' InlineResponse20010 (Maybe InlineResponse20010RegistryConfig)
inlineResponse20010RegistryConfigL f InlineResponse20010{..} = (\inlineResponse20010RegistryConfig -> InlineResponse20010 { inlineResponse20010RegistryConfig, ..} ) <$> f inlineResponse20010RegistryConfig
{-# INLINE inlineResponse20010RegistryConfigL #-}

-- | 'inlineResponse20010SwapLimit' Lens
inlineResponse20010SwapLimitL :: Lens_' InlineResponse20010 (Maybe Bool)
inlineResponse20010SwapLimitL f InlineResponse20010{..} = (\inlineResponse20010SwapLimit -> InlineResponse20010 { inlineResponse20010SwapLimit, ..} ) <$> f inlineResponse20010SwapLimit
{-# INLINE inlineResponse20010SwapLimitL #-}

-- | 'inlineResponse20010SystemTime' Lens
inlineResponse20010SystemTimeL :: Lens_' InlineResponse20010 (Maybe Text)
inlineResponse20010SystemTimeL f InlineResponse20010{..} = (\inlineResponse20010SystemTime -> InlineResponse20010 { inlineResponse20010SystemTime, ..} ) <$> f inlineResponse20010SystemTime
{-# INLINE inlineResponse20010SystemTimeL #-}

-- | 'inlineResponse20010ServerVersion' Lens
inlineResponse20010ServerVersionL :: Lens_' InlineResponse20010 (Maybe Text)
inlineResponse20010ServerVersionL f InlineResponse20010{..} = (\inlineResponse20010ServerVersion -> InlineResponse20010 { inlineResponse20010ServerVersion, ..} ) <$> f inlineResponse20010ServerVersion
{-# INLINE inlineResponse20010ServerVersionL #-}



-- * InlineResponse20010Plugins

-- | 'inlineResponse20010PluginsVolume' Lens
inlineResponse20010PluginsVolumeL :: Lens_' InlineResponse20010Plugins (Maybe [Text])
inlineResponse20010PluginsVolumeL f InlineResponse20010Plugins{..} = (\inlineResponse20010PluginsVolume -> InlineResponse20010Plugins { inlineResponse20010PluginsVolume, ..} ) <$> f inlineResponse20010PluginsVolume
{-# INLINE inlineResponse20010PluginsVolumeL #-}

-- | 'inlineResponse20010PluginsNetwork' Lens
inlineResponse20010PluginsNetworkL :: Lens_' InlineResponse20010Plugins (Maybe [Text])
inlineResponse20010PluginsNetworkL f InlineResponse20010Plugins{..} = (\inlineResponse20010PluginsNetwork -> InlineResponse20010Plugins { inlineResponse20010PluginsNetwork, ..} ) <$> f inlineResponse20010PluginsNetwork
{-# INLINE inlineResponse20010PluginsNetworkL #-}

-- | 'inlineResponse20010PluginsLog' Lens
inlineResponse20010PluginsLogL :: Lens_' InlineResponse20010Plugins (Maybe [Text])
inlineResponse20010PluginsLogL f InlineResponse20010Plugins{..} = (\inlineResponse20010PluginsLog -> InlineResponse20010Plugins { inlineResponse20010PluginsLog, ..} ) <$> f inlineResponse20010PluginsLog
{-# INLINE inlineResponse20010PluginsLogL #-}



-- * InlineResponse20010RegistryConfig

-- | 'inlineResponse20010RegistryConfigIndexConfigs' Lens
inlineResponse20010RegistryConfigIndexConfigsL :: Lens_' InlineResponse20010RegistryConfig (Maybe (Map.Map String InlineResponse20010RegistryConfigIndexConfigs))
inlineResponse20010RegistryConfigIndexConfigsL f InlineResponse20010RegistryConfig{..} = (\inlineResponse20010RegistryConfigIndexConfigs -> InlineResponse20010RegistryConfig { inlineResponse20010RegistryConfigIndexConfigs, ..} ) <$> f inlineResponse20010RegistryConfigIndexConfigs
{-# INLINE inlineResponse20010RegistryConfigIndexConfigsL #-}

-- | 'inlineResponse20010RegistryConfigInsecureRegistryCidRs' Lens
inlineResponse20010RegistryConfigInsecureRegistryCidRsL :: Lens_' InlineResponse20010RegistryConfig (Maybe [Text])
inlineResponse20010RegistryConfigInsecureRegistryCidRsL f InlineResponse20010RegistryConfig{..} = (\inlineResponse20010RegistryConfigInsecureRegistryCidRs -> InlineResponse20010RegistryConfig { inlineResponse20010RegistryConfigInsecureRegistryCidRs, ..} ) <$> f inlineResponse20010RegistryConfigInsecureRegistryCidRs
{-# INLINE inlineResponse20010RegistryConfigInsecureRegistryCidRsL #-}



-- * InlineResponse20010RegistryConfigIndexConfigs

-- | 'inlineResponse20010RegistryConfigIndexConfigsMirrors' Lens
inlineResponse20010RegistryConfigIndexConfigsMirrorsL :: Lens_' InlineResponse20010RegistryConfigIndexConfigs (Maybe [Text])
inlineResponse20010RegistryConfigIndexConfigsMirrorsL f InlineResponse20010RegistryConfigIndexConfigs{..} = (\inlineResponse20010RegistryConfigIndexConfigsMirrors -> InlineResponse20010RegistryConfigIndexConfigs { inlineResponse20010RegistryConfigIndexConfigsMirrors, ..} ) <$> f inlineResponse20010RegistryConfigIndexConfigsMirrors
{-# INLINE inlineResponse20010RegistryConfigIndexConfigsMirrorsL #-}

-- | 'inlineResponse20010RegistryConfigIndexConfigsName' Lens
inlineResponse20010RegistryConfigIndexConfigsNameL :: Lens_' InlineResponse20010RegistryConfigIndexConfigs (Maybe Text)
inlineResponse20010RegistryConfigIndexConfigsNameL f InlineResponse20010RegistryConfigIndexConfigs{..} = (\inlineResponse20010RegistryConfigIndexConfigsName -> InlineResponse20010RegistryConfigIndexConfigs { inlineResponse20010RegistryConfigIndexConfigsName, ..} ) <$> f inlineResponse20010RegistryConfigIndexConfigsName
{-# INLINE inlineResponse20010RegistryConfigIndexConfigsNameL #-}

-- | 'inlineResponse20010RegistryConfigIndexConfigsOfficial' Lens
inlineResponse20010RegistryConfigIndexConfigsOfficialL :: Lens_' InlineResponse20010RegistryConfigIndexConfigs (Maybe Bool)
inlineResponse20010RegistryConfigIndexConfigsOfficialL f InlineResponse20010RegistryConfigIndexConfigs{..} = (\inlineResponse20010RegistryConfigIndexConfigsOfficial -> InlineResponse20010RegistryConfigIndexConfigs { inlineResponse20010RegistryConfigIndexConfigsOfficial, ..} ) <$> f inlineResponse20010RegistryConfigIndexConfigsOfficial
{-# INLINE inlineResponse20010RegistryConfigIndexConfigsOfficialL #-}

-- | 'inlineResponse20010RegistryConfigIndexConfigsSecure' Lens
inlineResponse20010RegistryConfigIndexConfigsSecureL :: Lens_' InlineResponse20010RegistryConfigIndexConfigs (Maybe Bool)
inlineResponse20010RegistryConfigIndexConfigsSecureL f InlineResponse20010RegistryConfigIndexConfigs{..} = (\inlineResponse20010RegistryConfigIndexConfigsSecure -> InlineResponse20010RegistryConfigIndexConfigs { inlineResponse20010RegistryConfigIndexConfigsSecure, ..} ) <$> f inlineResponse20010RegistryConfigIndexConfigsSecure
{-# INLINE inlineResponse20010RegistryConfigIndexConfigsSecureL #-}



-- * InlineResponse20011

-- | 'inlineResponse20011Version' Lens
inlineResponse20011VersionL :: Lens_' InlineResponse20011 (Maybe Text)
inlineResponse20011VersionL f InlineResponse20011{..} = (\inlineResponse20011Version -> InlineResponse20011 { inlineResponse20011Version, ..} ) <$> f inlineResponse20011Version
{-# INLINE inlineResponse20011VersionL #-}

-- | 'inlineResponse20011ApiVersion' Lens
inlineResponse20011ApiVersionL :: Lens_' InlineResponse20011 (Maybe Text)
inlineResponse20011ApiVersionL f InlineResponse20011{..} = (\inlineResponse20011ApiVersion -> InlineResponse20011 { inlineResponse20011ApiVersion, ..} ) <$> f inlineResponse20011ApiVersion
{-# INLINE inlineResponse20011ApiVersionL #-}

-- | 'inlineResponse20011MinApiVersion' Lens
inlineResponse20011MinApiVersionL :: Lens_' InlineResponse20011 (Maybe Text)
inlineResponse20011MinApiVersionL f InlineResponse20011{..} = (\inlineResponse20011MinApiVersion -> InlineResponse20011 { inlineResponse20011MinApiVersion, ..} ) <$> f inlineResponse20011MinApiVersion
{-# INLINE inlineResponse20011MinApiVersionL #-}

-- | 'inlineResponse20011GitCommit' Lens
inlineResponse20011GitCommitL :: Lens_' InlineResponse20011 (Maybe Text)
inlineResponse20011GitCommitL f InlineResponse20011{..} = (\inlineResponse20011GitCommit -> InlineResponse20011 { inlineResponse20011GitCommit, ..} ) <$> f inlineResponse20011GitCommit
{-# INLINE inlineResponse20011GitCommitL #-}

-- | 'inlineResponse20011GoVersion' Lens
inlineResponse20011GoVersionL :: Lens_' InlineResponse20011 (Maybe Text)
inlineResponse20011GoVersionL f InlineResponse20011{..} = (\inlineResponse20011GoVersion -> InlineResponse20011 { inlineResponse20011GoVersion, ..} ) <$> f inlineResponse20011GoVersion
{-# INLINE inlineResponse20011GoVersionL #-}

-- | 'inlineResponse20011Os' Lens
inlineResponse20011OsL :: Lens_' InlineResponse20011 (Maybe Text)
inlineResponse20011OsL f InlineResponse20011{..} = (\inlineResponse20011Os -> InlineResponse20011 { inlineResponse20011Os, ..} ) <$> f inlineResponse20011Os
{-# INLINE inlineResponse20011OsL #-}

-- | 'inlineResponse20011Arch' Lens
inlineResponse20011ArchL :: Lens_' InlineResponse20011 (Maybe Text)
inlineResponse20011ArchL f InlineResponse20011{..} = (\inlineResponse20011Arch -> InlineResponse20011 { inlineResponse20011Arch, ..} ) <$> f inlineResponse20011Arch
{-# INLINE inlineResponse20011ArchL #-}

-- | 'inlineResponse20011KernelVersion' Lens
inlineResponse20011KernelVersionL :: Lens_' InlineResponse20011 (Maybe Text)
inlineResponse20011KernelVersionL f InlineResponse20011{..} = (\inlineResponse20011KernelVersion -> InlineResponse20011 { inlineResponse20011KernelVersion, ..} ) <$> f inlineResponse20011KernelVersion
{-# INLINE inlineResponse20011KernelVersionL #-}

-- | 'inlineResponse20011Experimental' Lens
inlineResponse20011ExperimentalL :: Lens_' InlineResponse20011 (Maybe Bool)
inlineResponse20011ExperimentalL f InlineResponse20011{..} = (\inlineResponse20011Experimental -> InlineResponse20011 { inlineResponse20011Experimental, ..} ) <$> f inlineResponse20011Experimental
{-# INLINE inlineResponse20011ExperimentalL #-}

-- | 'inlineResponse20011BuildTime' Lens
inlineResponse20011BuildTimeL :: Lens_' InlineResponse20011 (Maybe Text)
inlineResponse20011BuildTimeL f InlineResponse20011{..} = (\inlineResponse20011BuildTime -> InlineResponse20011 { inlineResponse20011BuildTime, ..} ) <$> f inlineResponse20011BuildTime
{-# INLINE inlineResponse20011BuildTimeL #-}



-- * InlineResponse20012

-- | 'inlineResponse20012Type' Lens
inlineResponse20012TypeL :: Lens_' InlineResponse20012 (Maybe Text)
inlineResponse20012TypeL f InlineResponse20012{..} = (\inlineResponse20012Type -> InlineResponse20012 { inlineResponse20012Type, ..} ) <$> f inlineResponse20012Type
{-# INLINE inlineResponse20012TypeL #-}

-- | 'inlineResponse20012Action' Lens
inlineResponse20012ActionL :: Lens_' InlineResponse20012 (Maybe Text)
inlineResponse20012ActionL f InlineResponse20012{..} = (\inlineResponse20012Action -> InlineResponse20012 { inlineResponse20012Action, ..} ) <$> f inlineResponse20012Action
{-# INLINE inlineResponse20012ActionL #-}

-- | 'inlineResponse20012Actor' Lens
inlineResponse20012ActorL :: Lens_' InlineResponse20012 (Maybe InlineResponse20012Actor)
inlineResponse20012ActorL f InlineResponse20012{..} = (\inlineResponse20012Actor -> InlineResponse20012 { inlineResponse20012Actor, ..} ) <$> f inlineResponse20012Actor
{-# INLINE inlineResponse20012ActorL #-}

-- | 'inlineResponse20012Time' Lens
inlineResponse20012TimeL :: Lens_' InlineResponse20012 (Maybe Int)
inlineResponse20012TimeL f InlineResponse20012{..} = (\inlineResponse20012Time -> InlineResponse20012 { inlineResponse20012Time, ..} ) <$> f inlineResponse20012Time
{-# INLINE inlineResponse20012TimeL #-}

-- | 'inlineResponse20012TimeNano' Lens
inlineResponse20012TimeNanoL :: Lens_' InlineResponse20012 (Maybe Integer)
inlineResponse20012TimeNanoL f InlineResponse20012{..} = (\inlineResponse20012TimeNano -> InlineResponse20012 { inlineResponse20012TimeNano, ..} ) <$> f inlineResponse20012TimeNano
{-# INLINE inlineResponse20012TimeNanoL #-}



-- * InlineResponse20012Actor

-- | 'inlineResponse20012ActorId' Lens
inlineResponse20012ActorIdL :: Lens_' InlineResponse20012Actor (Maybe Text)
inlineResponse20012ActorIdL f InlineResponse20012Actor{..} = (\inlineResponse20012ActorId -> InlineResponse20012Actor { inlineResponse20012ActorId, ..} ) <$> f inlineResponse20012ActorId
{-# INLINE inlineResponse20012ActorIdL #-}

-- | 'inlineResponse20012ActorAttributes' Lens
inlineResponse20012ActorAttributesL :: Lens_' InlineResponse20012Actor (Maybe (Map.Map String Text))
inlineResponse20012ActorAttributesL f InlineResponse20012Actor{..} = (\inlineResponse20012ActorAttributes -> InlineResponse20012Actor { inlineResponse20012ActorAttributes, ..} ) <$> f inlineResponse20012ActorAttributes
{-# INLINE inlineResponse20012ActorAttributesL #-}



-- * InlineResponse20013

-- | 'inlineResponse20013LayersSize' Lens
inlineResponse20013LayersSizeL :: Lens_' InlineResponse20013 (Maybe Integer)
inlineResponse20013LayersSizeL f InlineResponse20013{..} = (\inlineResponse20013LayersSize -> InlineResponse20013 { inlineResponse20013LayersSize, ..} ) <$> f inlineResponse20013LayersSize
{-# INLINE inlineResponse20013LayersSizeL #-}

-- | 'inlineResponse20013Images' Lens
inlineResponse20013ImagesL :: Lens_' InlineResponse20013 (Maybe [ImageSummary])
inlineResponse20013ImagesL f InlineResponse20013{..} = (\inlineResponse20013Images -> InlineResponse20013 { inlineResponse20013Images, ..} ) <$> f inlineResponse20013Images
{-# INLINE inlineResponse20013ImagesL #-}

-- | 'inlineResponse20013Containers' Lens
inlineResponse20013ContainersL :: Lens_' InlineResponse20013 (Maybe [Array])
inlineResponse20013ContainersL f InlineResponse20013{..} = (\inlineResponse20013Containers -> InlineResponse20013 { inlineResponse20013Containers, ..} ) <$> f inlineResponse20013Containers
{-# INLINE inlineResponse20013ContainersL #-}

-- | 'inlineResponse20013Volumes' Lens
inlineResponse20013VolumesL :: Lens_' InlineResponse20013 (Maybe [Volume])
inlineResponse20013VolumesL f InlineResponse20013{..} = (\inlineResponse20013Volumes -> InlineResponse20013 { inlineResponse20013Volumes, ..} ) <$> f inlineResponse20013Volumes
{-# INLINE inlineResponse20013VolumesL #-}



-- * InlineResponse20014

-- | 'inlineResponse20014Id' Lens
inlineResponse20014IdL :: Lens_' InlineResponse20014 (Maybe Text)
inlineResponse20014IdL f InlineResponse20014{..} = (\inlineResponse20014Id -> InlineResponse20014 { inlineResponse20014Id, ..} ) <$> f inlineResponse20014Id
{-# INLINE inlineResponse20014IdL #-}

-- | 'inlineResponse20014Running' Lens
inlineResponse20014RunningL :: Lens_' InlineResponse20014 (Maybe Bool)
inlineResponse20014RunningL f InlineResponse20014{..} = (\inlineResponse20014Running -> InlineResponse20014 { inlineResponse20014Running, ..} ) <$> f inlineResponse20014Running
{-# INLINE inlineResponse20014RunningL #-}

-- | 'inlineResponse20014ExitCode' Lens
inlineResponse20014ExitCodeL :: Lens_' InlineResponse20014 (Maybe Int)
inlineResponse20014ExitCodeL f InlineResponse20014{..} = (\inlineResponse20014ExitCode -> InlineResponse20014 { inlineResponse20014ExitCode, ..} ) <$> f inlineResponse20014ExitCode
{-# INLINE inlineResponse20014ExitCodeL #-}

-- | 'inlineResponse20014ProcessConfig' Lens
inlineResponse20014ProcessConfigL :: Lens_' InlineResponse20014 (Maybe ProcessConfig)
inlineResponse20014ProcessConfigL f InlineResponse20014{..} = (\inlineResponse20014ProcessConfig -> InlineResponse20014 { inlineResponse20014ProcessConfig, ..} ) <$> f inlineResponse20014ProcessConfig
{-# INLINE inlineResponse20014ProcessConfigL #-}

-- | 'inlineResponse20014OpenStdin' Lens
inlineResponse20014OpenStdinL :: Lens_' InlineResponse20014 (Maybe Bool)
inlineResponse20014OpenStdinL f InlineResponse20014{..} = (\inlineResponse20014OpenStdin -> InlineResponse20014 { inlineResponse20014OpenStdin, ..} ) <$> f inlineResponse20014OpenStdin
{-# INLINE inlineResponse20014OpenStdinL #-}

-- | 'inlineResponse20014OpenStderr' Lens
inlineResponse20014OpenStderrL :: Lens_' InlineResponse20014 (Maybe Bool)
inlineResponse20014OpenStderrL f InlineResponse20014{..} = (\inlineResponse20014OpenStderr -> InlineResponse20014 { inlineResponse20014OpenStderr, ..} ) <$> f inlineResponse20014OpenStderr
{-# INLINE inlineResponse20014OpenStderrL #-}

-- | 'inlineResponse20014OpenStdout' Lens
inlineResponse20014OpenStdoutL :: Lens_' InlineResponse20014 (Maybe Bool)
inlineResponse20014OpenStdoutL f InlineResponse20014{..} = (\inlineResponse20014OpenStdout -> InlineResponse20014 { inlineResponse20014OpenStdout, ..} ) <$> f inlineResponse20014OpenStdout
{-# INLINE inlineResponse20014OpenStdoutL #-}

-- | 'inlineResponse20014ContainerId' Lens
inlineResponse20014ContainerIdL :: Lens_' InlineResponse20014 (Maybe Text)
inlineResponse20014ContainerIdL f InlineResponse20014{..} = (\inlineResponse20014ContainerId -> InlineResponse20014 { inlineResponse20014ContainerId, ..} ) <$> f inlineResponse20014ContainerId
{-# INLINE inlineResponse20014ContainerIdL #-}

-- | 'inlineResponse20014Pid' Lens
inlineResponse20014PidL :: Lens_' InlineResponse20014 (Maybe Int)
inlineResponse20014PidL f InlineResponse20014{..} = (\inlineResponse20014Pid -> InlineResponse20014 { inlineResponse20014Pid, ..} ) <$> f inlineResponse20014Pid
{-# INLINE inlineResponse20014PidL #-}



-- * InlineResponse20015

-- | 'inlineResponse20015Volumes' Lens
inlineResponse20015VolumesL :: Lens_' InlineResponse20015 ([Volume])
inlineResponse20015VolumesL f InlineResponse20015{..} = (\inlineResponse20015Volumes -> InlineResponse20015 { inlineResponse20015Volumes, ..} ) <$> f inlineResponse20015Volumes
{-# INLINE inlineResponse20015VolumesL #-}

-- | 'inlineResponse20015Warnings' Lens
inlineResponse20015WarningsL :: Lens_' InlineResponse20015 ([Text])
inlineResponse20015WarningsL f InlineResponse20015{..} = (\inlineResponse20015Warnings -> InlineResponse20015 { inlineResponse20015Warnings, ..} ) <$> f inlineResponse20015Warnings
{-# INLINE inlineResponse20015WarningsL #-}



-- * InlineResponse20016

-- | 'inlineResponse20016VolumesDeleted' Lens
inlineResponse20016VolumesDeletedL :: Lens_' InlineResponse20016 (Maybe [Text])
inlineResponse20016VolumesDeletedL f InlineResponse20016{..} = (\inlineResponse20016VolumesDeleted -> InlineResponse20016 { inlineResponse20016VolumesDeleted, ..} ) <$> f inlineResponse20016VolumesDeleted
{-# INLINE inlineResponse20016VolumesDeletedL #-}

-- | 'inlineResponse20016SpaceReclaimed' Lens
inlineResponse20016SpaceReclaimedL :: Lens_' InlineResponse20016 (Maybe Integer)
inlineResponse20016SpaceReclaimedL f InlineResponse20016{..} = (\inlineResponse20016SpaceReclaimed -> InlineResponse20016 { inlineResponse20016SpaceReclaimed, ..} ) <$> f inlineResponse20016SpaceReclaimed
{-# INLINE inlineResponse20016SpaceReclaimedL #-}



-- * InlineResponse20017

-- | 'inlineResponse20017NetworksDeleted' Lens
inlineResponse20017NetworksDeletedL :: Lens_' InlineResponse20017 (Maybe [Text])
inlineResponse20017NetworksDeletedL f InlineResponse20017{..} = (\inlineResponse20017NetworksDeleted -> InlineResponse20017 { inlineResponse20017NetworksDeleted, ..} ) <$> f inlineResponse20017NetworksDeleted
{-# INLINE inlineResponse20017NetworksDeletedL #-}



-- * InlineResponse20018

-- | 'inlineResponse20018Name' Lens
inlineResponse20018NameL :: Lens_' InlineResponse20018 (Maybe Text)
inlineResponse20018NameL f InlineResponse20018{..} = (\inlineResponse20018Name -> InlineResponse20018 { inlineResponse20018Name, ..} ) <$> f inlineResponse20018Name
{-# INLINE inlineResponse20018NameL #-}

-- | 'inlineResponse20018Description' Lens
inlineResponse20018DescriptionL :: Lens_' InlineResponse20018 (Maybe Text)
inlineResponse20018DescriptionL f InlineResponse20018{..} = (\inlineResponse20018Description -> InlineResponse20018 { inlineResponse20018Description, ..} ) <$> f inlineResponse20018Description
{-# INLINE inlineResponse20018DescriptionL #-}

-- | 'inlineResponse20018Value' Lens
inlineResponse20018ValueL :: Lens_' InlineResponse20018 (Maybe [Text])
inlineResponse20018ValueL f InlineResponse20018{..} = (\inlineResponse20018Value -> InlineResponse20018 { inlineResponse20018Value, ..} ) <$> f inlineResponse20018Value
{-# INLINE inlineResponse20018ValueL #-}



-- * InlineResponse20019

-- | 'inlineResponse20019ClusterInfo' Lens
inlineResponse20019ClusterInfoL :: Lens_' InlineResponse20019 (Maybe ClusterInfo)
inlineResponse20019ClusterInfoL f InlineResponse20019{..} = (\inlineResponse20019ClusterInfo -> InlineResponse20019 { inlineResponse20019ClusterInfo, ..} ) <$> f inlineResponse20019ClusterInfo
{-# INLINE inlineResponse20019ClusterInfoL #-}

-- | 'inlineResponse20019JoinTokens' Lens
inlineResponse20019JoinTokensL :: Lens_' InlineResponse20019 (Maybe InlineResponse20019JoinTokens)
inlineResponse20019JoinTokensL f InlineResponse20019{..} = (\inlineResponse20019JoinTokens -> InlineResponse20019 { inlineResponse20019JoinTokens, ..} ) <$> f inlineResponse20019JoinTokens
{-# INLINE inlineResponse20019JoinTokensL #-}



-- * InlineResponse20019JoinTokens

-- | 'inlineResponse20019JoinTokensWorker' Lens
inlineResponse20019JoinTokensWorkerL :: Lens_' InlineResponse20019JoinTokens (Maybe Text)
inlineResponse20019JoinTokensWorkerL f InlineResponse20019JoinTokens{..} = (\inlineResponse20019JoinTokensWorker -> InlineResponse20019JoinTokens { inlineResponse20019JoinTokensWorker, ..} ) <$> f inlineResponse20019JoinTokensWorker
{-# INLINE inlineResponse20019JoinTokensWorkerL #-}

-- | 'inlineResponse20019JoinTokensManager' Lens
inlineResponse20019JoinTokensManagerL :: Lens_' InlineResponse20019JoinTokens (Maybe Text)
inlineResponse20019JoinTokensManagerL f InlineResponse20019JoinTokens{..} = (\inlineResponse20019JoinTokensManager -> InlineResponse20019JoinTokens { inlineResponse20019JoinTokensManager, ..} ) <$> f inlineResponse20019JoinTokensManager
{-# INLINE inlineResponse20019JoinTokensManagerL #-}



-- * InlineResponse2002

-- | 'inlineResponse2002Path' Lens
inlineResponse2002PathL :: Lens_' InlineResponse2002 (Text)
inlineResponse2002PathL f InlineResponse2002{..} = (\inlineResponse2002Path -> InlineResponse2002 { inlineResponse2002Path, ..} ) <$> f inlineResponse2002Path
{-# INLINE inlineResponse2002PathL #-}

-- | 'inlineResponse2002Kind' Lens
inlineResponse2002KindL :: Lens_' InlineResponse2002 (Int)
inlineResponse2002KindL f InlineResponse2002{..} = (\inlineResponse2002Kind -> InlineResponse2002 { inlineResponse2002Kind, ..} ) <$> f inlineResponse2002Kind
{-# INLINE inlineResponse2002KindL #-}



-- * InlineResponse20020

-- | 'inlineResponse20020UnlockKey' Lens
inlineResponse20020UnlockKeyL :: Lens_' InlineResponse20020 (Maybe Text)
inlineResponse20020UnlockKeyL f InlineResponse20020{..} = (\inlineResponse20020UnlockKey -> InlineResponse20020 { inlineResponse20020UnlockKey, ..} ) <$> f inlineResponse20020UnlockKey
{-# INLINE inlineResponse20020UnlockKeyL #-}



-- * InlineResponse20021

-- | 'inlineResponse20021Descriptor' Lens
inlineResponse20021DescriptorL :: Lens_' InlineResponse20021 (InlineResponse20021Descriptor)
inlineResponse20021DescriptorL f InlineResponse20021{..} = (\inlineResponse20021Descriptor -> InlineResponse20021 { inlineResponse20021Descriptor, ..} ) <$> f inlineResponse20021Descriptor
{-# INLINE inlineResponse20021DescriptorL #-}

-- | 'inlineResponse20021Platforms' Lens
inlineResponse20021PlatformsL :: Lens_' InlineResponse20021 ([InlineResponse20021Platforms])
inlineResponse20021PlatformsL f InlineResponse20021{..} = (\inlineResponse20021Platforms -> InlineResponse20021 { inlineResponse20021Platforms, ..} ) <$> f inlineResponse20021Platforms
{-# INLINE inlineResponse20021PlatformsL #-}



-- * InlineResponse20021Descriptor

-- | 'inlineResponse20021DescriptorMediaType' Lens
inlineResponse20021DescriptorMediaTypeL :: Lens_' InlineResponse20021Descriptor (Maybe Text)
inlineResponse20021DescriptorMediaTypeL f InlineResponse20021Descriptor{..} = (\inlineResponse20021DescriptorMediaType -> InlineResponse20021Descriptor { inlineResponse20021DescriptorMediaType, ..} ) <$> f inlineResponse20021DescriptorMediaType
{-# INLINE inlineResponse20021DescriptorMediaTypeL #-}

-- | 'inlineResponse20021DescriptorSize' Lens
inlineResponse20021DescriptorSizeL :: Lens_' InlineResponse20021Descriptor (Maybe Integer)
inlineResponse20021DescriptorSizeL f InlineResponse20021Descriptor{..} = (\inlineResponse20021DescriptorSize -> InlineResponse20021Descriptor { inlineResponse20021DescriptorSize, ..} ) <$> f inlineResponse20021DescriptorSize
{-# INLINE inlineResponse20021DescriptorSizeL #-}

-- | 'inlineResponse20021DescriptorDigest' Lens
inlineResponse20021DescriptorDigestL :: Lens_' InlineResponse20021Descriptor (Maybe Text)
inlineResponse20021DescriptorDigestL f InlineResponse20021Descriptor{..} = (\inlineResponse20021DescriptorDigest -> InlineResponse20021Descriptor { inlineResponse20021DescriptorDigest, ..} ) <$> f inlineResponse20021DescriptorDigest
{-# INLINE inlineResponse20021DescriptorDigestL #-}

-- | 'inlineResponse20021DescriptorUrLs' Lens
inlineResponse20021DescriptorUrLsL :: Lens_' InlineResponse20021Descriptor (Maybe [Text])
inlineResponse20021DescriptorUrLsL f InlineResponse20021Descriptor{..} = (\inlineResponse20021DescriptorUrLs -> InlineResponse20021Descriptor { inlineResponse20021DescriptorUrLs, ..} ) <$> f inlineResponse20021DescriptorUrLs
{-# INLINE inlineResponse20021DescriptorUrLsL #-}



-- * InlineResponse20021Platforms

-- | 'inlineResponse20021PlatformsArchitecture' Lens
inlineResponse20021PlatformsArchitectureL :: Lens_' InlineResponse20021Platforms (Maybe Text)
inlineResponse20021PlatformsArchitectureL f InlineResponse20021Platforms{..} = (\inlineResponse20021PlatformsArchitecture -> InlineResponse20021Platforms { inlineResponse20021PlatformsArchitecture, ..} ) <$> f inlineResponse20021PlatformsArchitecture
{-# INLINE inlineResponse20021PlatformsArchitectureL #-}

-- | 'inlineResponse20021PlatformsOs' Lens
inlineResponse20021PlatformsOsL :: Lens_' InlineResponse20021Platforms (Maybe Text)
inlineResponse20021PlatformsOsL f InlineResponse20021Platforms{..} = (\inlineResponse20021PlatformsOs -> InlineResponse20021Platforms { inlineResponse20021PlatformsOs, ..} ) <$> f inlineResponse20021PlatformsOs
{-# INLINE inlineResponse20021PlatformsOsL #-}

-- | 'inlineResponse20021PlatformsOsVersion' Lens
inlineResponse20021PlatformsOsVersionL :: Lens_' InlineResponse20021Platforms (Maybe Text)
inlineResponse20021PlatformsOsVersionL f InlineResponse20021Platforms{..} = (\inlineResponse20021PlatformsOsVersion -> InlineResponse20021Platforms { inlineResponse20021PlatformsOsVersion, ..} ) <$> f inlineResponse20021PlatformsOsVersion
{-# INLINE inlineResponse20021PlatformsOsVersionL #-}

-- | 'inlineResponse20021PlatformsOsFeatures' Lens
inlineResponse20021PlatformsOsFeaturesL :: Lens_' InlineResponse20021Platforms (Maybe [Text])
inlineResponse20021PlatformsOsFeaturesL f InlineResponse20021Platforms{..} = (\inlineResponse20021PlatformsOsFeatures -> InlineResponse20021Platforms { inlineResponse20021PlatformsOsFeatures, ..} ) <$> f inlineResponse20021PlatformsOsFeatures
{-# INLINE inlineResponse20021PlatformsOsFeaturesL #-}

-- | 'inlineResponse20021PlatformsVariant' Lens
inlineResponse20021PlatformsVariantL :: Lens_' InlineResponse20021Platforms (Maybe Text)
inlineResponse20021PlatformsVariantL f InlineResponse20021Platforms{..} = (\inlineResponse20021PlatformsVariant -> InlineResponse20021Platforms { inlineResponse20021PlatformsVariant, ..} ) <$> f inlineResponse20021PlatformsVariant
{-# INLINE inlineResponse20021PlatformsVariantL #-}

-- | 'inlineResponse20021PlatformsFeatures' Lens
inlineResponse20021PlatformsFeaturesL :: Lens_' InlineResponse20021Platforms (Maybe [Text])
inlineResponse20021PlatformsFeaturesL f InlineResponse20021Platforms{..} = (\inlineResponse20021PlatformsFeatures -> InlineResponse20021Platforms { inlineResponse20021PlatformsFeatures, ..} ) <$> f inlineResponse20021PlatformsFeatures
{-# INLINE inlineResponse20021PlatformsFeaturesL #-}



-- * InlineResponse2003

-- | 'inlineResponse2003Warnings' Lens
inlineResponse2003WarningsL :: Lens_' InlineResponse2003 (Maybe [Text])
inlineResponse2003WarningsL f InlineResponse2003{..} = (\inlineResponse2003Warnings -> InlineResponse2003 { inlineResponse2003Warnings, ..} ) <$> f inlineResponse2003Warnings
{-# INLINE inlineResponse2003WarningsL #-}



-- * InlineResponse2004

-- | 'inlineResponse2004StatusCode' Lens
inlineResponse2004StatusCodeL :: Lens_' InlineResponse2004 (Int)
inlineResponse2004StatusCodeL f InlineResponse2004{..} = (\inlineResponse2004StatusCode -> InlineResponse2004 { inlineResponse2004StatusCode, ..} ) <$> f inlineResponse2004StatusCode
{-# INLINE inlineResponse2004StatusCodeL #-}



-- * InlineResponse2005

-- | 'inlineResponse2005ContainersDeleted' Lens
inlineResponse2005ContainersDeletedL :: Lens_' InlineResponse2005 (Maybe [Text])
inlineResponse2005ContainersDeletedL f InlineResponse2005{..} = (\inlineResponse2005ContainersDeleted -> InlineResponse2005 { inlineResponse2005ContainersDeleted, ..} ) <$> f inlineResponse2005ContainersDeleted
{-# INLINE inlineResponse2005ContainersDeletedL #-}

-- | 'inlineResponse2005SpaceReclaimed' Lens
inlineResponse2005SpaceReclaimedL :: Lens_' InlineResponse2005 (Maybe Integer)
inlineResponse2005SpaceReclaimedL f InlineResponse2005{..} = (\inlineResponse2005SpaceReclaimed -> InlineResponse2005 { inlineResponse2005SpaceReclaimed, ..} ) <$> f inlineResponse2005SpaceReclaimed
{-# INLINE inlineResponse2005SpaceReclaimedL #-}



-- * InlineResponse2006

-- | 'inlineResponse2006Id' Lens
inlineResponse2006IdL :: Lens_' InlineResponse2006 (Text)
inlineResponse2006IdL f InlineResponse2006{..} = (\inlineResponse2006Id -> InlineResponse2006 { inlineResponse2006Id, ..} ) <$> f inlineResponse2006Id
{-# INLINE inlineResponse2006IdL #-}

-- | 'inlineResponse2006Created' Lens
inlineResponse2006CreatedL :: Lens_' InlineResponse2006 (Integer)
inlineResponse2006CreatedL f InlineResponse2006{..} = (\inlineResponse2006Created -> InlineResponse2006 { inlineResponse2006Created, ..} ) <$> f inlineResponse2006Created
{-# INLINE inlineResponse2006CreatedL #-}

-- | 'inlineResponse2006CreatedBy' Lens
inlineResponse2006CreatedByL :: Lens_' InlineResponse2006 (Text)
inlineResponse2006CreatedByL f InlineResponse2006{..} = (\inlineResponse2006CreatedBy -> InlineResponse2006 { inlineResponse2006CreatedBy, ..} ) <$> f inlineResponse2006CreatedBy
{-# INLINE inlineResponse2006CreatedByL #-}

-- | 'inlineResponse2006Tags' Lens
inlineResponse2006TagsL :: Lens_' InlineResponse2006 ([Text])
inlineResponse2006TagsL f InlineResponse2006{..} = (\inlineResponse2006Tags -> InlineResponse2006 { inlineResponse2006Tags, ..} ) <$> f inlineResponse2006Tags
{-# INLINE inlineResponse2006TagsL #-}

-- | 'inlineResponse2006Size' Lens
inlineResponse2006SizeL :: Lens_' InlineResponse2006 (Integer)
inlineResponse2006SizeL f InlineResponse2006{..} = (\inlineResponse2006Size -> InlineResponse2006 { inlineResponse2006Size, ..} ) <$> f inlineResponse2006Size
{-# INLINE inlineResponse2006SizeL #-}

-- | 'inlineResponse2006Comment' Lens
inlineResponse2006CommentL :: Lens_' InlineResponse2006 (Text)
inlineResponse2006CommentL f InlineResponse2006{..} = (\inlineResponse2006Comment -> InlineResponse2006 { inlineResponse2006Comment, ..} ) <$> f inlineResponse2006Comment
{-# INLINE inlineResponse2006CommentL #-}



-- * InlineResponse2007

-- | 'inlineResponse2007Description' Lens
inlineResponse2007DescriptionL :: Lens_' InlineResponse2007 (Maybe Text)
inlineResponse2007DescriptionL f InlineResponse2007{..} = (\inlineResponse2007Description -> InlineResponse2007 { inlineResponse2007Description, ..} ) <$> f inlineResponse2007Description
{-# INLINE inlineResponse2007DescriptionL #-}

-- | 'inlineResponse2007IsOfficial' Lens
inlineResponse2007IsOfficialL :: Lens_' InlineResponse2007 (Maybe Bool)
inlineResponse2007IsOfficialL f InlineResponse2007{..} = (\inlineResponse2007IsOfficial -> InlineResponse2007 { inlineResponse2007IsOfficial, ..} ) <$> f inlineResponse2007IsOfficial
{-# INLINE inlineResponse2007IsOfficialL #-}

-- | 'inlineResponse2007IsAutomated' Lens
inlineResponse2007IsAutomatedL :: Lens_' InlineResponse2007 (Maybe Bool)
inlineResponse2007IsAutomatedL f InlineResponse2007{..} = (\inlineResponse2007IsAutomated -> InlineResponse2007 { inlineResponse2007IsAutomated, ..} ) <$> f inlineResponse2007IsAutomated
{-# INLINE inlineResponse2007IsAutomatedL #-}

-- | 'inlineResponse2007Name' Lens
inlineResponse2007NameL :: Lens_' InlineResponse2007 (Maybe Text)
inlineResponse2007NameL f InlineResponse2007{..} = (\inlineResponse2007Name -> InlineResponse2007 { inlineResponse2007Name, ..} ) <$> f inlineResponse2007Name
{-# INLINE inlineResponse2007NameL #-}

-- | 'inlineResponse2007StarCount' Lens
inlineResponse2007StarCountL :: Lens_' InlineResponse2007 (Maybe Int)
inlineResponse2007StarCountL f InlineResponse2007{..} = (\inlineResponse2007StarCount -> InlineResponse2007 { inlineResponse2007StarCount, ..} ) <$> f inlineResponse2007StarCount
{-# INLINE inlineResponse2007StarCountL #-}



-- * InlineResponse2008

-- | 'inlineResponse2008ImagesDeleted' Lens
inlineResponse2008ImagesDeletedL :: Lens_' InlineResponse2008 (Maybe [ImageDeleteResponseItem])
inlineResponse2008ImagesDeletedL f InlineResponse2008{..} = (\inlineResponse2008ImagesDeleted -> InlineResponse2008 { inlineResponse2008ImagesDeleted, ..} ) <$> f inlineResponse2008ImagesDeleted
{-# INLINE inlineResponse2008ImagesDeletedL #-}

-- | 'inlineResponse2008SpaceReclaimed' Lens
inlineResponse2008SpaceReclaimedL :: Lens_' InlineResponse2008 (Maybe Integer)
inlineResponse2008SpaceReclaimedL f InlineResponse2008{..} = (\inlineResponse2008SpaceReclaimed -> InlineResponse2008 { inlineResponse2008SpaceReclaimed, ..} ) <$> f inlineResponse2008SpaceReclaimed
{-# INLINE inlineResponse2008SpaceReclaimedL #-}



-- * InlineResponse2009

-- | 'inlineResponse2009Status' Lens
inlineResponse2009StatusL :: Lens_' InlineResponse2009 (Text)
inlineResponse2009StatusL f InlineResponse2009{..} = (\inlineResponse2009Status -> InlineResponse2009 { inlineResponse2009Status, ..} ) <$> f inlineResponse2009Status
{-# INLINE inlineResponse2009StatusL #-}

-- | 'inlineResponse2009IdentityToken' Lens
inlineResponse2009IdentityTokenL :: Lens_' InlineResponse2009 (Maybe Text)
inlineResponse2009IdentityTokenL f InlineResponse2009{..} = (\inlineResponse2009IdentityToken -> InlineResponse2009 { inlineResponse2009IdentityToken, ..} ) <$> f inlineResponse2009IdentityToken
{-# INLINE inlineResponse2009IdentityTokenL #-}



-- * InlineResponse200State

-- | 'inlineResponse200StateStatus' Lens
inlineResponse200StateStatusL :: Lens_' InlineResponse200State (Maybe E'Status)
inlineResponse200StateStatusL f InlineResponse200State{..} = (\inlineResponse200StateStatus -> InlineResponse200State { inlineResponse200StateStatus, ..} ) <$> f inlineResponse200StateStatus
{-# INLINE inlineResponse200StateStatusL #-}

-- | 'inlineResponse200StateRunning' Lens
inlineResponse200StateRunningL :: Lens_' InlineResponse200State (Maybe Bool)
inlineResponse200StateRunningL f InlineResponse200State{..} = (\inlineResponse200StateRunning -> InlineResponse200State { inlineResponse200StateRunning, ..} ) <$> f inlineResponse200StateRunning
{-# INLINE inlineResponse200StateRunningL #-}

-- | 'inlineResponse200StatePaused' Lens
inlineResponse200StatePausedL :: Lens_' InlineResponse200State (Maybe Bool)
inlineResponse200StatePausedL f InlineResponse200State{..} = (\inlineResponse200StatePaused -> InlineResponse200State { inlineResponse200StatePaused, ..} ) <$> f inlineResponse200StatePaused
{-# INLINE inlineResponse200StatePausedL #-}

-- | 'inlineResponse200StateRestarting' Lens
inlineResponse200StateRestartingL :: Lens_' InlineResponse200State (Maybe Bool)
inlineResponse200StateRestartingL f InlineResponse200State{..} = (\inlineResponse200StateRestarting -> InlineResponse200State { inlineResponse200StateRestarting, ..} ) <$> f inlineResponse200StateRestarting
{-# INLINE inlineResponse200StateRestartingL #-}

-- | 'inlineResponse200StateOomKilled' Lens
inlineResponse200StateOomKilledL :: Lens_' InlineResponse200State (Maybe Bool)
inlineResponse200StateOomKilledL f InlineResponse200State{..} = (\inlineResponse200StateOomKilled -> InlineResponse200State { inlineResponse200StateOomKilled, ..} ) <$> f inlineResponse200StateOomKilled
{-# INLINE inlineResponse200StateOomKilledL #-}

-- | 'inlineResponse200StateDead' Lens
inlineResponse200StateDeadL :: Lens_' InlineResponse200State (Maybe Bool)
inlineResponse200StateDeadL f InlineResponse200State{..} = (\inlineResponse200StateDead -> InlineResponse200State { inlineResponse200StateDead, ..} ) <$> f inlineResponse200StateDead
{-# INLINE inlineResponse200StateDeadL #-}

-- | 'inlineResponse200StatePid' Lens
inlineResponse200StatePidL :: Lens_' InlineResponse200State (Maybe Int)
inlineResponse200StatePidL f InlineResponse200State{..} = (\inlineResponse200StatePid -> InlineResponse200State { inlineResponse200StatePid, ..} ) <$> f inlineResponse200StatePid
{-# INLINE inlineResponse200StatePidL #-}

-- | 'inlineResponse200StateExitCode' Lens
inlineResponse200StateExitCodeL :: Lens_' InlineResponse200State (Maybe Int)
inlineResponse200StateExitCodeL f InlineResponse200State{..} = (\inlineResponse200StateExitCode -> InlineResponse200State { inlineResponse200StateExitCode, ..} ) <$> f inlineResponse200StateExitCode
{-# INLINE inlineResponse200StateExitCodeL #-}

-- | 'inlineResponse200StateError' Lens
inlineResponse200StateErrorL :: Lens_' InlineResponse200State (Maybe Text)
inlineResponse200StateErrorL f InlineResponse200State{..} = (\inlineResponse200StateError -> InlineResponse200State { inlineResponse200StateError, ..} ) <$> f inlineResponse200StateError
{-# INLINE inlineResponse200StateErrorL #-}

-- | 'inlineResponse200StateStartedAt' Lens
inlineResponse200StateStartedAtL :: Lens_' InlineResponse200State (Maybe Text)
inlineResponse200StateStartedAtL f InlineResponse200State{..} = (\inlineResponse200StateStartedAt -> InlineResponse200State { inlineResponse200StateStartedAt, ..} ) <$> f inlineResponse200StateStartedAt
{-# INLINE inlineResponse200StateStartedAtL #-}

-- | 'inlineResponse200StateFinishedAt' Lens
inlineResponse200StateFinishedAtL :: Lens_' InlineResponse200State (Maybe Text)
inlineResponse200StateFinishedAtL f InlineResponse200State{..} = (\inlineResponse200StateFinishedAt -> InlineResponse200State { inlineResponse200StateFinishedAt, ..} ) <$> f inlineResponse200StateFinishedAt
{-# INLINE inlineResponse200StateFinishedAtL #-}



-- * InlineResponse201

-- | 'inlineResponse201Id' Lens
inlineResponse201IdL :: Lens_' InlineResponse201 (Text)
inlineResponse201IdL f InlineResponse201{..} = (\inlineResponse201Id -> InlineResponse201 { inlineResponse201Id, ..} ) <$> f inlineResponse201Id
{-# INLINE inlineResponse201IdL #-}

-- | 'inlineResponse201Warnings' Lens
inlineResponse201WarningsL :: Lens_' InlineResponse201 ([Text])
inlineResponse201WarningsL f InlineResponse201{..} = (\inlineResponse201Warnings -> InlineResponse201 { inlineResponse201Warnings, ..} ) <$> f inlineResponse201Warnings
{-# INLINE inlineResponse201WarningsL #-}



-- * InlineResponse2011

-- | 'inlineResponse2011Id' Lens
inlineResponse2011IdL :: Lens_' InlineResponse2011 (Maybe Text)
inlineResponse2011IdL f InlineResponse2011{..} = (\inlineResponse2011Id -> InlineResponse2011 { inlineResponse2011Id, ..} ) <$> f inlineResponse2011Id
{-# INLINE inlineResponse2011IdL #-}

-- | 'inlineResponse2011Warning' Lens
inlineResponse2011WarningL :: Lens_' InlineResponse2011 (Maybe Text)
inlineResponse2011WarningL f InlineResponse2011{..} = (\inlineResponse2011Warning -> InlineResponse2011 { inlineResponse2011Warning, ..} ) <$> f inlineResponse2011Warning
{-# INLINE inlineResponse2011WarningL #-}



-- * InlineResponse2012

-- | 'inlineResponse2012Id' Lens
inlineResponse2012IdL :: Lens_' InlineResponse2012 (Maybe Text)
inlineResponse2012IdL f InlineResponse2012{..} = (\inlineResponse2012Id -> InlineResponse2012 { inlineResponse2012Id, ..} ) <$> f inlineResponse2012Id
{-# INLINE inlineResponse2012IdL #-}

-- | 'inlineResponse2012Warning' Lens
inlineResponse2012WarningL :: Lens_' InlineResponse2012 (Maybe Text)
inlineResponse2012WarningL f InlineResponse2012{..} = (\inlineResponse2012Warning -> InlineResponse2012 { inlineResponse2012Warning, ..} ) <$> f inlineResponse2012Warning
{-# INLINE inlineResponse2012WarningL #-}



-- * InlineResponse2013

-- | 'inlineResponse2013Id' Lens
inlineResponse2013IdL :: Lens_' InlineResponse2013 (Maybe Text)
inlineResponse2013IdL f InlineResponse2013{..} = (\inlineResponse2013Id -> InlineResponse2013 { inlineResponse2013Id, ..} ) <$> f inlineResponse2013Id
{-# INLINE inlineResponse2013IdL #-}



-- * InlineResponse2014

-- | 'inlineResponse2014Id' Lens
inlineResponse2014IdL :: Lens_' InlineResponse2014 (Maybe Text)
inlineResponse2014IdL f InlineResponse2014{..} = (\inlineResponse2014Id -> InlineResponse2014 { inlineResponse2014Id, ..} ) <$> f inlineResponse2014Id
{-# INLINE inlineResponse2014IdL #-}



-- * InlineResponse400

-- | 'inlineResponse400ErrorResponse' Lens
inlineResponse400ErrorResponseL :: Lens_' InlineResponse400 (Maybe ErrorResponse)
inlineResponse400ErrorResponseL f InlineResponse400{..} = (\inlineResponse400ErrorResponse -> InlineResponse400 { inlineResponse400ErrorResponse, ..} ) <$> f inlineResponse400ErrorResponse
{-# INLINE inlineResponse400ErrorResponseL #-}

-- | 'inlineResponse400Message' Lens
inlineResponse400MessageL :: Lens_' InlineResponse400 (Maybe Text)
inlineResponse400MessageL f InlineResponse400{..} = (\inlineResponse400Message -> InlineResponse400 { inlineResponse400Message, ..} ) <$> f inlineResponse400Message
{-# INLINE inlineResponse400MessageL #-}



-- * Mount

-- | 'mountTarget' Lens
mountTargetL :: Lens_' Mount (Maybe Text)
mountTargetL f Mount{..} = (\mountTarget -> Mount { mountTarget, ..} ) <$> f mountTarget
{-# INLINE mountTargetL #-}

-- | 'mountSource' Lens
mountSourceL :: Lens_' Mount (Maybe Text)
mountSourceL f Mount{..} = (\mountSource -> Mount { mountSource, ..} ) <$> f mountSource
{-# INLINE mountSourceL #-}

-- | 'mountType' Lens
mountTypeL :: Lens_' Mount (Maybe E'Type2)
mountTypeL f Mount{..} = (\mountType -> Mount { mountType, ..} ) <$> f mountType
{-# INLINE mountTypeL #-}

-- | 'mountReadOnly' Lens
mountReadOnlyL :: Lens_' Mount (Maybe Bool)
mountReadOnlyL f Mount{..} = (\mountReadOnly -> Mount { mountReadOnly, ..} ) <$> f mountReadOnly
{-# INLINE mountReadOnlyL #-}

-- | 'mountConsistency' Lens
mountConsistencyL :: Lens_' Mount (Maybe Text)
mountConsistencyL f Mount{..} = (\mountConsistency -> Mount { mountConsistency, ..} ) <$> f mountConsistency
{-# INLINE mountConsistencyL #-}

-- | 'mountBindOptions' Lens
mountBindOptionsL :: Lens_' Mount (Maybe MountBindOptions)
mountBindOptionsL f Mount{..} = (\mountBindOptions -> Mount { mountBindOptions, ..} ) <$> f mountBindOptions
{-# INLINE mountBindOptionsL #-}

-- | 'mountVolumeOptions' Lens
mountVolumeOptionsL :: Lens_' Mount (Maybe MountVolumeOptions)
mountVolumeOptionsL f Mount{..} = (\mountVolumeOptions -> Mount { mountVolumeOptions, ..} ) <$> f mountVolumeOptions
{-# INLINE mountVolumeOptionsL #-}

-- | 'mountTmpfsOptions' Lens
mountTmpfsOptionsL :: Lens_' Mount (Maybe MountTmpfsOptions)
mountTmpfsOptionsL f Mount{..} = (\mountTmpfsOptions -> Mount { mountTmpfsOptions, ..} ) <$> f mountTmpfsOptions
{-# INLINE mountTmpfsOptionsL #-}



-- * MountBindOptions

-- | 'mountBindOptionsPropagation' Lens
mountBindOptionsPropagationL :: Lens_' MountBindOptions (Maybe A.Value)
mountBindOptionsPropagationL f MountBindOptions{..} = (\mountBindOptionsPropagation -> MountBindOptions { mountBindOptionsPropagation, ..} ) <$> f mountBindOptionsPropagation
{-# INLINE mountBindOptionsPropagationL #-}



-- * MountPoint

-- | 'mountPointType' Lens
mountPointTypeL :: Lens_' MountPoint (Maybe Text)
mountPointTypeL f MountPoint{..} = (\mountPointType -> MountPoint { mountPointType, ..} ) <$> f mountPointType
{-# INLINE mountPointTypeL #-}

-- | 'mountPointName' Lens
mountPointNameL :: Lens_' MountPoint (Maybe Text)
mountPointNameL f MountPoint{..} = (\mountPointName -> MountPoint { mountPointName, ..} ) <$> f mountPointName
{-# INLINE mountPointNameL #-}

-- | 'mountPointSource' Lens
mountPointSourceL :: Lens_' MountPoint (Maybe Text)
mountPointSourceL f MountPoint{..} = (\mountPointSource -> MountPoint { mountPointSource, ..} ) <$> f mountPointSource
{-# INLINE mountPointSourceL #-}

-- | 'mountPointDestination' Lens
mountPointDestinationL :: Lens_' MountPoint (Maybe Text)
mountPointDestinationL f MountPoint{..} = (\mountPointDestination -> MountPoint { mountPointDestination, ..} ) <$> f mountPointDestination
{-# INLINE mountPointDestinationL #-}

-- | 'mountPointDriver' Lens
mountPointDriverL :: Lens_' MountPoint (Maybe Text)
mountPointDriverL f MountPoint{..} = (\mountPointDriver -> MountPoint { mountPointDriver, ..} ) <$> f mountPointDriver
{-# INLINE mountPointDriverL #-}

-- | 'mountPointMode' Lens
mountPointModeL :: Lens_' MountPoint (Maybe Text)
mountPointModeL f MountPoint{..} = (\mountPointMode -> MountPoint { mountPointMode, ..} ) <$> f mountPointMode
{-# INLINE mountPointModeL #-}

-- | 'mountPointRw' Lens
mountPointRwL :: Lens_' MountPoint (Maybe Bool)
mountPointRwL f MountPoint{..} = (\mountPointRw -> MountPoint { mountPointRw, ..} ) <$> f mountPointRw
{-# INLINE mountPointRwL #-}

-- | 'mountPointPropagation' Lens
mountPointPropagationL :: Lens_' MountPoint (Maybe Text)
mountPointPropagationL f MountPoint{..} = (\mountPointPropagation -> MountPoint { mountPointPropagation, ..} ) <$> f mountPointPropagation
{-# INLINE mountPointPropagationL #-}



-- * MountTmpfsOptions

-- | 'mountTmpfsOptionsSizeBytes' Lens
mountTmpfsOptionsSizeBytesL :: Lens_' MountTmpfsOptions (Maybe Integer)
mountTmpfsOptionsSizeBytesL f MountTmpfsOptions{..} = (\mountTmpfsOptionsSizeBytes -> MountTmpfsOptions { mountTmpfsOptionsSizeBytes, ..} ) <$> f mountTmpfsOptionsSizeBytes
{-# INLINE mountTmpfsOptionsSizeBytesL #-}

-- | 'mountTmpfsOptionsMode' Lens
mountTmpfsOptionsModeL :: Lens_' MountTmpfsOptions (Maybe Int)
mountTmpfsOptionsModeL f MountTmpfsOptions{..} = (\mountTmpfsOptionsMode -> MountTmpfsOptions { mountTmpfsOptionsMode, ..} ) <$> f mountTmpfsOptionsMode
{-# INLINE mountTmpfsOptionsModeL #-}



-- * MountVolumeOptions

-- | 'mountVolumeOptionsNoCopy' Lens
mountVolumeOptionsNoCopyL :: Lens_' MountVolumeOptions (Maybe Bool)
mountVolumeOptionsNoCopyL f MountVolumeOptions{..} = (\mountVolumeOptionsNoCopy -> MountVolumeOptions { mountVolumeOptionsNoCopy, ..} ) <$> f mountVolumeOptionsNoCopy
{-# INLINE mountVolumeOptionsNoCopyL #-}

-- | 'mountVolumeOptionsLabels' Lens
mountVolumeOptionsLabelsL :: Lens_' MountVolumeOptions (Maybe (Map.Map String Text))
mountVolumeOptionsLabelsL f MountVolumeOptions{..} = (\mountVolumeOptionsLabels -> MountVolumeOptions { mountVolumeOptionsLabels, ..} ) <$> f mountVolumeOptionsLabels
{-# INLINE mountVolumeOptionsLabelsL #-}

-- | 'mountVolumeOptionsDriverConfig' Lens
mountVolumeOptionsDriverConfigL :: Lens_' MountVolumeOptions (Maybe MountVolumeOptionsDriverConfig)
mountVolumeOptionsDriverConfigL f MountVolumeOptions{..} = (\mountVolumeOptionsDriverConfig -> MountVolumeOptions { mountVolumeOptionsDriverConfig, ..} ) <$> f mountVolumeOptionsDriverConfig
{-# INLINE mountVolumeOptionsDriverConfigL #-}



-- * MountVolumeOptionsDriverConfig

-- | 'mountVolumeOptionsDriverConfigName' Lens
mountVolumeOptionsDriverConfigNameL :: Lens_' MountVolumeOptionsDriverConfig (Maybe Text)
mountVolumeOptionsDriverConfigNameL f MountVolumeOptionsDriverConfig{..} = (\mountVolumeOptionsDriverConfigName -> MountVolumeOptionsDriverConfig { mountVolumeOptionsDriverConfigName, ..} ) <$> f mountVolumeOptionsDriverConfigName
{-# INLINE mountVolumeOptionsDriverConfigNameL #-}

-- | 'mountVolumeOptionsDriverConfigOptions' Lens
mountVolumeOptionsDriverConfigOptionsL :: Lens_' MountVolumeOptionsDriverConfig (Maybe (Map.Map String Text))
mountVolumeOptionsDriverConfigOptionsL f MountVolumeOptionsDriverConfig{..} = (\mountVolumeOptionsDriverConfigOptions -> MountVolumeOptionsDriverConfig { mountVolumeOptionsDriverConfigOptions, ..} ) <$> f mountVolumeOptionsDriverConfigOptions
{-# INLINE mountVolumeOptionsDriverConfigOptionsL #-}



-- * Network

-- | 'networkName' Lens
networkNameL :: Lens_' Network (Maybe Text)
networkNameL f Network{..} = (\networkName -> Network { networkName, ..} ) <$> f networkName
{-# INLINE networkNameL #-}

-- | 'networkId' Lens
networkIdL :: Lens_' Network (Maybe Text)
networkIdL f Network{..} = (\networkId -> Network { networkId, ..} ) <$> f networkId
{-# INLINE networkIdL #-}

-- | 'networkCreated' Lens
networkCreatedL :: Lens_' Network (Maybe Text)
networkCreatedL f Network{..} = (\networkCreated -> Network { networkCreated, ..} ) <$> f networkCreated
{-# INLINE networkCreatedL #-}

-- | 'networkScope' Lens
networkScopeL :: Lens_' Network (Maybe Text)
networkScopeL f Network{..} = (\networkScope -> Network { networkScope, ..} ) <$> f networkScope
{-# INLINE networkScopeL #-}

-- | 'networkDriver' Lens
networkDriverL :: Lens_' Network (Maybe Text)
networkDriverL f Network{..} = (\networkDriver -> Network { networkDriver, ..} ) <$> f networkDriver
{-# INLINE networkDriverL #-}

-- | 'networkEnableIPv6' Lens
networkEnableIPv6L :: Lens_' Network (Maybe Bool)
networkEnableIPv6L f Network{..} = (\networkEnableIPv6 -> Network { networkEnableIPv6, ..} ) <$> f networkEnableIPv6
{-# INLINE networkEnableIPv6L #-}

-- | 'networkIpam' Lens
networkIpamL :: Lens_' Network (Maybe IPAM)
networkIpamL f Network{..} = (\networkIpam -> Network { networkIpam, ..} ) <$> f networkIpam
{-# INLINE networkIpamL #-}

-- | 'networkInternal' Lens
networkInternalL :: Lens_' Network (Maybe Bool)
networkInternalL f Network{..} = (\networkInternal -> Network { networkInternal, ..} ) <$> f networkInternal
{-# INLINE networkInternalL #-}

-- | 'networkAttachable' Lens
networkAttachableL :: Lens_' Network (Maybe Bool)
networkAttachableL f Network{..} = (\networkAttachable -> Network { networkAttachable, ..} ) <$> f networkAttachable
{-# INLINE networkAttachableL #-}

-- | 'networkIngress' Lens
networkIngressL :: Lens_' Network (Maybe Bool)
networkIngressL f Network{..} = (\networkIngress -> Network { networkIngress, ..} ) <$> f networkIngress
{-# INLINE networkIngressL #-}

-- | 'networkContainers' Lens
networkContainersL :: Lens_' Network (Maybe (Map.Map String NetworkContainer))
networkContainersL f Network{..} = (\networkContainers -> Network { networkContainers, ..} ) <$> f networkContainers
{-# INLINE networkContainersL #-}

-- | 'networkOptions' Lens
networkOptionsL :: Lens_' Network (Maybe (Map.Map String Text))
networkOptionsL f Network{..} = (\networkOptions -> Network { networkOptions, ..} ) <$> f networkOptions
{-# INLINE networkOptionsL #-}

-- | 'networkLabels' Lens
networkLabelsL :: Lens_' Network (Maybe (Map.Map String Text))
networkLabelsL f Network{..} = (\networkLabels -> Network { networkLabels, ..} ) <$> f networkLabels
{-# INLINE networkLabelsL #-}



-- * NetworkConfig

-- | 'networkConfigBridge' Lens
networkConfigBridgeL :: Lens_' NetworkConfig (Maybe Text)
networkConfigBridgeL f NetworkConfig{..} = (\networkConfigBridge -> NetworkConfig { networkConfigBridge, ..} ) <$> f networkConfigBridge
{-# INLINE networkConfigBridgeL #-}

-- | 'networkConfigGateway' Lens
networkConfigGatewayL :: Lens_' NetworkConfig (Maybe Text)
networkConfigGatewayL f NetworkConfig{..} = (\networkConfigGateway -> NetworkConfig { networkConfigGateway, ..} ) <$> f networkConfigGateway
{-# INLINE networkConfigGatewayL #-}

-- | 'networkConfigAddress' Lens
networkConfigAddressL :: Lens_' NetworkConfig (Maybe Text)
networkConfigAddressL f NetworkConfig{..} = (\networkConfigAddress -> NetworkConfig { networkConfigAddress, ..} ) <$> f networkConfigAddress
{-# INLINE networkConfigAddressL #-}

-- | 'networkConfigIpPrefixLen' Lens
networkConfigIpPrefixLenL :: Lens_' NetworkConfig (Maybe Int)
networkConfigIpPrefixLenL f NetworkConfig{..} = (\networkConfigIpPrefixLen -> NetworkConfig { networkConfigIpPrefixLen, ..} ) <$> f networkConfigIpPrefixLen
{-# INLINE networkConfigIpPrefixLenL #-}

-- | 'networkConfigMacAddress' Lens
networkConfigMacAddressL :: Lens_' NetworkConfig (Maybe Text)
networkConfigMacAddressL f NetworkConfig{..} = (\networkConfigMacAddress -> NetworkConfig { networkConfigMacAddress, ..} ) <$> f networkConfigMacAddress
{-# INLINE networkConfigMacAddressL #-}

-- | 'networkConfigPortMapping' Lens
networkConfigPortMappingL :: Lens_' NetworkConfig (Maybe Text)
networkConfigPortMappingL f NetworkConfig{..} = (\networkConfigPortMapping -> NetworkConfig { networkConfigPortMapping, ..} ) <$> f networkConfigPortMapping
{-# INLINE networkConfigPortMappingL #-}

-- | 'networkConfigPorts' Lens
networkConfigPortsL :: Lens_' NetworkConfig (Maybe [Port])
networkConfigPortsL f NetworkConfig{..} = (\networkConfigPorts -> NetworkConfig { networkConfigPorts, ..} ) <$> f networkConfigPorts
{-# INLINE networkConfigPortsL #-}



-- * NetworkContainer

-- | 'networkContainerName' Lens
networkContainerNameL :: Lens_' NetworkContainer (Maybe Text)
networkContainerNameL f NetworkContainer{..} = (\networkContainerName -> NetworkContainer { networkContainerName, ..} ) <$> f networkContainerName
{-# INLINE networkContainerNameL #-}

-- | 'networkContainerEndpointId' Lens
networkContainerEndpointIdL :: Lens_' NetworkContainer (Maybe Text)
networkContainerEndpointIdL f NetworkContainer{..} = (\networkContainerEndpointId -> NetworkContainer { networkContainerEndpointId, ..} ) <$> f networkContainerEndpointId
{-# INLINE networkContainerEndpointIdL #-}

-- | 'networkContainerMacAddress' Lens
networkContainerMacAddressL :: Lens_' NetworkContainer (Maybe Text)
networkContainerMacAddressL f NetworkContainer{..} = (\networkContainerMacAddress -> NetworkContainer { networkContainerMacAddress, ..} ) <$> f networkContainerMacAddress
{-# INLINE networkContainerMacAddressL #-}

-- | 'networkContainerIPv4Address' Lens
networkContainerIPv4AddressL :: Lens_' NetworkContainer (Maybe Text)
networkContainerIPv4AddressL f NetworkContainer{..} = (\networkContainerIPv4Address -> NetworkContainer { networkContainerIPv4Address, ..} ) <$> f networkContainerIPv4Address
{-# INLINE networkContainerIPv4AddressL #-}

-- | 'networkContainerIPv6Address' Lens
networkContainerIPv6AddressL :: Lens_' NetworkContainer (Maybe Text)
networkContainerIPv6AddressL f NetworkContainer{..} = (\networkContainerIPv6Address -> NetworkContainer { networkContainerIPv6Address, ..} ) <$> f networkContainerIPv6Address
{-# INLINE networkContainerIPv6AddressL #-}



-- * Node

-- | 'nodeId' Lens
nodeIdL :: Lens_' Node (Maybe Text)
nodeIdL f Node{..} = (\nodeId -> Node { nodeId, ..} ) <$> f nodeId
{-# INLINE nodeIdL #-}

-- | 'nodeVersion' Lens
nodeVersionL :: Lens_' Node (Maybe ObjectVersion)
nodeVersionL f Node{..} = (\nodeVersion -> Node { nodeVersion, ..} ) <$> f nodeVersion
{-# INLINE nodeVersionL #-}

-- | 'nodeCreatedAt' Lens
nodeCreatedAtL :: Lens_' Node (Maybe Text)
nodeCreatedAtL f Node{..} = (\nodeCreatedAt -> Node { nodeCreatedAt, ..} ) <$> f nodeCreatedAt
{-# INLINE nodeCreatedAtL #-}

-- | 'nodeUpdatedAt' Lens
nodeUpdatedAtL :: Lens_' Node (Maybe Text)
nodeUpdatedAtL f Node{..} = (\nodeUpdatedAt -> Node { nodeUpdatedAt, ..} ) <$> f nodeUpdatedAt
{-# INLINE nodeUpdatedAtL #-}

-- | 'nodeSpec' Lens
nodeSpecL :: Lens_' Node (Maybe NodeSpec)
nodeSpecL f Node{..} = (\nodeSpec -> Node { nodeSpec, ..} ) <$> f nodeSpec
{-# INLINE nodeSpecL #-}

-- | 'nodeDescription' Lens
nodeDescriptionL :: Lens_' Node (Maybe NodeDescription)
nodeDescriptionL f Node{..} = (\nodeDescription -> Node { nodeDescription, ..} ) <$> f nodeDescription
{-# INLINE nodeDescriptionL #-}



-- * NodeDescription

-- | 'nodeDescriptionHostname' Lens
nodeDescriptionHostnameL :: Lens_' NodeDescription (Maybe Text)
nodeDescriptionHostnameL f NodeDescription{..} = (\nodeDescriptionHostname -> NodeDescription { nodeDescriptionHostname, ..} ) <$> f nodeDescriptionHostname
{-# INLINE nodeDescriptionHostnameL #-}

-- | 'nodeDescriptionPlatform' Lens
nodeDescriptionPlatformL :: Lens_' NodeDescription (Maybe NodeDescriptionPlatform)
nodeDescriptionPlatformL f NodeDescription{..} = (\nodeDescriptionPlatform -> NodeDescription { nodeDescriptionPlatform, ..} ) <$> f nodeDescriptionPlatform
{-# INLINE nodeDescriptionPlatformL #-}

-- | 'nodeDescriptionResources' Lens
nodeDescriptionResourcesL :: Lens_' NodeDescription (Maybe NodeDescriptionResources)
nodeDescriptionResourcesL f NodeDescription{..} = (\nodeDescriptionResources -> NodeDescription { nodeDescriptionResources, ..} ) <$> f nodeDescriptionResources
{-# INLINE nodeDescriptionResourcesL #-}

-- | 'nodeDescriptionEngine' Lens
nodeDescriptionEngineL :: Lens_' NodeDescription (Maybe NodeDescriptionEngine)
nodeDescriptionEngineL f NodeDescription{..} = (\nodeDescriptionEngine -> NodeDescription { nodeDescriptionEngine, ..} ) <$> f nodeDescriptionEngine
{-# INLINE nodeDescriptionEngineL #-}

-- | 'nodeDescriptionTlsInfo' Lens
nodeDescriptionTlsInfoL :: Lens_' NodeDescription (Maybe SwarmSpec)
nodeDescriptionTlsInfoL f NodeDescription{..} = (\nodeDescriptionTlsInfo -> NodeDescription { nodeDescriptionTlsInfo, ..} ) <$> f nodeDescriptionTlsInfo
{-# INLINE nodeDescriptionTlsInfoL #-}



-- * NodeDescriptionEngine

-- | 'nodeDescriptionEngineEngineVersion' Lens
nodeDescriptionEngineEngineVersionL :: Lens_' NodeDescriptionEngine (Maybe Text)
nodeDescriptionEngineEngineVersionL f NodeDescriptionEngine{..} = (\nodeDescriptionEngineEngineVersion -> NodeDescriptionEngine { nodeDescriptionEngineEngineVersion, ..} ) <$> f nodeDescriptionEngineEngineVersion
{-# INLINE nodeDescriptionEngineEngineVersionL #-}

-- | 'nodeDescriptionEngineLabels' Lens
nodeDescriptionEngineLabelsL :: Lens_' NodeDescriptionEngine (Maybe (Map.Map String Text))
nodeDescriptionEngineLabelsL f NodeDescriptionEngine{..} = (\nodeDescriptionEngineLabels -> NodeDescriptionEngine { nodeDescriptionEngineLabels, ..} ) <$> f nodeDescriptionEngineLabels
{-# INLINE nodeDescriptionEngineLabelsL #-}

-- | 'nodeDescriptionEnginePlugins' Lens
nodeDescriptionEnginePluginsL :: Lens_' NodeDescriptionEngine (Maybe [NodeDescriptionEnginePlugins])
nodeDescriptionEnginePluginsL f NodeDescriptionEngine{..} = (\nodeDescriptionEnginePlugins -> NodeDescriptionEngine { nodeDescriptionEnginePlugins, ..} ) <$> f nodeDescriptionEnginePlugins
{-# INLINE nodeDescriptionEnginePluginsL #-}



-- * NodeDescriptionEnginePlugins

-- | 'nodeDescriptionEnginePluginsType' Lens
nodeDescriptionEnginePluginsTypeL :: Lens_' NodeDescriptionEnginePlugins (Maybe Text)
nodeDescriptionEnginePluginsTypeL f NodeDescriptionEnginePlugins{..} = (\nodeDescriptionEnginePluginsType -> NodeDescriptionEnginePlugins { nodeDescriptionEnginePluginsType, ..} ) <$> f nodeDescriptionEnginePluginsType
{-# INLINE nodeDescriptionEnginePluginsTypeL #-}

-- | 'nodeDescriptionEnginePluginsName' Lens
nodeDescriptionEnginePluginsNameL :: Lens_' NodeDescriptionEnginePlugins (Maybe Text)
nodeDescriptionEnginePluginsNameL f NodeDescriptionEnginePlugins{..} = (\nodeDescriptionEnginePluginsName -> NodeDescriptionEnginePlugins { nodeDescriptionEnginePluginsName, ..} ) <$> f nodeDescriptionEnginePluginsName
{-# INLINE nodeDescriptionEnginePluginsNameL #-}



-- * NodeDescriptionPlatform

-- | 'nodeDescriptionPlatformArchitecture' Lens
nodeDescriptionPlatformArchitectureL :: Lens_' NodeDescriptionPlatform (Maybe Text)
nodeDescriptionPlatformArchitectureL f NodeDescriptionPlatform{..} = (\nodeDescriptionPlatformArchitecture -> NodeDescriptionPlatform { nodeDescriptionPlatformArchitecture, ..} ) <$> f nodeDescriptionPlatformArchitecture
{-# INLINE nodeDescriptionPlatformArchitectureL #-}

-- | 'nodeDescriptionPlatformOs' Lens
nodeDescriptionPlatformOsL :: Lens_' NodeDescriptionPlatform (Maybe Text)
nodeDescriptionPlatformOsL f NodeDescriptionPlatform{..} = (\nodeDescriptionPlatformOs -> NodeDescriptionPlatform { nodeDescriptionPlatformOs, ..} ) <$> f nodeDescriptionPlatformOs
{-# INLINE nodeDescriptionPlatformOsL #-}



-- * NodeDescriptionResources

-- | 'nodeDescriptionResourcesNanoCpUs' Lens
nodeDescriptionResourcesNanoCpUsL :: Lens_' NodeDescriptionResources (Maybe Integer)
nodeDescriptionResourcesNanoCpUsL f NodeDescriptionResources{..} = (\nodeDescriptionResourcesNanoCpUs -> NodeDescriptionResources { nodeDescriptionResourcesNanoCpUs, ..} ) <$> f nodeDescriptionResourcesNanoCpUs
{-# INLINE nodeDescriptionResourcesNanoCpUsL #-}

-- | 'nodeDescriptionResourcesMemoryBytes' Lens
nodeDescriptionResourcesMemoryBytesL :: Lens_' NodeDescriptionResources (Maybe Integer)
nodeDescriptionResourcesMemoryBytesL f NodeDescriptionResources{..} = (\nodeDescriptionResourcesMemoryBytes -> NodeDescriptionResources { nodeDescriptionResourcesMemoryBytes, ..} ) <$> f nodeDescriptionResourcesMemoryBytes
{-# INLINE nodeDescriptionResourcesMemoryBytesL #-}



-- * NodeSpec

-- | 'nodeSpecName' Lens
nodeSpecNameL :: Lens_' NodeSpec (Maybe Text)
nodeSpecNameL f NodeSpec{..} = (\nodeSpecName -> NodeSpec { nodeSpecName, ..} ) <$> f nodeSpecName
{-# INLINE nodeSpecNameL #-}

-- | 'nodeSpecLabels' Lens
nodeSpecLabelsL :: Lens_' NodeSpec (Maybe (Map.Map String Text))
nodeSpecLabelsL f NodeSpec{..} = (\nodeSpecLabels -> NodeSpec { nodeSpecLabels, ..} ) <$> f nodeSpecLabels
{-# INLINE nodeSpecLabelsL #-}

-- | 'nodeSpecRole' Lens
nodeSpecRoleL :: Lens_' NodeSpec (Maybe E'Role)
nodeSpecRoleL f NodeSpec{..} = (\nodeSpecRole -> NodeSpec { nodeSpecRole, ..} ) <$> f nodeSpecRole
{-# INLINE nodeSpecRoleL #-}

-- | 'nodeSpecAvailability' Lens
nodeSpecAvailabilityL :: Lens_' NodeSpec (Maybe E'Availability)
nodeSpecAvailabilityL f NodeSpec{..} = (\nodeSpecAvailability -> NodeSpec { nodeSpecAvailability, ..} ) <$> f nodeSpecAvailability
{-# INLINE nodeSpecAvailabilityL #-}



-- * ObjectVersion

-- | 'objectVersionIndex' Lens
objectVersionIndexL :: Lens_' ObjectVersion (Maybe Integer)
objectVersionIndexL f ObjectVersion{..} = (\objectVersionIndex -> ObjectVersion { objectVersionIndex, ..} ) <$> f objectVersionIndex
{-# INLINE objectVersionIndexL #-}



-- * Plugin

-- | 'pluginId' Lens
pluginIdL :: Lens_' Plugin (Maybe Text)
pluginIdL f Plugin{..} = (\pluginId -> Plugin { pluginId, ..} ) <$> f pluginId
{-# INLINE pluginIdL #-}

-- | 'pluginName' Lens
pluginNameL :: Lens_' Plugin (Text)
pluginNameL f Plugin{..} = (\pluginName -> Plugin { pluginName, ..} ) <$> f pluginName
{-# INLINE pluginNameL #-}

-- | 'pluginEnabled' Lens
pluginEnabledL :: Lens_' Plugin (Bool)
pluginEnabledL f Plugin{..} = (\pluginEnabled -> Plugin { pluginEnabled, ..} ) <$> f pluginEnabled
{-# INLINE pluginEnabledL #-}

-- | 'pluginSettings' Lens
pluginSettingsL :: Lens_' Plugin (PluginSettings)
pluginSettingsL f Plugin{..} = (\pluginSettings -> Plugin { pluginSettings, ..} ) <$> f pluginSettings
{-# INLINE pluginSettingsL #-}

-- | 'pluginPluginReference' Lens
pluginPluginReferenceL :: Lens_' Plugin (Maybe Text)
pluginPluginReferenceL f Plugin{..} = (\pluginPluginReference -> Plugin { pluginPluginReference, ..} ) <$> f pluginPluginReference
{-# INLINE pluginPluginReferenceL #-}

-- | 'pluginConfig' Lens
pluginConfigL :: Lens_' Plugin (PluginConfig)
pluginConfigL f Plugin{..} = (\pluginConfig -> Plugin { pluginConfig, ..} ) <$> f pluginConfig
{-# INLINE pluginConfigL #-}



-- * PluginConfig

-- | 'pluginConfigDockerVersion' Lens
pluginConfigDockerVersionL :: Lens_' PluginConfig (Maybe Text)
pluginConfigDockerVersionL f PluginConfig{..} = (\pluginConfigDockerVersion -> PluginConfig { pluginConfigDockerVersion, ..} ) <$> f pluginConfigDockerVersion
{-# INLINE pluginConfigDockerVersionL #-}

-- | 'pluginConfigDescription' Lens
pluginConfigDescriptionL :: Lens_' PluginConfig (Text)
pluginConfigDescriptionL f PluginConfig{..} = (\pluginConfigDescription -> PluginConfig { pluginConfigDescription, ..} ) <$> f pluginConfigDescription
{-# INLINE pluginConfigDescriptionL #-}

-- | 'pluginConfigDocumentation' Lens
pluginConfigDocumentationL :: Lens_' PluginConfig (Text)
pluginConfigDocumentationL f PluginConfig{..} = (\pluginConfigDocumentation -> PluginConfig { pluginConfigDocumentation, ..} ) <$> f pluginConfigDocumentation
{-# INLINE pluginConfigDocumentationL #-}

-- | 'pluginConfigInterface' Lens
pluginConfigInterfaceL :: Lens_' PluginConfig (PluginConfigInterface)
pluginConfigInterfaceL f PluginConfig{..} = (\pluginConfigInterface -> PluginConfig { pluginConfigInterface, ..} ) <$> f pluginConfigInterface
{-# INLINE pluginConfigInterfaceL #-}

-- | 'pluginConfigEntrypoint' Lens
pluginConfigEntrypointL :: Lens_' PluginConfig ([Text])
pluginConfigEntrypointL f PluginConfig{..} = (\pluginConfigEntrypoint -> PluginConfig { pluginConfigEntrypoint, ..} ) <$> f pluginConfigEntrypoint
{-# INLINE pluginConfigEntrypointL #-}

-- | 'pluginConfigWorkDir' Lens
pluginConfigWorkDirL :: Lens_' PluginConfig (Text)
pluginConfigWorkDirL f PluginConfig{..} = (\pluginConfigWorkDir -> PluginConfig { pluginConfigWorkDir, ..} ) <$> f pluginConfigWorkDir
{-# INLINE pluginConfigWorkDirL #-}

-- | 'pluginConfigUser' Lens
pluginConfigUserL :: Lens_' PluginConfig (Maybe PluginConfigUser)
pluginConfigUserL f PluginConfig{..} = (\pluginConfigUser -> PluginConfig { pluginConfigUser, ..} ) <$> f pluginConfigUser
{-# INLINE pluginConfigUserL #-}

-- | 'pluginConfigNetwork' Lens
pluginConfigNetworkL :: Lens_' PluginConfig (PluginConfigNetwork)
pluginConfigNetworkL f PluginConfig{..} = (\pluginConfigNetwork -> PluginConfig { pluginConfigNetwork, ..} ) <$> f pluginConfigNetwork
{-# INLINE pluginConfigNetworkL #-}

-- | 'pluginConfigLinux' Lens
pluginConfigLinuxL :: Lens_' PluginConfig (PluginConfigLinux)
pluginConfigLinuxL f PluginConfig{..} = (\pluginConfigLinux -> PluginConfig { pluginConfigLinux, ..} ) <$> f pluginConfigLinux
{-# INLINE pluginConfigLinuxL #-}

-- | 'pluginConfigPropagatedMount' Lens
pluginConfigPropagatedMountL :: Lens_' PluginConfig (Text)
pluginConfigPropagatedMountL f PluginConfig{..} = (\pluginConfigPropagatedMount -> PluginConfig { pluginConfigPropagatedMount, ..} ) <$> f pluginConfigPropagatedMount
{-# INLINE pluginConfigPropagatedMountL #-}

-- | 'pluginConfigIpcHost' Lens
pluginConfigIpcHostL :: Lens_' PluginConfig (Bool)
pluginConfigIpcHostL f PluginConfig{..} = (\pluginConfigIpcHost -> PluginConfig { pluginConfigIpcHost, ..} ) <$> f pluginConfigIpcHost
{-# INLINE pluginConfigIpcHostL #-}

-- | 'pluginConfigPidHost' Lens
pluginConfigPidHostL :: Lens_' PluginConfig (Bool)
pluginConfigPidHostL f PluginConfig{..} = (\pluginConfigPidHost -> PluginConfig { pluginConfigPidHost, ..} ) <$> f pluginConfigPidHost
{-# INLINE pluginConfigPidHostL #-}

-- | 'pluginConfigMounts' Lens
pluginConfigMountsL :: Lens_' PluginConfig ([PluginMount])
pluginConfigMountsL f PluginConfig{..} = (\pluginConfigMounts -> PluginConfig { pluginConfigMounts, ..} ) <$> f pluginConfigMounts
{-# INLINE pluginConfigMountsL #-}

-- | 'pluginConfigEnv' Lens
pluginConfigEnvL :: Lens_' PluginConfig ([PluginEnv])
pluginConfigEnvL f PluginConfig{..} = (\pluginConfigEnv -> PluginConfig { pluginConfigEnv, ..} ) <$> f pluginConfigEnv
{-# INLINE pluginConfigEnvL #-}

-- | 'pluginConfigArgs' Lens
pluginConfigArgsL :: Lens_' PluginConfig (PluginConfigArgs)
pluginConfigArgsL f PluginConfig{..} = (\pluginConfigArgs -> PluginConfig { pluginConfigArgs, ..} ) <$> f pluginConfigArgs
{-# INLINE pluginConfigArgsL #-}

-- | 'pluginConfigRootfs' Lens
pluginConfigRootfsL :: Lens_' PluginConfig (Maybe PluginConfigRootfs)
pluginConfigRootfsL f PluginConfig{..} = (\pluginConfigRootfs -> PluginConfig { pluginConfigRootfs, ..} ) <$> f pluginConfigRootfs
{-# INLINE pluginConfigRootfsL #-}



-- * PluginConfigArgs

-- | 'pluginConfigArgsName' Lens
pluginConfigArgsNameL :: Lens_' PluginConfigArgs (Text)
pluginConfigArgsNameL f PluginConfigArgs{..} = (\pluginConfigArgsName -> PluginConfigArgs { pluginConfigArgsName, ..} ) <$> f pluginConfigArgsName
{-# INLINE pluginConfigArgsNameL #-}

-- | 'pluginConfigArgsDescription' Lens
pluginConfigArgsDescriptionL :: Lens_' PluginConfigArgs (Text)
pluginConfigArgsDescriptionL f PluginConfigArgs{..} = (\pluginConfigArgsDescription -> PluginConfigArgs { pluginConfigArgsDescription, ..} ) <$> f pluginConfigArgsDescription
{-# INLINE pluginConfigArgsDescriptionL #-}

-- | 'pluginConfigArgsSettable' Lens
pluginConfigArgsSettableL :: Lens_' PluginConfigArgs ([Text])
pluginConfigArgsSettableL f PluginConfigArgs{..} = (\pluginConfigArgsSettable -> PluginConfigArgs { pluginConfigArgsSettable, ..} ) <$> f pluginConfigArgsSettable
{-# INLINE pluginConfigArgsSettableL #-}

-- | 'pluginConfigArgsValue' Lens
pluginConfigArgsValueL :: Lens_' PluginConfigArgs ([Text])
pluginConfigArgsValueL f PluginConfigArgs{..} = (\pluginConfigArgsValue -> PluginConfigArgs { pluginConfigArgsValue, ..} ) <$> f pluginConfigArgsValue
{-# INLINE pluginConfigArgsValueL #-}



-- * PluginConfigInterface

-- | 'pluginConfigInterfaceTypes' Lens
pluginConfigInterfaceTypesL :: Lens_' PluginConfigInterface ([PluginInterfaceType])
pluginConfigInterfaceTypesL f PluginConfigInterface{..} = (\pluginConfigInterfaceTypes -> PluginConfigInterface { pluginConfigInterfaceTypes, ..} ) <$> f pluginConfigInterfaceTypes
{-# INLINE pluginConfigInterfaceTypesL #-}

-- | 'pluginConfigInterfaceSocket' Lens
pluginConfigInterfaceSocketL :: Lens_' PluginConfigInterface (Text)
pluginConfigInterfaceSocketL f PluginConfigInterface{..} = (\pluginConfigInterfaceSocket -> PluginConfigInterface { pluginConfigInterfaceSocket, ..} ) <$> f pluginConfigInterfaceSocket
{-# INLINE pluginConfigInterfaceSocketL #-}



-- * PluginConfigLinux

-- | 'pluginConfigLinuxCapabilities' Lens
pluginConfigLinuxCapabilitiesL :: Lens_' PluginConfigLinux ([Text])
pluginConfigLinuxCapabilitiesL f PluginConfigLinux{..} = (\pluginConfigLinuxCapabilities -> PluginConfigLinux { pluginConfigLinuxCapabilities, ..} ) <$> f pluginConfigLinuxCapabilities
{-# INLINE pluginConfigLinuxCapabilitiesL #-}

-- | 'pluginConfigLinuxAllowAllDevices' Lens
pluginConfigLinuxAllowAllDevicesL :: Lens_' PluginConfigLinux (Bool)
pluginConfigLinuxAllowAllDevicesL f PluginConfigLinux{..} = (\pluginConfigLinuxAllowAllDevices -> PluginConfigLinux { pluginConfigLinuxAllowAllDevices, ..} ) <$> f pluginConfigLinuxAllowAllDevices
{-# INLINE pluginConfigLinuxAllowAllDevicesL #-}

-- | 'pluginConfigLinuxDevices' Lens
pluginConfigLinuxDevicesL :: Lens_' PluginConfigLinux ([PluginDevice])
pluginConfigLinuxDevicesL f PluginConfigLinux{..} = (\pluginConfigLinuxDevices -> PluginConfigLinux { pluginConfigLinuxDevices, ..} ) <$> f pluginConfigLinuxDevices
{-# INLINE pluginConfigLinuxDevicesL #-}



-- * PluginConfigNetwork

-- | 'pluginConfigNetworkType' Lens
pluginConfigNetworkTypeL :: Lens_' PluginConfigNetwork (Text)
pluginConfigNetworkTypeL f PluginConfigNetwork{..} = (\pluginConfigNetworkType -> PluginConfigNetwork { pluginConfigNetworkType, ..} ) <$> f pluginConfigNetworkType
{-# INLINE pluginConfigNetworkTypeL #-}



-- * PluginConfigRootfs

-- | 'pluginConfigRootfsType' Lens
pluginConfigRootfsTypeL :: Lens_' PluginConfigRootfs (Maybe Text)
pluginConfigRootfsTypeL f PluginConfigRootfs{..} = (\pluginConfigRootfsType -> PluginConfigRootfs { pluginConfigRootfsType, ..} ) <$> f pluginConfigRootfsType
{-# INLINE pluginConfigRootfsTypeL #-}

-- | 'pluginConfigRootfsDiffIds' Lens
pluginConfigRootfsDiffIdsL :: Lens_' PluginConfigRootfs (Maybe [Text])
pluginConfigRootfsDiffIdsL f PluginConfigRootfs{..} = (\pluginConfigRootfsDiffIds -> PluginConfigRootfs { pluginConfigRootfsDiffIds, ..} ) <$> f pluginConfigRootfsDiffIds
{-# INLINE pluginConfigRootfsDiffIdsL #-}



-- * PluginConfigUser

-- | 'pluginConfigUserUid' Lens
pluginConfigUserUidL :: Lens_' PluginConfigUser (Maybe Int)
pluginConfigUserUidL f PluginConfigUser{..} = (\pluginConfigUserUid -> PluginConfigUser { pluginConfigUserUid, ..} ) <$> f pluginConfigUserUid
{-# INLINE pluginConfigUserUidL #-}

-- | 'pluginConfigUserGid' Lens
pluginConfigUserGidL :: Lens_' PluginConfigUser (Maybe Int)
pluginConfigUserGidL f PluginConfigUser{..} = (\pluginConfigUserGid -> PluginConfigUser { pluginConfigUserGid, ..} ) <$> f pluginConfigUserGid
{-# INLINE pluginConfigUserGidL #-}



-- * PluginDevice

-- | 'pluginDeviceName' Lens
pluginDeviceNameL :: Lens_' PluginDevice (Text)
pluginDeviceNameL f PluginDevice{..} = (\pluginDeviceName -> PluginDevice { pluginDeviceName, ..} ) <$> f pluginDeviceName
{-# INLINE pluginDeviceNameL #-}

-- | 'pluginDeviceDescription' Lens
pluginDeviceDescriptionL :: Lens_' PluginDevice (Text)
pluginDeviceDescriptionL f PluginDevice{..} = (\pluginDeviceDescription -> PluginDevice { pluginDeviceDescription, ..} ) <$> f pluginDeviceDescription
{-# INLINE pluginDeviceDescriptionL #-}

-- | 'pluginDeviceSettable' Lens
pluginDeviceSettableL :: Lens_' PluginDevice ([Text])
pluginDeviceSettableL f PluginDevice{..} = (\pluginDeviceSettable -> PluginDevice { pluginDeviceSettable, ..} ) <$> f pluginDeviceSettable
{-# INLINE pluginDeviceSettableL #-}

-- | 'pluginDevicePath' Lens
pluginDevicePathL :: Lens_' PluginDevice (Text)
pluginDevicePathL f PluginDevice{..} = (\pluginDevicePath -> PluginDevice { pluginDevicePath, ..} ) <$> f pluginDevicePath
{-# INLINE pluginDevicePathL #-}



-- * PluginEnv

-- | 'pluginEnvName' Lens
pluginEnvNameL :: Lens_' PluginEnv (Text)
pluginEnvNameL f PluginEnv{..} = (\pluginEnvName -> PluginEnv { pluginEnvName, ..} ) <$> f pluginEnvName
{-# INLINE pluginEnvNameL #-}

-- | 'pluginEnvDescription' Lens
pluginEnvDescriptionL :: Lens_' PluginEnv (Text)
pluginEnvDescriptionL f PluginEnv{..} = (\pluginEnvDescription -> PluginEnv { pluginEnvDescription, ..} ) <$> f pluginEnvDescription
{-# INLINE pluginEnvDescriptionL #-}

-- | 'pluginEnvSettable' Lens
pluginEnvSettableL :: Lens_' PluginEnv ([Text])
pluginEnvSettableL f PluginEnv{..} = (\pluginEnvSettable -> PluginEnv { pluginEnvSettable, ..} ) <$> f pluginEnvSettable
{-# INLINE pluginEnvSettableL #-}

-- | 'pluginEnvValue' Lens
pluginEnvValueL :: Lens_' PluginEnv (Text)
pluginEnvValueL f PluginEnv{..} = (\pluginEnvValue -> PluginEnv { pluginEnvValue, ..} ) <$> f pluginEnvValue
{-# INLINE pluginEnvValueL #-}



-- * PluginInterfaceType

-- | 'pluginInterfaceTypePrefix' Lens
pluginInterfaceTypePrefixL :: Lens_' PluginInterfaceType (Text)
pluginInterfaceTypePrefixL f PluginInterfaceType{..} = (\pluginInterfaceTypePrefix -> PluginInterfaceType { pluginInterfaceTypePrefix, ..} ) <$> f pluginInterfaceTypePrefix
{-# INLINE pluginInterfaceTypePrefixL #-}

-- | 'pluginInterfaceTypeCapability' Lens
pluginInterfaceTypeCapabilityL :: Lens_' PluginInterfaceType (Text)
pluginInterfaceTypeCapabilityL f PluginInterfaceType{..} = (\pluginInterfaceTypeCapability -> PluginInterfaceType { pluginInterfaceTypeCapability, ..} ) <$> f pluginInterfaceTypeCapability
{-# INLINE pluginInterfaceTypeCapabilityL #-}

-- | 'pluginInterfaceTypeVersion' Lens
pluginInterfaceTypeVersionL :: Lens_' PluginInterfaceType (Text)
pluginInterfaceTypeVersionL f PluginInterfaceType{..} = (\pluginInterfaceTypeVersion -> PluginInterfaceType { pluginInterfaceTypeVersion, ..} ) <$> f pluginInterfaceTypeVersion
{-# INLINE pluginInterfaceTypeVersionL #-}



-- * PluginMount

-- | 'pluginMountName' Lens
pluginMountNameL :: Lens_' PluginMount (Text)
pluginMountNameL f PluginMount{..} = (\pluginMountName -> PluginMount { pluginMountName, ..} ) <$> f pluginMountName
{-# INLINE pluginMountNameL #-}

-- | 'pluginMountDescription' Lens
pluginMountDescriptionL :: Lens_' PluginMount (Text)
pluginMountDescriptionL f PluginMount{..} = (\pluginMountDescription -> PluginMount { pluginMountDescription, ..} ) <$> f pluginMountDescription
{-# INLINE pluginMountDescriptionL #-}

-- | 'pluginMountSettable' Lens
pluginMountSettableL :: Lens_' PluginMount ([Text])
pluginMountSettableL f PluginMount{..} = (\pluginMountSettable -> PluginMount { pluginMountSettable, ..} ) <$> f pluginMountSettable
{-# INLINE pluginMountSettableL #-}

-- | 'pluginMountSource' Lens
pluginMountSourceL :: Lens_' PluginMount (Text)
pluginMountSourceL f PluginMount{..} = (\pluginMountSource -> PluginMount { pluginMountSource, ..} ) <$> f pluginMountSource
{-# INLINE pluginMountSourceL #-}

-- | 'pluginMountDestination' Lens
pluginMountDestinationL :: Lens_' PluginMount (Text)
pluginMountDestinationL f PluginMount{..} = (\pluginMountDestination -> PluginMount { pluginMountDestination, ..} ) <$> f pluginMountDestination
{-# INLINE pluginMountDestinationL #-}

-- | 'pluginMountType' Lens
pluginMountTypeL :: Lens_' PluginMount (Text)
pluginMountTypeL f PluginMount{..} = (\pluginMountType -> PluginMount { pluginMountType, ..} ) <$> f pluginMountType
{-# INLINE pluginMountTypeL #-}

-- | 'pluginMountOptions' Lens
pluginMountOptionsL :: Lens_' PluginMount ([Text])
pluginMountOptionsL f PluginMount{..} = (\pluginMountOptions -> PluginMount { pluginMountOptions, ..} ) <$> f pluginMountOptions
{-# INLINE pluginMountOptionsL #-}



-- * PluginSettings

-- | 'pluginSettingsMounts' Lens
pluginSettingsMountsL :: Lens_' PluginSettings ([PluginMount])
pluginSettingsMountsL f PluginSettings{..} = (\pluginSettingsMounts -> PluginSettings { pluginSettingsMounts, ..} ) <$> f pluginSettingsMounts
{-# INLINE pluginSettingsMountsL #-}

-- | 'pluginSettingsEnv' Lens
pluginSettingsEnvL :: Lens_' PluginSettings ([Text])
pluginSettingsEnvL f PluginSettings{..} = (\pluginSettingsEnv -> PluginSettings { pluginSettingsEnv, ..} ) <$> f pluginSettingsEnv
{-# INLINE pluginSettingsEnvL #-}

-- | 'pluginSettingsArgs' Lens
pluginSettingsArgsL :: Lens_' PluginSettings ([Text])
pluginSettingsArgsL f PluginSettings{..} = (\pluginSettingsArgs -> PluginSettings { pluginSettingsArgs, ..} ) <$> f pluginSettingsArgs
{-# INLINE pluginSettingsArgsL #-}

-- | 'pluginSettingsDevices' Lens
pluginSettingsDevicesL :: Lens_' PluginSettings ([PluginDevice])
pluginSettingsDevicesL f PluginSettings{..} = (\pluginSettingsDevices -> PluginSettings { pluginSettingsDevices, ..} ) <$> f pluginSettingsDevices
{-# INLINE pluginSettingsDevicesL #-}



-- * Port

-- | 'portIp' Lens
portIpL :: Lens_' Port (Maybe Text)
portIpL f Port{..} = (\portIp -> Port { portIp, ..} ) <$> f portIp
{-# INLINE portIpL #-}

-- | 'portPrivatePort' Lens
portPrivatePortL :: Lens_' Port (Int)
portPrivatePortL f Port{..} = (\portPrivatePort -> Port { portPrivatePort, ..} ) <$> f portPrivatePort
{-# INLINE portPrivatePortL #-}

-- | 'portPublicPort' Lens
portPublicPortL :: Lens_' Port (Maybe Int)
portPublicPortL f Port{..} = (\portPublicPort -> Port { portPublicPort, ..} ) <$> f portPublicPort
{-# INLINE portPublicPortL #-}

-- | 'portType' Lens
portTypeL :: Lens_' Port (E'Type)
portTypeL f Port{..} = (\portType -> Port { portType, ..} ) <$> f portType
{-# INLINE portTypeL #-}



-- * ProcessConfig

-- | 'processConfigPrivileged' Lens
processConfigPrivilegedL :: Lens_' ProcessConfig (Maybe Bool)
processConfigPrivilegedL f ProcessConfig{..} = (\processConfigPrivileged -> ProcessConfig { processConfigPrivileged, ..} ) <$> f processConfigPrivileged
{-# INLINE processConfigPrivilegedL #-}

-- | 'processConfigUser' Lens
processConfigUserL :: Lens_' ProcessConfig (Maybe Text)
processConfigUserL f ProcessConfig{..} = (\processConfigUser -> ProcessConfig { processConfigUser, ..} ) <$> f processConfigUser
{-# INLINE processConfigUserL #-}

-- | 'processConfigTty' Lens
processConfigTtyL :: Lens_' ProcessConfig (Maybe Bool)
processConfigTtyL f ProcessConfig{..} = (\processConfigTty -> ProcessConfig { processConfigTty, ..} ) <$> f processConfigTty
{-# INLINE processConfigTtyL #-}

-- | 'processConfigEntrypoint' Lens
processConfigEntrypointL :: Lens_' ProcessConfig (Maybe Text)
processConfigEntrypointL f ProcessConfig{..} = (\processConfigEntrypoint -> ProcessConfig { processConfigEntrypoint, ..} ) <$> f processConfigEntrypoint
{-# INLINE processConfigEntrypointL #-}

-- | 'processConfigArguments' Lens
processConfigArgumentsL :: Lens_' ProcessConfig (Maybe [Text])
processConfigArgumentsL f ProcessConfig{..} = (\processConfigArguments -> ProcessConfig { processConfigArguments, ..} ) <$> f processConfigArguments
{-# INLINE processConfigArgumentsL #-}



-- * ProgressDetail

-- | 'progressDetailCode' Lens
progressDetailCodeL :: Lens_' ProgressDetail (Maybe Int)
progressDetailCodeL f ProgressDetail{..} = (\progressDetailCode -> ProgressDetail { progressDetailCode, ..} ) <$> f progressDetailCode
{-# INLINE progressDetailCodeL #-}

-- | 'progressDetailMessage' Lens
progressDetailMessageL :: Lens_' ProgressDetail (Maybe Int)
progressDetailMessageL f ProgressDetail{..} = (\progressDetailMessage -> ProgressDetail { progressDetailMessage, ..} ) <$> f progressDetailMessage
{-# INLINE progressDetailMessageL #-}



-- * PushImageInfo

-- | 'pushImageInfoError' Lens
pushImageInfoErrorL :: Lens_' PushImageInfo (Maybe Text)
pushImageInfoErrorL f PushImageInfo{..} = (\pushImageInfoError -> PushImageInfo { pushImageInfoError, ..} ) <$> f pushImageInfoError
{-# INLINE pushImageInfoErrorL #-}

-- | 'pushImageInfoStatus' Lens
pushImageInfoStatusL :: Lens_' PushImageInfo (Maybe Text)
pushImageInfoStatusL f PushImageInfo{..} = (\pushImageInfoStatus -> PushImageInfo { pushImageInfoStatus, ..} ) <$> f pushImageInfoStatus
{-# INLINE pushImageInfoStatusL #-}

-- | 'pushImageInfoProgress' Lens
pushImageInfoProgressL :: Lens_' PushImageInfo (Maybe Text)
pushImageInfoProgressL f PushImageInfo{..} = (\pushImageInfoProgress -> PushImageInfo { pushImageInfoProgress, ..} ) <$> f pushImageInfoProgress
{-# INLINE pushImageInfoProgressL #-}

-- | 'pushImageInfoProgressDetail' Lens
pushImageInfoProgressDetailL :: Lens_' PushImageInfo (Maybe ProgressDetail)
pushImageInfoProgressDetailL f PushImageInfo{..} = (\pushImageInfoProgressDetail -> PushImageInfo { pushImageInfoProgressDetail, ..} ) <$> f pushImageInfoProgressDetail
{-# INLINE pushImageInfoProgressDetailL #-}



-- * Resources

-- | 'resourcesCpuShares' Lens
resourcesCpuSharesL :: Lens_' Resources (Maybe Int)
resourcesCpuSharesL f Resources{..} = (\resourcesCpuShares -> Resources { resourcesCpuShares, ..} ) <$> f resourcesCpuShares
{-# INLINE resourcesCpuSharesL #-}

-- | 'resourcesMemory' Lens
resourcesMemoryL :: Lens_' Resources (Maybe Int)
resourcesMemoryL f Resources{..} = (\resourcesMemory -> Resources { resourcesMemory, ..} ) <$> f resourcesMemory
{-# INLINE resourcesMemoryL #-}

-- | 'resourcesCgroupParent' Lens
resourcesCgroupParentL :: Lens_' Resources (Maybe Text)
resourcesCgroupParentL f Resources{..} = (\resourcesCgroupParent -> Resources { resourcesCgroupParent, ..} ) <$> f resourcesCgroupParent
{-# INLINE resourcesCgroupParentL #-}

-- | 'resourcesBlkioWeight' Lens
resourcesBlkioWeightL :: Lens_' Resources (Maybe Int)
resourcesBlkioWeightL f Resources{..} = (\resourcesBlkioWeight -> Resources { resourcesBlkioWeight, ..} ) <$> f resourcesBlkioWeight
{-# INLINE resourcesBlkioWeightL #-}

-- | 'resourcesBlkioWeightDevice' Lens
resourcesBlkioWeightDeviceL :: Lens_' Resources (Maybe [ResourcesBlkioWeightDevice])
resourcesBlkioWeightDeviceL f Resources{..} = (\resourcesBlkioWeightDevice -> Resources { resourcesBlkioWeightDevice, ..} ) <$> f resourcesBlkioWeightDevice
{-# INLINE resourcesBlkioWeightDeviceL #-}

-- | 'resourcesBlkioDeviceReadBps' Lens
resourcesBlkioDeviceReadBpsL :: Lens_' Resources (Maybe [ThrottleDevice])
resourcesBlkioDeviceReadBpsL f Resources{..} = (\resourcesBlkioDeviceReadBps -> Resources { resourcesBlkioDeviceReadBps, ..} ) <$> f resourcesBlkioDeviceReadBps
{-# INLINE resourcesBlkioDeviceReadBpsL #-}

-- | 'resourcesBlkioDeviceWriteBps' Lens
resourcesBlkioDeviceWriteBpsL :: Lens_' Resources (Maybe [ThrottleDevice])
resourcesBlkioDeviceWriteBpsL f Resources{..} = (\resourcesBlkioDeviceWriteBps -> Resources { resourcesBlkioDeviceWriteBps, ..} ) <$> f resourcesBlkioDeviceWriteBps
{-# INLINE resourcesBlkioDeviceWriteBpsL #-}

-- | 'resourcesBlkioDeviceReadIOps' Lens
resourcesBlkioDeviceReadIOpsL :: Lens_' Resources (Maybe [ThrottleDevice])
resourcesBlkioDeviceReadIOpsL f Resources{..} = (\resourcesBlkioDeviceReadIOps -> Resources { resourcesBlkioDeviceReadIOps, ..} ) <$> f resourcesBlkioDeviceReadIOps
{-# INLINE resourcesBlkioDeviceReadIOpsL #-}

-- | 'resourcesBlkioDeviceWriteIOps' Lens
resourcesBlkioDeviceWriteIOpsL :: Lens_' Resources (Maybe [ThrottleDevice])
resourcesBlkioDeviceWriteIOpsL f Resources{..} = (\resourcesBlkioDeviceWriteIOps -> Resources { resourcesBlkioDeviceWriteIOps, ..} ) <$> f resourcesBlkioDeviceWriteIOps
{-# INLINE resourcesBlkioDeviceWriteIOpsL #-}

-- | 'resourcesCpuPeriod' Lens
resourcesCpuPeriodL :: Lens_' Resources (Maybe Integer)
resourcesCpuPeriodL f Resources{..} = (\resourcesCpuPeriod -> Resources { resourcesCpuPeriod, ..} ) <$> f resourcesCpuPeriod
{-# INLINE resourcesCpuPeriodL #-}

-- | 'resourcesCpuQuota' Lens
resourcesCpuQuotaL :: Lens_' Resources (Maybe Integer)
resourcesCpuQuotaL f Resources{..} = (\resourcesCpuQuota -> Resources { resourcesCpuQuota, ..} ) <$> f resourcesCpuQuota
{-# INLINE resourcesCpuQuotaL #-}

-- | 'resourcesCpuRealtimePeriod' Lens
resourcesCpuRealtimePeriodL :: Lens_' Resources (Maybe Integer)
resourcesCpuRealtimePeriodL f Resources{..} = (\resourcesCpuRealtimePeriod -> Resources { resourcesCpuRealtimePeriod, ..} ) <$> f resourcesCpuRealtimePeriod
{-# INLINE resourcesCpuRealtimePeriodL #-}

-- | 'resourcesCpuRealtimeRuntime' Lens
resourcesCpuRealtimeRuntimeL :: Lens_' Resources (Maybe Integer)
resourcesCpuRealtimeRuntimeL f Resources{..} = (\resourcesCpuRealtimeRuntime -> Resources { resourcesCpuRealtimeRuntime, ..} ) <$> f resourcesCpuRealtimeRuntime
{-# INLINE resourcesCpuRealtimeRuntimeL #-}

-- | 'resourcesCpusetCpus' Lens
resourcesCpusetCpusL :: Lens_' Resources (Maybe Text)
resourcesCpusetCpusL f Resources{..} = (\resourcesCpusetCpus -> Resources { resourcesCpusetCpus, ..} ) <$> f resourcesCpusetCpus
{-# INLINE resourcesCpusetCpusL #-}

-- | 'resourcesCpusetMems' Lens
resourcesCpusetMemsL :: Lens_' Resources (Maybe Text)
resourcesCpusetMemsL f Resources{..} = (\resourcesCpusetMems -> Resources { resourcesCpusetMems, ..} ) <$> f resourcesCpusetMems
{-# INLINE resourcesCpusetMemsL #-}

-- | 'resourcesDevices' Lens
resourcesDevicesL :: Lens_' Resources (Maybe [DeviceMapping])
resourcesDevicesL f Resources{..} = (\resourcesDevices -> Resources { resourcesDevices, ..} ) <$> f resourcesDevices
{-# INLINE resourcesDevicesL #-}

-- | 'resourcesDeviceCgroupRules' Lens
resourcesDeviceCgroupRulesL :: Lens_' Resources (Maybe [Text])
resourcesDeviceCgroupRulesL f Resources{..} = (\resourcesDeviceCgroupRules -> Resources { resourcesDeviceCgroupRules, ..} ) <$> f resourcesDeviceCgroupRules
{-# INLINE resourcesDeviceCgroupRulesL #-}

-- | 'resourcesDiskQuota' Lens
resourcesDiskQuotaL :: Lens_' Resources (Maybe Integer)
resourcesDiskQuotaL f Resources{..} = (\resourcesDiskQuota -> Resources { resourcesDiskQuota, ..} ) <$> f resourcesDiskQuota
{-# INLINE resourcesDiskQuotaL #-}

-- | 'resourcesKernelMemory' Lens
resourcesKernelMemoryL :: Lens_' Resources (Maybe Integer)
resourcesKernelMemoryL f Resources{..} = (\resourcesKernelMemory -> Resources { resourcesKernelMemory, ..} ) <$> f resourcesKernelMemory
{-# INLINE resourcesKernelMemoryL #-}

-- | 'resourcesMemoryReservation' Lens
resourcesMemoryReservationL :: Lens_' Resources (Maybe Integer)
resourcesMemoryReservationL f Resources{..} = (\resourcesMemoryReservation -> Resources { resourcesMemoryReservation, ..} ) <$> f resourcesMemoryReservation
{-# INLINE resourcesMemoryReservationL #-}

-- | 'resourcesMemorySwap' Lens
resourcesMemorySwapL :: Lens_' Resources (Maybe Integer)
resourcesMemorySwapL f Resources{..} = (\resourcesMemorySwap -> Resources { resourcesMemorySwap, ..} ) <$> f resourcesMemorySwap
{-# INLINE resourcesMemorySwapL #-}

-- | 'resourcesMemorySwappiness' Lens
resourcesMemorySwappinessL :: Lens_' Resources (Maybe Integer)
resourcesMemorySwappinessL f Resources{..} = (\resourcesMemorySwappiness -> Resources { resourcesMemorySwappiness, ..} ) <$> f resourcesMemorySwappiness
{-# INLINE resourcesMemorySwappinessL #-}

-- | 'resourcesNanoCpUs' Lens
resourcesNanoCpUsL :: Lens_' Resources (Maybe Integer)
resourcesNanoCpUsL f Resources{..} = (\resourcesNanoCpUs -> Resources { resourcesNanoCpUs, ..} ) <$> f resourcesNanoCpUs
{-# INLINE resourcesNanoCpUsL #-}

-- | 'resourcesOomKillDisable' Lens
resourcesOomKillDisableL :: Lens_' Resources (Maybe Bool)
resourcesOomKillDisableL f Resources{..} = (\resourcesOomKillDisable -> Resources { resourcesOomKillDisable, ..} ) <$> f resourcesOomKillDisable
{-# INLINE resourcesOomKillDisableL #-}

-- | 'resourcesPidsLimit' Lens
resourcesPidsLimitL :: Lens_' Resources (Maybe Integer)
resourcesPidsLimitL f Resources{..} = (\resourcesPidsLimit -> Resources { resourcesPidsLimit, ..} ) <$> f resourcesPidsLimit
{-# INLINE resourcesPidsLimitL #-}

-- | 'resourcesUlimits' Lens
resourcesUlimitsL :: Lens_' Resources (Maybe [ResourcesUlimits])
resourcesUlimitsL f Resources{..} = (\resourcesUlimits -> Resources { resourcesUlimits, ..} ) <$> f resourcesUlimits
{-# INLINE resourcesUlimitsL #-}

-- | 'resourcesCpuCount' Lens
resourcesCpuCountL :: Lens_' Resources (Maybe Integer)
resourcesCpuCountL f Resources{..} = (\resourcesCpuCount -> Resources { resourcesCpuCount, ..} ) <$> f resourcesCpuCount
{-# INLINE resourcesCpuCountL #-}

-- | 'resourcesCpuPercent' Lens
resourcesCpuPercentL :: Lens_' Resources (Maybe Integer)
resourcesCpuPercentL f Resources{..} = (\resourcesCpuPercent -> Resources { resourcesCpuPercent, ..} ) <$> f resourcesCpuPercent
{-# INLINE resourcesCpuPercentL #-}

-- | 'resourcesIoMaximumIOps' Lens
resourcesIoMaximumIOpsL :: Lens_' Resources (Maybe Integer)
resourcesIoMaximumIOpsL f Resources{..} = (\resourcesIoMaximumIOps -> Resources { resourcesIoMaximumIOps, ..} ) <$> f resourcesIoMaximumIOps
{-# INLINE resourcesIoMaximumIOpsL #-}

-- | 'resourcesIoMaximumBandwidth' Lens
resourcesIoMaximumBandwidthL :: Lens_' Resources (Maybe Integer)
resourcesIoMaximumBandwidthL f Resources{..} = (\resourcesIoMaximumBandwidth -> Resources { resourcesIoMaximumBandwidth, ..} ) <$> f resourcesIoMaximumBandwidth
{-# INLINE resourcesIoMaximumBandwidthL #-}



-- * ResourcesBlkioWeightDevice

-- | 'resourcesBlkioWeightDevicePath' Lens
resourcesBlkioWeightDevicePathL :: Lens_' ResourcesBlkioWeightDevice (Maybe Text)
resourcesBlkioWeightDevicePathL f ResourcesBlkioWeightDevice{..} = (\resourcesBlkioWeightDevicePath -> ResourcesBlkioWeightDevice { resourcesBlkioWeightDevicePath, ..} ) <$> f resourcesBlkioWeightDevicePath
{-# INLINE resourcesBlkioWeightDevicePathL #-}

-- | 'resourcesBlkioWeightDeviceWeight' Lens
resourcesBlkioWeightDeviceWeightL :: Lens_' ResourcesBlkioWeightDevice (Maybe Int)
resourcesBlkioWeightDeviceWeightL f ResourcesBlkioWeightDevice{..} = (\resourcesBlkioWeightDeviceWeight -> ResourcesBlkioWeightDevice { resourcesBlkioWeightDeviceWeight, ..} ) <$> f resourcesBlkioWeightDeviceWeight
{-# INLINE resourcesBlkioWeightDeviceWeightL #-}



-- * ResourcesUlimits

-- | 'resourcesUlimitsName' Lens
resourcesUlimitsNameL :: Lens_' ResourcesUlimits (Maybe Text)
resourcesUlimitsNameL f ResourcesUlimits{..} = (\resourcesUlimitsName -> ResourcesUlimits { resourcesUlimitsName, ..} ) <$> f resourcesUlimitsName
{-# INLINE resourcesUlimitsNameL #-}

-- | 'resourcesUlimitsSoft' Lens
resourcesUlimitsSoftL :: Lens_' ResourcesUlimits (Maybe Int)
resourcesUlimitsSoftL f ResourcesUlimits{..} = (\resourcesUlimitsSoft -> ResourcesUlimits { resourcesUlimitsSoft, ..} ) <$> f resourcesUlimitsSoft
{-# INLINE resourcesUlimitsSoftL #-}

-- | 'resourcesUlimitsHard' Lens
resourcesUlimitsHardL :: Lens_' ResourcesUlimits (Maybe Int)
resourcesUlimitsHardL f ResourcesUlimits{..} = (\resourcesUlimitsHard -> ResourcesUlimits { resourcesUlimitsHard, ..} ) <$> f resourcesUlimitsHard
{-# INLINE resourcesUlimitsHardL #-}



-- * RestartPolicy

-- | 'restartPolicyName' Lens
restartPolicyNameL :: Lens_' RestartPolicy (Maybe E'Name)
restartPolicyNameL f RestartPolicy{..} = (\restartPolicyName -> RestartPolicy { restartPolicyName, ..} ) <$> f restartPolicyName
{-# INLINE restartPolicyNameL #-}

-- | 'restartPolicyMaximumRetryCount' Lens
restartPolicyMaximumRetryCountL :: Lens_' RestartPolicy (Maybe Int)
restartPolicyMaximumRetryCountL f RestartPolicy{..} = (\restartPolicyMaximumRetryCount -> RestartPolicy { restartPolicyMaximumRetryCount, ..} ) <$> f restartPolicyMaximumRetryCount
{-# INLINE restartPolicyMaximumRetryCountL #-}



-- * Secret

-- | 'secretId' Lens
secretIdL :: Lens_' Secret (Maybe Text)
secretIdL f Secret{..} = (\secretId -> Secret { secretId, ..} ) <$> f secretId
{-# INLINE secretIdL #-}

-- | 'secretVersion' Lens
secretVersionL :: Lens_' Secret (Maybe ObjectVersion)
secretVersionL f Secret{..} = (\secretVersion -> Secret { secretVersion, ..} ) <$> f secretVersion
{-# INLINE secretVersionL #-}

-- | 'secretCreatedAt' Lens
secretCreatedAtL :: Lens_' Secret (Maybe Text)
secretCreatedAtL f Secret{..} = (\secretCreatedAt -> Secret { secretCreatedAt, ..} ) <$> f secretCreatedAt
{-# INLINE secretCreatedAtL #-}

-- | 'secretUpdatedAt' Lens
secretUpdatedAtL :: Lens_' Secret (Maybe Text)
secretUpdatedAtL f Secret{..} = (\secretUpdatedAt -> Secret { secretUpdatedAt, ..} ) <$> f secretUpdatedAt
{-# INLINE secretUpdatedAtL #-}

-- | 'secretSpec' Lens
secretSpecL :: Lens_' Secret (Maybe SecretSpec)
secretSpecL f Secret{..} = (\secretSpec -> Secret { secretSpec, ..} ) <$> f secretSpec
{-# INLINE secretSpecL #-}



-- * SecretSpec

-- | 'secretSpecName' Lens
secretSpecNameL :: Lens_' SecretSpec (Maybe Text)
secretSpecNameL f SecretSpec{..} = (\secretSpecName -> SecretSpec { secretSpecName, ..} ) <$> f secretSpecName
{-# INLINE secretSpecNameL #-}

-- | 'secretSpecLabels' Lens
secretSpecLabelsL :: Lens_' SecretSpec (Maybe (Map.Map String Text))
secretSpecLabelsL f SecretSpec{..} = (\secretSpecLabels -> SecretSpec { secretSpecLabels, ..} ) <$> f secretSpecLabels
{-# INLINE secretSpecLabelsL #-}

-- | 'secretSpecData' Lens
secretSpecDataL :: Lens_' SecretSpec (Maybe [Text])
secretSpecDataL f SecretSpec{..} = (\secretSpecData -> SecretSpec { secretSpecData, ..} ) <$> f secretSpecData
{-# INLINE secretSpecDataL #-}



-- * Service

-- | 'serviceId' Lens
serviceIdL :: Lens_' Service (Maybe Text)
serviceIdL f Service{..} = (\serviceId -> Service { serviceId, ..} ) <$> f serviceId
{-# INLINE serviceIdL #-}

-- | 'serviceVersion' Lens
serviceVersionL :: Lens_' Service (Maybe ObjectVersion)
serviceVersionL f Service{..} = (\serviceVersion -> Service { serviceVersion, ..} ) <$> f serviceVersion
{-# INLINE serviceVersionL #-}

-- | 'serviceCreatedAt' Lens
serviceCreatedAtL :: Lens_' Service (Maybe Text)
serviceCreatedAtL f Service{..} = (\serviceCreatedAt -> Service { serviceCreatedAt, ..} ) <$> f serviceCreatedAt
{-# INLINE serviceCreatedAtL #-}

-- | 'serviceUpdatedAt' Lens
serviceUpdatedAtL :: Lens_' Service (Maybe Text)
serviceUpdatedAtL f Service{..} = (\serviceUpdatedAt -> Service { serviceUpdatedAt, ..} ) <$> f serviceUpdatedAt
{-# INLINE serviceUpdatedAtL #-}

-- | 'serviceSpec' Lens
serviceSpecL :: Lens_' Service (Maybe ServiceSpec)
serviceSpecL f Service{..} = (\serviceSpec -> Service { serviceSpec, ..} ) <$> f serviceSpec
{-# INLINE serviceSpecL #-}

-- | 'serviceEndpoint' Lens
serviceEndpointL :: Lens_' Service (Maybe ServiceEndpoint)
serviceEndpointL f Service{..} = (\serviceEndpoint -> Service { serviceEndpoint, ..} ) <$> f serviceEndpoint
{-# INLINE serviceEndpointL #-}

-- | 'serviceUpdateStatus' Lens
serviceUpdateStatusL :: Lens_' Service (Maybe ServiceUpdateStatus)
serviceUpdateStatusL f Service{..} = (\serviceUpdateStatus -> Service { serviceUpdateStatus, ..} ) <$> f serviceUpdateStatus
{-# INLINE serviceUpdateStatusL #-}



-- * ServiceEndpoint

-- | 'serviceEndpointSpec' Lens
serviceEndpointSpecL :: Lens_' ServiceEndpoint (Maybe EndpointSpec)
serviceEndpointSpecL f ServiceEndpoint{..} = (\serviceEndpointSpec -> ServiceEndpoint { serviceEndpointSpec, ..} ) <$> f serviceEndpointSpec
{-# INLINE serviceEndpointSpecL #-}

-- | 'serviceEndpointPorts' Lens
serviceEndpointPortsL :: Lens_' ServiceEndpoint (Maybe [EndpointPortConfig])
serviceEndpointPortsL f ServiceEndpoint{..} = (\serviceEndpointPorts -> ServiceEndpoint { serviceEndpointPorts, ..} ) <$> f serviceEndpointPorts
{-# INLINE serviceEndpointPortsL #-}

-- | 'serviceEndpointVirtualIPs' Lens
serviceEndpointVirtualIPsL :: Lens_' ServiceEndpoint (Maybe [ServiceEndpointVirtualIPs])
serviceEndpointVirtualIPsL f ServiceEndpoint{..} = (\serviceEndpointVirtualIPs -> ServiceEndpoint { serviceEndpointVirtualIPs, ..} ) <$> f serviceEndpointVirtualIPs
{-# INLINE serviceEndpointVirtualIPsL #-}



-- * ServiceEndpointVirtualIPs

-- | 'serviceEndpointVirtualIPsNetworkId' Lens
serviceEndpointVirtualIPsNetworkIdL :: Lens_' ServiceEndpointVirtualIPs (Maybe Text)
serviceEndpointVirtualIPsNetworkIdL f ServiceEndpointVirtualIPs{..} = (\serviceEndpointVirtualIPsNetworkId -> ServiceEndpointVirtualIPs { serviceEndpointVirtualIPsNetworkId, ..} ) <$> f serviceEndpointVirtualIPsNetworkId
{-# INLINE serviceEndpointVirtualIPsNetworkIdL #-}

-- | 'serviceEndpointVirtualIPsAddr' Lens
serviceEndpointVirtualIPsAddrL :: Lens_' ServiceEndpointVirtualIPs (Maybe Text)
serviceEndpointVirtualIPsAddrL f ServiceEndpointVirtualIPs{..} = (\serviceEndpointVirtualIPsAddr -> ServiceEndpointVirtualIPs { serviceEndpointVirtualIPsAddr, ..} ) <$> f serviceEndpointVirtualIPsAddr
{-# INLINE serviceEndpointVirtualIPsAddrL #-}



-- * ServiceSpec

-- | 'serviceSpecName' Lens
serviceSpecNameL :: Lens_' ServiceSpec (Maybe Text)
serviceSpecNameL f ServiceSpec{..} = (\serviceSpecName -> ServiceSpec { serviceSpecName, ..} ) <$> f serviceSpecName
{-# INLINE serviceSpecNameL #-}

-- | 'serviceSpecLabels' Lens
serviceSpecLabelsL :: Lens_' ServiceSpec (Maybe (Map.Map String Text))
serviceSpecLabelsL f ServiceSpec{..} = (\serviceSpecLabels -> ServiceSpec { serviceSpecLabels, ..} ) <$> f serviceSpecLabels
{-# INLINE serviceSpecLabelsL #-}

-- | 'serviceSpecTaskTemplate' Lens
serviceSpecTaskTemplateL :: Lens_' ServiceSpec (Maybe TaskSpec)
serviceSpecTaskTemplateL f ServiceSpec{..} = (\serviceSpecTaskTemplate -> ServiceSpec { serviceSpecTaskTemplate, ..} ) <$> f serviceSpecTaskTemplate
{-# INLINE serviceSpecTaskTemplateL #-}

-- | 'serviceSpecMode' Lens
serviceSpecModeL :: Lens_' ServiceSpec (Maybe ServiceSpecMode)
serviceSpecModeL f ServiceSpec{..} = (\serviceSpecMode -> ServiceSpec { serviceSpecMode, ..} ) <$> f serviceSpecMode
{-# INLINE serviceSpecModeL #-}

-- | 'serviceSpecUpdateConfig' Lens
serviceSpecUpdateConfigL :: Lens_' ServiceSpec (Maybe ServiceSpecUpdateConfig)
serviceSpecUpdateConfigL f ServiceSpec{..} = (\serviceSpecUpdateConfig -> ServiceSpec { serviceSpecUpdateConfig, ..} ) <$> f serviceSpecUpdateConfig
{-# INLINE serviceSpecUpdateConfigL #-}

-- | 'serviceSpecRollbackConfig' Lens
serviceSpecRollbackConfigL :: Lens_' ServiceSpec (Maybe ServiceSpecRollbackConfig)
serviceSpecRollbackConfigL f ServiceSpec{..} = (\serviceSpecRollbackConfig -> ServiceSpec { serviceSpecRollbackConfig, ..} ) <$> f serviceSpecRollbackConfig
{-# INLINE serviceSpecRollbackConfigL #-}

-- | 'serviceSpecNetworks' Lens
serviceSpecNetworksL :: Lens_' ServiceSpec (Maybe [TaskSpecNetworks])
serviceSpecNetworksL f ServiceSpec{..} = (\serviceSpecNetworks -> ServiceSpec { serviceSpecNetworks, ..} ) <$> f serviceSpecNetworks
{-# INLINE serviceSpecNetworksL #-}

-- | 'serviceSpecEndpointSpec' Lens
serviceSpecEndpointSpecL :: Lens_' ServiceSpec (Maybe EndpointSpec)
serviceSpecEndpointSpecL f ServiceSpec{..} = (\serviceSpecEndpointSpec -> ServiceSpec { serviceSpecEndpointSpec, ..} ) <$> f serviceSpecEndpointSpec
{-# INLINE serviceSpecEndpointSpecL #-}



-- * ServiceSpecMode

-- | 'serviceSpecModeReplicated' Lens
serviceSpecModeReplicatedL :: Lens_' ServiceSpecMode (Maybe ServiceSpecModeReplicated)
serviceSpecModeReplicatedL f ServiceSpecMode{..} = (\serviceSpecModeReplicated -> ServiceSpecMode { serviceSpecModeReplicated, ..} ) <$> f serviceSpecModeReplicated
{-# INLINE serviceSpecModeReplicatedL #-}

-- | 'serviceSpecModeGlobal' Lens
serviceSpecModeGlobalL :: Lens_' ServiceSpecMode (Maybe A.Value)
serviceSpecModeGlobalL f ServiceSpecMode{..} = (\serviceSpecModeGlobal -> ServiceSpecMode { serviceSpecModeGlobal, ..} ) <$> f serviceSpecModeGlobal
{-# INLINE serviceSpecModeGlobalL #-}



-- * ServiceSpecModeReplicated

-- | 'serviceSpecModeReplicatedReplicas' Lens
serviceSpecModeReplicatedReplicasL :: Lens_' ServiceSpecModeReplicated (Maybe Integer)
serviceSpecModeReplicatedReplicasL f ServiceSpecModeReplicated{..} = (\serviceSpecModeReplicatedReplicas -> ServiceSpecModeReplicated { serviceSpecModeReplicatedReplicas, ..} ) <$> f serviceSpecModeReplicatedReplicas
{-# INLINE serviceSpecModeReplicatedReplicasL #-}



-- * ServiceSpecRollbackConfig

-- | 'serviceSpecRollbackConfigParallelism' Lens
serviceSpecRollbackConfigParallelismL :: Lens_' ServiceSpecRollbackConfig (Maybe Integer)
serviceSpecRollbackConfigParallelismL f ServiceSpecRollbackConfig{..} = (\serviceSpecRollbackConfigParallelism -> ServiceSpecRollbackConfig { serviceSpecRollbackConfigParallelism, ..} ) <$> f serviceSpecRollbackConfigParallelism
{-# INLINE serviceSpecRollbackConfigParallelismL #-}

-- | 'serviceSpecRollbackConfigDelay' Lens
serviceSpecRollbackConfigDelayL :: Lens_' ServiceSpecRollbackConfig (Maybe Integer)
serviceSpecRollbackConfigDelayL f ServiceSpecRollbackConfig{..} = (\serviceSpecRollbackConfigDelay -> ServiceSpecRollbackConfig { serviceSpecRollbackConfigDelay, ..} ) <$> f serviceSpecRollbackConfigDelay
{-# INLINE serviceSpecRollbackConfigDelayL #-}

-- | 'serviceSpecRollbackConfigFailureAction' Lens
serviceSpecRollbackConfigFailureActionL :: Lens_' ServiceSpecRollbackConfig (Maybe E'FailureAction2)
serviceSpecRollbackConfigFailureActionL f ServiceSpecRollbackConfig{..} = (\serviceSpecRollbackConfigFailureAction -> ServiceSpecRollbackConfig { serviceSpecRollbackConfigFailureAction, ..} ) <$> f serviceSpecRollbackConfigFailureAction
{-# INLINE serviceSpecRollbackConfigFailureActionL #-}

-- | 'serviceSpecRollbackConfigMonitor' Lens
serviceSpecRollbackConfigMonitorL :: Lens_' ServiceSpecRollbackConfig (Maybe Integer)
serviceSpecRollbackConfigMonitorL f ServiceSpecRollbackConfig{..} = (\serviceSpecRollbackConfigMonitor -> ServiceSpecRollbackConfig { serviceSpecRollbackConfigMonitor, ..} ) <$> f serviceSpecRollbackConfigMonitor
{-# INLINE serviceSpecRollbackConfigMonitorL #-}

-- | 'serviceSpecRollbackConfigMaxFailureRatio' Lens
serviceSpecRollbackConfigMaxFailureRatioL :: Lens_' ServiceSpecRollbackConfig (Maybe Double)
serviceSpecRollbackConfigMaxFailureRatioL f ServiceSpecRollbackConfig{..} = (\serviceSpecRollbackConfigMaxFailureRatio -> ServiceSpecRollbackConfig { serviceSpecRollbackConfigMaxFailureRatio, ..} ) <$> f serviceSpecRollbackConfigMaxFailureRatio
{-# INLINE serviceSpecRollbackConfigMaxFailureRatioL #-}

-- | 'serviceSpecRollbackConfigOrder' Lens
serviceSpecRollbackConfigOrderL :: Lens_' ServiceSpecRollbackConfig (Maybe E'Order)
serviceSpecRollbackConfigOrderL f ServiceSpecRollbackConfig{..} = (\serviceSpecRollbackConfigOrder -> ServiceSpecRollbackConfig { serviceSpecRollbackConfigOrder, ..} ) <$> f serviceSpecRollbackConfigOrder
{-# INLINE serviceSpecRollbackConfigOrderL #-}



-- * ServiceSpecUpdateConfig

-- | 'serviceSpecUpdateConfigParallelism' Lens
serviceSpecUpdateConfigParallelismL :: Lens_' ServiceSpecUpdateConfig (Maybe Integer)
serviceSpecUpdateConfigParallelismL f ServiceSpecUpdateConfig{..} = (\serviceSpecUpdateConfigParallelism -> ServiceSpecUpdateConfig { serviceSpecUpdateConfigParallelism, ..} ) <$> f serviceSpecUpdateConfigParallelism
{-# INLINE serviceSpecUpdateConfigParallelismL #-}

-- | 'serviceSpecUpdateConfigDelay' Lens
serviceSpecUpdateConfigDelayL :: Lens_' ServiceSpecUpdateConfig (Maybe Integer)
serviceSpecUpdateConfigDelayL f ServiceSpecUpdateConfig{..} = (\serviceSpecUpdateConfigDelay -> ServiceSpecUpdateConfig { serviceSpecUpdateConfigDelay, ..} ) <$> f serviceSpecUpdateConfigDelay
{-# INLINE serviceSpecUpdateConfigDelayL #-}

-- | 'serviceSpecUpdateConfigFailureAction' Lens
serviceSpecUpdateConfigFailureActionL :: Lens_' ServiceSpecUpdateConfig (Maybe E'FailureAction)
serviceSpecUpdateConfigFailureActionL f ServiceSpecUpdateConfig{..} = (\serviceSpecUpdateConfigFailureAction -> ServiceSpecUpdateConfig { serviceSpecUpdateConfigFailureAction, ..} ) <$> f serviceSpecUpdateConfigFailureAction
{-# INLINE serviceSpecUpdateConfigFailureActionL #-}

-- | 'serviceSpecUpdateConfigMonitor' Lens
serviceSpecUpdateConfigMonitorL :: Lens_' ServiceSpecUpdateConfig (Maybe Integer)
serviceSpecUpdateConfigMonitorL f ServiceSpecUpdateConfig{..} = (\serviceSpecUpdateConfigMonitor -> ServiceSpecUpdateConfig { serviceSpecUpdateConfigMonitor, ..} ) <$> f serviceSpecUpdateConfigMonitor
{-# INLINE serviceSpecUpdateConfigMonitorL #-}

-- | 'serviceSpecUpdateConfigMaxFailureRatio' Lens
serviceSpecUpdateConfigMaxFailureRatioL :: Lens_' ServiceSpecUpdateConfig (Maybe Double)
serviceSpecUpdateConfigMaxFailureRatioL f ServiceSpecUpdateConfig{..} = (\serviceSpecUpdateConfigMaxFailureRatio -> ServiceSpecUpdateConfig { serviceSpecUpdateConfigMaxFailureRatio, ..} ) <$> f serviceSpecUpdateConfigMaxFailureRatio
{-# INLINE serviceSpecUpdateConfigMaxFailureRatioL #-}

-- | 'serviceSpecUpdateConfigOrder' Lens
serviceSpecUpdateConfigOrderL :: Lens_' ServiceSpecUpdateConfig (Maybe E'Order)
serviceSpecUpdateConfigOrderL f ServiceSpecUpdateConfig{..} = (\serviceSpecUpdateConfigOrder -> ServiceSpecUpdateConfig { serviceSpecUpdateConfigOrder, ..} ) <$> f serviceSpecUpdateConfigOrder
{-# INLINE serviceSpecUpdateConfigOrderL #-}



-- * ServiceUpdateResponse

-- | 'serviceUpdateResponseWarnings' Lens
serviceUpdateResponseWarningsL :: Lens_' ServiceUpdateResponse (Maybe [Text])
serviceUpdateResponseWarningsL f ServiceUpdateResponse{..} = (\serviceUpdateResponseWarnings -> ServiceUpdateResponse { serviceUpdateResponseWarnings, ..} ) <$> f serviceUpdateResponseWarnings
{-# INLINE serviceUpdateResponseWarningsL #-}



-- * ServiceUpdateStatus

-- | 'serviceUpdateStatusState' Lens
serviceUpdateStatusStateL :: Lens_' ServiceUpdateStatus (Maybe E'State)
serviceUpdateStatusStateL f ServiceUpdateStatus{..} = (\serviceUpdateStatusState -> ServiceUpdateStatus { serviceUpdateStatusState, ..} ) <$> f serviceUpdateStatusState
{-# INLINE serviceUpdateStatusStateL #-}

-- | 'serviceUpdateStatusStartedAt' Lens
serviceUpdateStatusStartedAtL :: Lens_' ServiceUpdateStatus (Maybe Text)
serviceUpdateStatusStartedAtL f ServiceUpdateStatus{..} = (\serviceUpdateStatusStartedAt -> ServiceUpdateStatus { serviceUpdateStatusStartedAt, ..} ) <$> f serviceUpdateStatusStartedAt
{-# INLINE serviceUpdateStatusStartedAtL #-}

-- | 'serviceUpdateStatusCompletedAt' Lens
serviceUpdateStatusCompletedAtL :: Lens_' ServiceUpdateStatus (Maybe Text)
serviceUpdateStatusCompletedAtL f ServiceUpdateStatus{..} = (\serviceUpdateStatusCompletedAt -> ServiceUpdateStatus { serviceUpdateStatusCompletedAt, ..} ) <$> f serviceUpdateStatusCompletedAt
{-# INLINE serviceUpdateStatusCompletedAtL #-}

-- | 'serviceUpdateStatusMessage' Lens
serviceUpdateStatusMessageL :: Lens_' ServiceUpdateStatus (Maybe Text)
serviceUpdateStatusMessageL f ServiceUpdateStatus{..} = (\serviceUpdateStatusMessage -> ServiceUpdateStatus { serviceUpdateStatusMessage, ..} ) <$> f serviceUpdateStatusMessage
{-# INLINE serviceUpdateStatusMessageL #-}



-- * SwarmSpec

-- | 'swarmSpecName' Lens
swarmSpecNameL :: Lens_' SwarmSpec (Maybe Text)
swarmSpecNameL f SwarmSpec{..} = (\swarmSpecName -> SwarmSpec { swarmSpecName, ..} ) <$> f swarmSpecName
{-# INLINE swarmSpecNameL #-}

-- | 'swarmSpecLabels' Lens
swarmSpecLabelsL :: Lens_' SwarmSpec (Maybe (Map.Map String Text))
swarmSpecLabelsL f SwarmSpec{..} = (\swarmSpecLabels -> SwarmSpec { swarmSpecLabels, ..} ) <$> f swarmSpecLabels
{-# INLINE swarmSpecLabelsL #-}

-- | 'swarmSpecOrchestration' Lens
swarmSpecOrchestrationL :: Lens_' SwarmSpec (Maybe SwarmSpecOrchestration)
swarmSpecOrchestrationL f SwarmSpec{..} = (\swarmSpecOrchestration -> SwarmSpec { swarmSpecOrchestration, ..} ) <$> f swarmSpecOrchestration
{-# INLINE swarmSpecOrchestrationL #-}

-- | 'swarmSpecRaft' Lens
swarmSpecRaftL :: Lens_' SwarmSpec (Maybe SwarmSpecRaft)
swarmSpecRaftL f SwarmSpec{..} = (\swarmSpecRaft -> SwarmSpec { swarmSpecRaft, ..} ) <$> f swarmSpecRaft
{-# INLINE swarmSpecRaftL #-}

-- | 'swarmSpecDispatcher' Lens
swarmSpecDispatcherL :: Lens_' SwarmSpec (Maybe SwarmSpecDispatcher)
swarmSpecDispatcherL f SwarmSpec{..} = (\swarmSpecDispatcher -> SwarmSpec { swarmSpecDispatcher, ..} ) <$> f swarmSpecDispatcher
{-# INLINE swarmSpecDispatcherL #-}

-- | 'swarmSpecCaConfig' Lens
swarmSpecCaConfigL :: Lens_' SwarmSpec (Maybe SwarmSpecCAConfig)
swarmSpecCaConfigL f SwarmSpec{..} = (\swarmSpecCaConfig -> SwarmSpec { swarmSpecCaConfig, ..} ) <$> f swarmSpecCaConfig
{-# INLINE swarmSpecCaConfigL #-}

-- | 'swarmSpecEncryptionConfig' Lens
swarmSpecEncryptionConfigL :: Lens_' SwarmSpec (Maybe SwarmSpecEncryptionConfig)
swarmSpecEncryptionConfigL f SwarmSpec{..} = (\swarmSpecEncryptionConfig -> SwarmSpec { swarmSpecEncryptionConfig, ..} ) <$> f swarmSpecEncryptionConfig
{-# INLINE swarmSpecEncryptionConfigL #-}

-- | 'swarmSpecTaskDefaults' Lens
swarmSpecTaskDefaultsL :: Lens_' SwarmSpec (Maybe SwarmSpecTaskDefaults)
swarmSpecTaskDefaultsL f SwarmSpec{..} = (\swarmSpecTaskDefaults -> SwarmSpec { swarmSpecTaskDefaults, ..} ) <$> f swarmSpecTaskDefaults
{-# INLINE swarmSpecTaskDefaultsL #-}



-- * SwarmSpecCAConfig

-- | 'swarmSpecCAConfigNodeCertExpiry' Lens
swarmSpecCAConfigNodeCertExpiryL :: Lens_' SwarmSpecCAConfig (Maybe Integer)
swarmSpecCAConfigNodeCertExpiryL f SwarmSpecCAConfig{..} = (\swarmSpecCAConfigNodeCertExpiry -> SwarmSpecCAConfig { swarmSpecCAConfigNodeCertExpiry, ..} ) <$> f swarmSpecCAConfigNodeCertExpiry
{-# INLINE swarmSpecCAConfigNodeCertExpiryL #-}

-- | 'swarmSpecCAConfigExternalCAs' Lens
swarmSpecCAConfigExternalCAsL :: Lens_' SwarmSpecCAConfig (Maybe [SwarmSpecCAConfigExternalCAs])
swarmSpecCAConfigExternalCAsL f SwarmSpecCAConfig{..} = (\swarmSpecCAConfigExternalCAs -> SwarmSpecCAConfig { swarmSpecCAConfigExternalCAs, ..} ) <$> f swarmSpecCAConfigExternalCAs
{-# INLINE swarmSpecCAConfigExternalCAsL #-}

-- | 'swarmSpecCAConfigSigningCaCert' Lens
swarmSpecCAConfigSigningCaCertL :: Lens_' SwarmSpecCAConfig (Maybe Text)
swarmSpecCAConfigSigningCaCertL f SwarmSpecCAConfig{..} = (\swarmSpecCAConfigSigningCaCert -> SwarmSpecCAConfig { swarmSpecCAConfigSigningCaCert, ..} ) <$> f swarmSpecCAConfigSigningCaCert
{-# INLINE swarmSpecCAConfigSigningCaCertL #-}

-- | 'swarmSpecCAConfigSigningCaKey' Lens
swarmSpecCAConfigSigningCaKeyL :: Lens_' SwarmSpecCAConfig (Maybe Text)
swarmSpecCAConfigSigningCaKeyL f SwarmSpecCAConfig{..} = (\swarmSpecCAConfigSigningCaKey -> SwarmSpecCAConfig { swarmSpecCAConfigSigningCaKey, ..} ) <$> f swarmSpecCAConfigSigningCaKey
{-# INLINE swarmSpecCAConfigSigningCaKeyL #-}

-- | 'swarmSpecCAConfigForceRotate' Lens
swarmSpecCAConfigForceRotateL :: Lens_' SwarmSpecCAConfig (Maybe A.Value)
swarmSpecCAConfigForceRotateL f SwarmSpecCAConfig{..} = (\swarmSpecCAConfigForceRotate -> SwarmSpecCAConfig { swarmSpecCAConfigForceRotate, ..} ) <$> f swarmSpecCAConfigForceRotate
{-# INLINE swarmSpecCAConfigForceRotateL #-}



-- * SwarmSpecCAConfigExternalCAs

-- | 'swarmSpecCAConfigExternalCAsProtocol' Lens
swarmSpecCAConfigExternalCAsProtocolL :: Lens_' SwarmSpecCAConfigExternalCAs (Maybe E'Protocol)
swarmSpecCAConfigExternalCAsProtocolL f SwarmSpecCAConfigExternalCAs{..} = (\swarmSpecCAConfigExternalCAsProtocol -> SwarmSpecCAConfigExternalCAs { swarmSpecCAConfigExternalCAsProtocol, ..} ) <$> f swarmSpecCAConfigExternalCAsProtocol
{-# INLINE swarmSpecCAConfigExternalCAsProtocolL #-}

-- | 'swarmSpecCAConfigExternalCAsUrl' Lens
swarmSpecCAConfigExternalCAsUrlL :: Lens_' SwarmSpecCAConfigExternalCAs (Maybe Text)
swarmSpecCAConfigExternalCAsUrlL f SwarmSpecCAConfigExternalCAs{..} = (\swarmSpecCAConfigExternalCAsUrl -> SwarmSpecCAConfigExternalCAs { swarmSpecCAConfigExternalCAsUrl, ..} ) <$> f swarmSpecCAConfigExternalCAsUrl
{-# INLINE swarmSpecCAConfigExternalCAsUrlL #-}

-- | 'swarmSpecCAConfigExternalCAsOptions' Lens
swarmSpecCAConfigExternalCAsOptionsL :: Lens_' SwarmSpecCAConfigExternalCAs (Maybe (Map.Map String Text))
swarmSpecCAConfigExternalCAsOptionsL f SwarmSpecCAConfigExternalCAs{..} = (\swarmSpecCAConfigExternalCAsOptions -> SwarmSpecCAConfigExternalCAs { swarmSpecCAConfigExternalCAsOptions, ..} ) <$> f swarmSpecCAConfigExternalCAsOptions
{-# INLINE swarmSpecCAConfigExternalCAsOptionsL #-}

-- | 'swarmSpecCAConfigExternalCAsCaCert' Lens
swarmSpecCAConfigExternalCAsCaCertL :: Lens_' SwarmSpecCAConfigExternalCAs (Maybe Text)
swarmSpecCAConfigExternalCAsCaCertL f SwarmSpecCAConfigExternalCAs{..} = (\swarmSpecCAConfigExternalCAsCaCert -> SwarmSpecCAConfigExternalCAs { swarmSpecCAConfigExternalCAsCaCert, ..} ) <$> f swarmSpecCAConfigExternalCAsCaCert
{-# INLINE swarmSpecCAConfigExternalCAsCaCertL #-}



-- * SwarmSpecDispatcher

-- | 'swarmSpecDispatcherHeartbeatPeriod' Lens
swarmSpecDispatcherHeartbeatPeriodL :: Lens_' SwarmSpecDispatcher (Maybe Integer)
swarmSpecDispatcherHeartbeatPeriodL f SwarmSpecDispatcher{..} = (\swarmSpecDispatcherHeartbeatPeriod -> SwarmSpecDispatcher { swarmSpecDispatcherHeartbeatPeriod, ..} ) <$> f swarmSpecDispatcherHeartbeatPeriod
{-# INLINE swarmSpecDispatcherHeartbeatPeriodL #-}



-- * SwarmSpecEncryptionConfig

-- | 'swarmSpecEncryptionConfigAutoLockManagers' Lens
swarmSpecEncryptionConfigAutoLockManagersL :: Lens_' SwarmSpecEncryptionConfig (Maybe Bool)
swarmSpecEncryptionConfigAutoLockManagersL f SwarmSpecEncryptionConfig{..} = (\swarmSpecEncryptionConfigAutoLockManagers -> SwarmSpecEncryptionConfig { swarmSpecEncryptionConfigAutoLockManagers, ..} ) <$> f swarmSpecEncryptionConfigAutoLockManagers
{-# INLINE swarmSpecEncryptionConfigAutoLockManagersL #-}



-- * SwarmSpecOrchestration

-- | 'swarmSpecOrchestrationTaskHistoryRetentionLimit' Lens
swarmSpecOrchestrationTaskHistoryRetentionLimitL :: Lens_' SwarmSpecOrchestration (Maybe Integer)
swarmSpecOrchestrationTaskHistoryRetentionLimitL f SwarmSpecOrchestration{..} = (\swarmSpecOrchestrationTaskHistoryRetentionLimit -> SwarmSpecOrchestration { swarmSpecOrchestrationTaskHistoryRetentionLimit, ..} ) <$> f swarmSpecOrchestrationTaskHistoryRetentionLimit
{-# INLINE swarmSpecOrchestrationTaskHistoryRetentionLimitL #-}



-- * SwarmSpecRaft

-- | 'swarmSpecRaftSnapshotInterval' Lens
swarmSpecRaftSnapshotIntervalL :: Lens_' SwarmSpecRaft (Maybe Integer)
swarmSpecRaftSnapshotIntervalL f SwarmSpecRaft{..} = (\swarmSpecRaftSnapshotInterval -> SwarmSpecRaft { swarmSpecRaftSnapshotInterval, ..} ) <$> f swarmSpecRaftSnapshotInterval
{-# INLINE swarmSpecRaftSnapshotIntervalL #-}

-- | 'swarmSpecRaftKeepOldSnapshots' Lens
swarmSpecRaftKeepOldSnapshotsL :: Lens_' SwarmSpecRaft (Maybe Integer)
swarmSpecRaftKeepOldSnapshotsL f SwarmSpecRaft{..} = (\swarmSpecRaftKeepOldSnapshots -> SwarmSpecRaft { swarmSpecRaftKeepOldSnapshots, ..} ) <$> f swarmSpecRaftKeepOldSnapshots
{-# INLINE swarmSpecRaftKeepOldSnapshotsL #-}

-- | 'swarmSpecRaftLogEntriesForSlowFollowers' Lens
swarmSpecRaftLogEntriesForSlowFollowersL :: Lens_' SwarmSpecRaft (Maybe Integer)
swarmSpecRaftLogEntriesForSlowFollowersL f SwarmSpecRaft{..} = (\swarmSpecRaftLogEntriesForSlowFollowers -> SwarmSpecRaft { swarmSpecRaftLogEntriesForSlowFollowers, ..} ) <$> f swarmSpecRaftLogEntriesForSlowFollowers
{-# INLINE swarmSpecRaftLogEntriesForSlowFollowersL #-}

-- | 'swarmSpecRaftElectionTick' Lens
swarmSpecRaftElectionTickL :: Lens_' SwarmSpecRaft (Maybe Int)
swarmSpecRaftElectionTickL f SwarmSpecRaft{..} = (\swarmSpecRaftElectionTick -> SwarmSpecRaft { swarmSpecRaftElectionTick, ..} ) <$> f swarmSpecRaftElectionTick
{-# INLINE swarmSpecRaftElectionTickL #-}

-- | 'swarmSpecRaftHeartbeatTick' Lens
swarmSpecRaftHeartbeatTickL :: Lens_' SwarmSpecRaft (Maybe Int)
swarmSpecRaftHeartbeatTickL f SwarmSpecRaft{..} = (\swarmSpecRaftHeartbeatTick -> SwarmSpecRaft { swarmSpecRaftHeartbeatTick, ..} ) <$> f swarmSpecRaftHeartbeatTick
{-# INLINE swarmSpecRaftHeartbeatTickL #-}



-- * SwarmSpecTaskDefaults

-- | 'swarmSpecTaskDefaultsLogDriver' Lens
swarmSpecTaskDefaultsLogDriverL :: Lens_' SwarmSpecTaskDefaults (Maybe SwarmSpecTaskDefaultsLogDriver)
swarmSpecTaskDefaultsLogDriverL f SwarmSpecTaskDefaults{..} = (\swarmSpecTaskDefaultsLogDriver -> SwarmSpecTaskDefaults { swarmSpecTaskDefaultsLogDriver, ..} ) <$> f swarmSpecTaskDefaultsLogDriver
{-# INLINE swarmSpecTaskDefaultsLogDriverL #-}



-- * SwarmSpecTaskDefaultsLogDriver

-- | 'swarmSpecTaskDefaultsLogDriverName' Lens
swarmSpecTaskDefaultsLogDriverNameL :: Lens_' SwarmSpecTaskDefaultsLogDriver (Maybe Text)
swarmSpecTaskDefaultsLogDriverNameL f SwarmSpecTaskDefaultsLogDriver{..} = (\swarmSpecTaskDefaultsLogDriverName -> SwarmSpecTaskDefaultsLogDriver { swarmSpecTaskDefaultsLogDriverName, ..} ) <$> f swarmSpecTaskDefaultsLogDriverName
{-# INLINE swarmSpecTaskDefaultsLogDriverNameL #-}

-- | 'swarmSpecTaskDefaultsLogDriverOptions' Lens
swarmSpecTaskDefaultsLogDriverOptionsL :: Lens_' SwarmSpecTaskDefaultsLogDriver (Maybe (Map.Map String Text))
swarmSpecTaskDefaultsLogDriverOptionsL f SwarmSpecTaskDefaultsLogDriver{..} = (\swarmSpecTaskDefaultsLogDriverOptions -> SwarmSpecTaskDefaultsLogDriver { swarmSpecTaskDefaultsLogDriverOptions, ..} ) <$> f swarmSpecTaskDefaultsLogDriverOptions
{-# INLINE swarmSpecTaskDefaultsLogDriverOptionsL #-}



-- * TLSInfo

-- | 'tLSInfoTrustRoot' Lens
tLSInfoTrustRootL :: Lens_' TLSInfo (Maybe Text)
tLSInfoTrustRootL f TLSInfo{..} = (\tLSInfoTrustRoot -> TLSInfo { tLSInfoTrustRoot, ..} ) <$> f tLSInfoTrustRoot
{-# INLINE tLSInfoTrustRootL #-}

-- | 'tLSInfoCertIssuerSubject' Lens
tLSInfoCertIssuerSubjectL :: Lens_' TLSInfo (Maybe Text)
tLSInfoCertIssuerSubjectL f TLSInfo{..} = (\tLSInfoCertIssuerSubject -> TLSInfo { tLSInfoCertIssuerSubject, ..} ) <$> f tLSInfoCertIssuerSubject
{-# INLINE tLSInfoCertIssuerSubjectL #-}

-- | 'tLSInfoCertIssuerPublicKey' Lens
tLSInfoCertIssuerPublicKeyL :: Lens_' TLSInfo (Maybe Text)
tLSInfoCertIssuerPublicKeyL f TLSInfo{..} = (\tLSInfoCertIssuerPublicKey -> TLSInfo { tLSInfoCertIssuerPublicKey, ..} ) <$> f tLSInfoCertIssuerPublicKey
{-# INLINE tLSInfoCertIssuerPublicKeyL #-}



-- * Task

-- | 'taskId' Lens
taskIdL :: Lens_' Task (Maybe Text)
taskIdL f Task{..} = (\taskId -> Task { taskId, ..} ) <$> f taskId
{-# INLINE taskIdL #-}

-- | 'taskVersion' Lens
taskVersionL :: Lens_' Task (Maybe ObjectVersion)
taskVersionL f Task{..} = (\taskVersion -> Task { taskVersion, ..} ) <$> f taskVersion
{-# INLINE taskVersionL #-}

-- | 'taskCreatedAt' Lens
taskCreatedAtL :: Lens_' Task (Maybe Text)
taskCreatedAtL f Task{..} = (\taskCreatedAt -> Task { taskCreatedAt, ..} ) <$> f taskCreatedAt
{-# INLINE taskCreatedAtL #-}

-- | 'taskUpdatedAt' Lens
taskUpdatedAtL :: Lens_' Task (Maybe Text)
taskUpdatedAtL f Task{..} = (\taskUpdatedAt -> Task { taskUpdatedAt, ..} ) <$> f taskUpdatedAt
{-# INLINE taskUpdatedAtL #-}

-- | 'taskName' Lens
taskNameL :: Lens_' Task (Maybe Text)
taskNameL f Task{..} = (\taskName -> Task { taskName, ..} ) <$> f taskName
{-# INLINE taskNameL #-}

-- | 'taskLabels' Lens
taskLabelsL :: Lens_' Task (Maybe (Map.Map String Text))
taskLabelsL f Task{..} = (\taskLabels -> Task { taskLabels, ..} ) <$> f taskLabels
{-# INLINE taskLabelsL #-}

-- | 'taskSpec' Lens
taskSpecL :: Lens_' Task (Maybe TaskSpec)
taskSpecL f Task{..} = (\taskSpec -> Task { taskSpec, ..} ) <$> f taskSpec
{-# INLINE taskSpecL #-}

-- | 'taskServiceId' Lens
taskServiceIdL :: Lens_' Task (Maybe Text)
taskServiceIdL f Task{..} = (\taskServiceId -> Task { taskServiceId, ..} ) <$> f taskServiceId
{-# INLINE taskServiceIdL #-}

-- | 'taskSlot' Lens
taskSlotL :: Lens_' Task (Maybe Int)
taskSlotL f Task{..} = (\taskSlot -> Task { taskSlot, ..} ) <$> f taskSlot
{-# INLINE taskSlotL #-}

-- | 'taskNodeId' Lens
taskNodeIdL :: Lens_' Task (Maybe Text)
taskNodeIdL f Task{..} = (\taskNodeId -> Task { taskNodeId, ..} ) <$> f taskNodeId
{-# INLINE taskNodeIdL #-}

-- | 'taskStatus' Lens
taskStatusL :: Lens_' Task (Maybe TaskStatus)
taskStatusL f Task{..} = (\taskStatus -> Task { taskStatus, ..} ) <$> f taskStatus
{-# INLINE taskStatusL #-}

-- | 'taskDesiredState' Lens
taskDesiredStateL :: Lens_' Task (Maybe TaskState)
taskDesiredStateL f Task{..} = (\taskDesiredState -> Task { taskDesiredState, ..} ) <$> f taskDesiredState
{-# INLINE taskDesiredStateL #-}



-- * TaskSpec

-- | 'taskSpecContainerSpec' Lens
taskSpecContainerSpecL :: Lens_' TaskSpec (Maybe TaskSpecContainerSpec)
taskSpecContainerSpecL f TaskSpec{..} = (\taskSpecContainerSpec -> TaskSpec { taskSpecContainerSpec, ..} ) <$> f taskSpecContainerSpec
{-# INLINE taskSpecContainerSpecL #-}

-- | 'taskSpecResources' Lens
taskSpecResourcesL :: Lens_' TaskSpec (Maybe TaskSpecResources)
taskSpecResourcesL f TaskSpec{..} = (\taskSpecResources -> TaskSpec { taskSpecResources, ..} ) <$> f taskSpecResources
{-# INLINE taskSpecResourcesL #-}

-- | 'taskSpecRestartPolicy' Lens
taskSpecRestartPolicyL :: Lens_' TaskSpec (Maybe TaskSpecRestartPolicy)
taskSpecRestartPolicyL f TaskSpec{..} = (\taskSpecRestartPolicy -> TaskSpec { taskSpecRestartPolicy, ..} ) <$> f taskSpecRestartPolicy
{-# INLINE taskSpecRestartPolicyL #-}

-- | 'taskSpecPlacement' Lens
taskSpecPlacementL :: Lens_' TaskSpec (Maybe TaskSpecPlacement)
taskSpecPlacementL f TaskSpec{..} = (\taskSpecPlacement -> TaskSpec { taskSpecPlacement, ..} ) <$> f taskSpecPlacement
{-# INLINE taskSpecPlacementL #-}

-- | 'taskSpecForceUpdate' Lens
taskSpecForceUpdateL :: Lens_' TaskSpec (Maybe Int)
taskSpecForceUpdateL f TaskSpec{..} = (\taskSpecForceUpdate -> TaskSpec { taskSpecForceUpdate, ..} ) <$> f taskSpecForceUpdate
{-# INLINE taskSpecForceUpdateL #-}

-- | 'taskSpecRuntime' Lens
taskSpecRuntimeL :: Lens_' TaskSpec (Maybe Text)
taskSpecRuntimeL f TaskSpec{..} = (\taskSpecRuntime -> TaskSpec { taskSpecRuntime, ..} ) <$> f taskSpecRuntime
{-# INLINE taskSpecRuntimeL #-}

-- | 'taskSpecNetworks' Lens
taskSpecNetworksL :: Lens_' TaskSpec (Maybe [TaskSpecNetworks])
taskSpecNetworksL f TaskSpec{..} = (\taskSpecNetworks -> TaskSpec { taskSpecNetworks, ..} ) <$> f taskSpecNetworks
{-# INLINE taskSpecNetworksL #-}

-- | 'taskSpecLogDriver' Lens
taskSpecLogDriverL :: Lens_' TaskSpec (Maybe TaskSpecLogDriver)
taskSpecLogDriverL f TaskSpec{..} = (\taskSpecLogDriver -> TaskSpec { taskSpecLogDriver, ..} ) <$> f taskSpecLogDriver
{-# INLINE taskSpecLogDriverL #-}



-- * TaskSpecContainerSpec

-- | 'taskSpecContainerSpecImage' Lens
taskSpecContainerSpecImageL :: Lens_' TaskSpecContainerSpec (Maybe Text)
taskSpecContainerSpecImageL f TaskSpecContainerSpec{..} = (\taskSpecContainerSpecImage -> TaskSpecContainerSpec { taskSpecContainerSpecImage, ..} ) <$> f taskSpecContainerSpecImage
{-# INLINE taskSpecContainerSpecImageL #-}

-- | 'taskSpecContainerSpecLabels' Lens
taskSpecContainerSpecLabelsL :: Lens_' TaskSpecContainerSpec (Maybe (Map.Map String Text))
taskSpecContainerSpecLabelsL f TaskSpecContainerSpec{..} = (\taskSpecContainerSpecLabels -> TaskSpecContainerSpec { taskSpecContainerSpecLabels, ..} ) <$> f taskSpecContainerSpecLabels
{-# INLINE taskSpecContainerSpecLabelsL #-}

-- | 'taskSpecContainerSpecCommand' Lens
taskSpecContainerSpecCommandL :: Lens_' TaskSpecContainerSpec (Maybe [Text])
taskSpecContainerSpecCommandL f TaskSpecContainerSpec{..} = (\taskSpecContainerSpecCommand -> TaskSpecContainerSpec { taskSpecContainerSpecCommand, ..} ) <$> f taskSpecContainerSpecCommand
{-# INLINE taskSpecContainerSpecCommandL #-}

-- | 'taskSpecContainerSpecArgs' Lens
taskSpecContainerSpecArgsL :: Lens_' TaskSpecContainerSpec (Maybe [Text])
taskSpecContainerSpecArgsL f TaskSpecContainerSpec{..} = (\taskSpecContainerSpecArgs -> TaskSpecContainerSpec { taskSpecContainerSpecArgs, ..} ) <$> f taskSpecContainerSpecArgs
{-# INLINE taskSpecContainerSpecArgsL #-}

-- | 'taskSpecContainerSpecHostname' Lens
taskSpecContainerSpecHostnameL :: Lens_' TaskSpecContainerSpec (Maybe Text)
taskSpecContainerSpecHostnameL f TaskSpecContainerSpec{..} = (\taskSpecContainerSpecHostname -> TaskSpecContainerSpec { taskSpecContainerSpecHostname, ..} ) <$> f taskSpecContainerSpecHostname
{-# INLINE taskSpecContainerSpecHostnameL #-}

-- | 'taskSpecContainerSpecEnv' Lens
taskSpecContainerSpecEnvL :: Lens_' TaskSpecContainerSpec (Maybe [Text])
taskSpecContainerSpecEnvL f TaskSpecContainerSpec{..} = (\taskSpecContainerSpecEnv -> TaskSpecContainerSpec { taskSpecContainerSpecEnv, ..} ) <$> f taskSpecContainerSpecEnv
{-# INLINE taskSpecContainerSpecEnvL #-}

-- | 'taskSpecContainerSpecDir' Lens
taskSpecContainerSpecDirL :: Lens_' TaskSpecContainerSpec (Maybe Text)
taskSpecContainerSpecDirL f TaskSpecContainerSpec{..} = (\taskSpecContainerSpecDir -> TaskSpecContainerSpec { taskSpecContainerSpecDir, ..} ) <$> f taskSpecContainerSpecDir
{-# INLINE taskSpecContainerSpecDirL #-}

-- | 'taskSpecContainerSpecUser' Lens
taskSpecContainerSpecUserL :: Lens_' TaskSpecContainerSpec (Maybe Text)
taskSpecContainerSpecUserL f TaskSpecContainerSpec{..} = (\taskSpecContainerSpecUser -> TaskSpecContainerSpec { taskSpecContainerSpecUser, ..} ) <$> f taskSpecContainerSpecUser
{-# INLINE taskSpecContainerSpecUserL #-}

-- | 'taskSpecContainerSpecGroups' Lens
taskSpecContainerSpecGroupsL :: Lens_' TaskSpecContainerSpec (Maybe [Text])
taskSpecContainerSpecGroupsL f TaskSpecContainerSpec{..} = (\taskSpecContainerSpecGroups -> TaskSpecContainerSpec { taskSpecContainerSpecGroups, ..} ) <$> f taskSpecContainerSpecGroups
{-# INLINE taskSpecContainerSpecGroupsL #-}

-- | 'taskSpecContainerSpecPrivileges' Lens
taskSpecContainerSpecPrivilegesL :: Lens_' TaskSpecContainerSpec (Maybe TaskSpecContainerSpecPrivileges)
taskSpecContainerSpecPrivilegesL f TaskSpecContainerSpec{..} = (\taskSpecContainerSpecPrivileges -> TaskSpecContainerSpec { taskSpecContainerSpecPrivileges, ..} ) <$> f taskSpecContainerSpecPrivileges
{-# INLINE taskSpecContainerSpecPrivilegesL #-}

-- | 'taskSpecContainerSpecTty' Lens
taskSpecContainerSpecTtyL :: Lens_' TaskSpecContainerSpec (Maybe Bool)
taskSpecContainerSpecTtyL f TaskSpecContainerSpec{..} = (\taskSpecContainerSpecTty -> TaskSpecContainerSpec { taskSpecContainerSpecTty, ..} ) <$> f taskSpecContainerSpecTty
{-# INLINE taskSpecContainerSpecTtyL #-}

-- | 'taskSpecContainerSpecOpenStdin' Lens
taskSpecContainerSpecOpenStdinL :: Lens_' TaskSpecContainerSpec (Maybe Bool)
taskSpecContainerSpecOpenStdinL f TaskSpecContainerSpec{..} = (\taskSpecContainerSpecOpenStdin -> TaskSpecContainerSpec { taskSpecContainerSpecOpenStdin, ..} ) <$> f taskSpecContainerSpecOpenStdin
{-# INLINE taskSpecContainerSpecOpenStdinL #-}

-- | 'taskSpecContainerSpecReadOnly' Lens
taskSpecContainerSpecReadOnlyL :: Lens_' TaskSpecContainerSpec (Maybe Bool)
taskSpecContainerSpecReadOnlyL f TaskSpecContainerSpec{..} = (\taskSpecContainerSpecReadOnly -> TaskSpecContainerSpec { taskSpecContainerSpecReadOnly, ..} ) <$> f taskSpecContainerSpecReadOnly
{-# INLINE taskSpecContainerSpecReadOnlyL #-}

-- | 'taskSpecContainerSpecMounts' Lens
taskSpecContainerSpecMountsL :: Lens_' TaskSpecContainerSpec (Maybe [Mount])
taskSpecContainerSpecMountsL f TaskSpecContainerSpec{..} = (\taskSpecContainerSpecMounts -> TaskSpecContainerSpec { taskSpecContainerSpecMounts, ..} ) <$> f taskSpecContainerSpecMounts
{-# INLINE taskSpecContainerSpecMountsL #-}

-- | 'taskSpecContainerSpecStopSignal' Lens
taskSpecContainerSpecStopSignalL :: Lens_' TaskSpecContainerSpec (Maybe Text)
taskSpecContainerSpecStopSignalL f TaskSpecContainerSpec{..} = (\taskSpecContainerSpecStopSignal -> TaskSpecContainerSpec { taskSpecContainerSpecStopSignal, ..} ) <$> f taskSpecContainerSpecStopSignal
{-# INLINE taskSpecContainerSpecStopSignalL #-}

-- | 'taskSpecContainerSpecStopGracePeriod' Lens
taskSpecContainerSpecStopGracePeriodL :: Lens_' TaskSpecContainerSpec (Maybe Integer)
taskSpecContainerSpecStopGracePeriodL f TaskSpecContainerSpec{..} = (\taskSpecContainerSpecStopGracePeriod -> TaskSpecContainerSpec { taskSpecContainerSpecStopGracePeriod, ..} ) <$> f taskSpecContainerSpecStopGracePeriod
{-# INLINE taskSpecContainerSpecStopGracePeriodL #-}

-- | 'taskSpecContainerSpecHealthCheck' Lens
taskSpecContainerSpecHealthCheckL :: Lens_' TaskSpecContainerSpec (Maybe HealthConfig)
taskSpecContainerSpecHealthCheckL f TaskSpecContainerSpec{..} = (\taskSpecContainerSpecHealthCheck -> TaskSpecContainerSpec { taskSpecContainerSpecHealthCheck, ..} ) <$> f taskSpecContainerSpecHealthCheck
{-# INLINE taskSpecContainerSpecHealthCheckL #-}

-- | 'taskSpecContainerSpecHosts' Lens
taskSpecContainerSpecHostsL :: Lens_' TaskSpecContainerSpec (Maybe [Text])
taskSpecContainerSpecHostsL f TaskSpecContainerSpec{..} = (\taskSpecContainerSpecHosts -> TaskSpecContainerSpec { taskSpecContainerSpecHosts, ..} ) <$> f taskSpecContainerSpecHosts
{-# INLINE taskSpecContainerSpecHostsL #-}

-- | 'taskSpecContainerSpecDnsConfig' Lens
taskSpecContainerSpecDnsConfigL :: Lens_' TaskSpecContainerSpec (Maybe TaskSpecContainerSpecDNSConfig)
taskSpecContainerSpecDnsConfigL f TaskSpecContainerSpec{..} = (\taskSpecContainerSpecDnsConfig -> TaskSpecContainerSpec { taskSpecContainerSpecDnsConfig, ..} ) <$> f taskSpecContainerSpecDnsConfig
{-# INLINE taskSpecContainerSpecDnsConfigL #-}

-- | 'taskSpecContainerSpecSecrets' Lens
taskSpecContainerSpecSecretsL :: Lens_' TaskSpecContainerSpec (Maybe [TaskSpecContainerSpecSecrets])
taskSpecContainerSpecSecretsL f TaskSpecContainerSpec{..} = (\taskSpecContainerSpecSecrets -> TaskSpecContainerSpec { taskSpecContainerSpecSecrets, ..} ) <$> f taskSpecContainerSpecSecrets
{-# INLINE taskSpecContainerSpecSecretsL #-}

-- | 'taskSpecContainerSpecConfigs' Lens
taskSpecContainerSpecConfigsL :: Lens_' TaskSpecContainerSpec (Maybe [TaskSpecContainerSpecConfigs])
taskSpecContainerSpecConfigsL f TaskSpecContainerSpec{..} = (\taskSpecContainerSpecConfigs -> TaskSpecContainerSpec { taskSpecContainerSpecConfigs, ..} ) <$> f taskSpecContainerSpecConfigs
{-# INLINE taskSpecContainerSpecConfigsL #-}



-- * TaskSpecContainerSpecConfigs

-- | 'taskSpecContainerSpecConfigsFile' Lens
taskSpecContainerSpecConfigsFileL :: Lens_' TaskSpecContainerSpecConfigs (Maybe TaskSpecContainerSpecFile)
taskSpecContainerSpecConfigsFileL f TaskSpecContainerSpecConfigs{..} = (\taskSpecContainerSpecConfigsFile -> TaskSpecContainerSpecConfigs { taskSpecContainerSpecConfigsFile, ..} ) <$> f taskSpecContainerSpecConfigsFile
{-# INLINE taskSpecContainerSpecConfigsFileL #-}

-- | 'taskSpecContainerSpecConfigsConfigId' Lens
taskSpecContainerSpecConfigsConfigIdL :: Lens_' TaskSpecContainerSpecConfigs (Maybe Text)
taskSpecContainerSpecConfigsConfigIdL f TaskSpecContainerSpecConfigs{..} = (\taskSpecContainerSpecConfigsConfigId -> TaskSpecContainerSpecConfigs { taskSpecContainerSpecConfigsConfigId, ..} ) <$> f taskSpecContainerSpecConfigsConfigId
{-# INLINE taskSpecContainerSpecConfigsConfigIdL #-}

-- | 'taskSpecContainerSpecConfigsConfigName' Lens
taskSpecContainerSpecConfigsConfigNameL :: Lens_' TaskSpecContainerSpecConfigs (Maybe Text)
taskSpecContainerSpecConfigsConfigNameL f TaskSpecContainerSpecConfigs{..} = (\taskSpecContainerSpecConfigsConfigName -> TaskSpecContainerSpecConfigs { taskSpecContainerSpecConfigsConfigName, ..} ) <$> f taskSpecContainerSpecConfigsConfigName
{-# INLINE taskSpecContainerSpecConfigsConfigNameL #-}



-- * TaskSpecContainerSpecDNSConfig

-- | 'taskSpecContainerSpecDNSConfigNameservers' Lens
taskSpecContainerSpecDNSConfigNameserversL :: Lens_' TaskSpecContainerSpecDNSConfig (Maybe [Text])
taskSpecContainerSpecDNSConfigNameserversL f TaskSpecContainerSpecDNSConfig{..} = (\taskSpecContainerSpecDNSConfigNameservers -> TaskSpecContainerSpecDNSConfig { taskSpecContainerSpecDNSConfigNameservers, ..} ) <$> f taskSpecContainerSpecDNSConfigNameservers
{-# INLINE taskSpecContainerSpecDNSConfigNameserversL #-}

-- | 'taskSpecContainerSpecDNSConfigSearch' Lens
taskSpecContainerSpecDNSConfigSearchL :: Lens_' TaskSpecContainerSpecDNSConfig (Maybe [Text])
taskSpecContainerSpecDNSConfigSearchL f TaskSpecContainerSpecDNSConfig{..} = (\taskSpecContainerSpecDNSConfigSearch -> TaskSpecContainerSpecDNSConfig { taskSpecContainerSpecDNSConfigSearch, ..} ) <$> f taskSpecContainerSpecDNSConfigSearch
{-# INLINE taskSpecContainerSpecDNSConfigSearchL #-}

-- | 'taskSpecContainerSpecDNSConfigOptions' Lens
taskSpecContainerSpecDNSConfigOptionsL :: Lens_' TaskSpecContainerSpecDNSConfig (Maybe [Text])
taskSpecContainerSpecDNSConfigOptionsL f TaskSpecContainerSpecDNSConfig{..} = (\taskSpecContainerSpecDNSConfigOptions -> TaskSpecContainerSpecDNSConfig { taskSpecContainerSpecDNSConfigOptions, ..} ) <$> f taskSpecContainerSpecDNSConfigOptions
{-# INLINE taskSpecContainerSpecDNSConfigOptionsL #-}



-- * TaskSpecContainerSpecFile

-- | 'taskSpecContainerSpecFileName' Lens
taskSpecContainerSpecFileNameL :: Lens_' TaskSpecContainerSpecFile (Maybe Text)
taskSpecContainerSpecFileNameL f TaskSpecContainerSpecFile{..} = (\taskSpecContainerSpecFileName -> TaskSpecContainerSpecFile { taskSpecContainerSpecFileName, ..} ) <$> f taskSpecContainerSpecFileName
{-# INLINE taskSpecContainerSpecFileNameL #-}

-- | 'taskSpecContainerSpecFileUid' Lens
taskSpecContainerSpecFileUidL :: Lens_' TaskSpecContainerSpecFile (Maybe Text)
taskSpecContainerSpecFileUidL f TaskSpecContainerSpecFile{..} = (\taskSpecContainerSpecFileUid -> TaskSpecContainerSpecFile { taskSpecContainerSpecFileUid, ..} ) <$> f taskSpecContainerSpecFileUid
{-# INLINE taskSpecContainerSpecFileUidL #-}

-- | 'taskSpecContainerSpecFileGid' Lens
taskSpecContainerSpecFileGidL :: Lens_' TaskSpecContainerSpecFile (Maybe Text)
taskSpecContainerSpecFileGidL f TaskSpecContainerSpecFile{..} = (\taskSpecContainerSpecFileGid -> TaskSpecContainerSpecFile { taskSpecContainerSpecFileGid, ..} ) <$> f taskSpecContainerSpecFileGid
{-# INLINE taskSpecContainerSpecFileGidL #-}

-- | 'taskSpecContainerSpecFileMode' Lens
taskSpecContainerSpecFileModeL :: Lens_' TaskSpecContainerSpecFile (Maybe Int)
taskSpecContainerSpecFileModeL f TaskSpecContainerSpecFile{..} = (\taskSpecContainerSpecFileMode -> TaskSpecContainerSpecFile { taskSpecContainerSpecFileMode, ..} ) <$> f taskSpecContainerSpecFileMode
{-# INLINE taskSpecContainerSpecFileModeL #-}



-- * TaskSpecContainerSpecPrivileges

-- | 'taskSpecContainerSpecPrivilegesCredentialSpec' Lens
taskSpecContainerSpecPrivilegesCredentialSpecL :: Lens_' TaskSpecContainerSpecPrivileges (Maybe TaskSpecContainerSpecPrivilegesCredentialSpec)
taskSpecContainerSpecPrivilegesCredentialSpecL f TaskSpecContainerSpecPrivileges{..} = (\taskSpecContainerSpecPrivilegesCredentialSpec -> TaskSpecContainerSpecPrivileges { taskSpecContainerSpecPrivilegesCredentialSpec, ..} ) <$> f taskSpecContainerSpecPrivilegesCredentialSpec
{-# INLINE taskSpecContainerSpecPrivilegesCredentialSpecL #-}

-- | 'taskSpecContainerSpecPrivilegesSeLinuxContext' Lens
taskSpecContainerSpecPrivilegesSeLinuxContextL :: Lens_' TaskSpecContainerSpecPrivileges (Maybe TaskSpecContainerSpecPrivilegesSELinuxContext)
taskSpecContainerSpecPrivilegesSeLinuxContextL f TaskSpecContainerSpecPrivileges{..} = (\taskSpecContainerSpecPrivilegesSeLinuxContext -> TaskSpecContainerSpecPrivileges { taskSpecContainerSpecPrivilegesSeLinuxContext, ..} ) <$> f taskSpecContainerSpecPrivilegesSeLinuxContext
{-# INLINE taskSpecContainerSpecPrivilegesSeLinuxContextL #-}



-- * TaskSpecContainerSpecPrivilegesCredentialSpec

-- | 'taskSpecContainerSpecPrivilegesCredentialSpecFile' Lens
taskSpecContainerSpecPrivilegesCredentialSpecFileL :: Lens_' TaskSpecContainerSpecPrivilegesCredentialSpec (Maybe Text)
taskSpecContainerSpecPrivilegesCredentialSpecFileL f TaskSpecContainerSpecPrivilegesCredentialSpec{..} = (\taskSpecContainerSpecPrivilegesCredentialSpecFile -> TaskSpecContainerSpecPrivilegesCredentialSpec { taskSpecContainerSpecPrivilegesCredentialSpecFile, ..} ) <$> f taskSpecContainerSpecPrivilegesCredentialSpecFile
{-# INLINE taskSpecContainerSpecPrivilegesCredentialSpecFileL #-}

-- | 'taskSpecContainerSpecPrivilegesCredentialSpecRegistry' Lens
taskSpecContainerSpecPrivilegesCredentialSpecRegistryL :: Lens_' TaskSpecContainerSpecPrivilegesCredentialSpec (Maybe Text)
taskSpecContainerSpecPrivilegesCredentialSpecRegistryL f TaskSpecContainerSpecPrivilegesCredentialSpec{..} = (\taskSpecContainerSpecPrivilegesCredentialSpecRegistry -> TaskSpecContainerSpecPrivilegesCredentialSpec { taskSpecContainerSpecPrivilegesCredentialSpecRegistry, ..} ) <$> f taskSpecContainerSpecPrivilegesCredentialSpecRegistry
{-# INLINE taskSpecContainerSpecPrivilegesCredentialSpecRegistryL #-}



-- * TaskSpecContainerSpecPrivilegesSELinuxContext

-- | 'taskSpecContainerSpecPrivilegesSELinuxContextDisable' Lens
taskSpecContainerSpecPrivilegesSELinuxContextDisableL :: Lens_' TaskSpecContainerSpecPrivilegesSELinuxContext (Maybe Bool)
taskSpecContainerSpecPrivilegesSELinuxContextDisableL f TaskSpecContainerSpecPrivilegesSELinuxContext{..} = (\taskSpecContainerSpecPrivilegesSELinuxContextDisable -> TaskSpecContainerSpecPrivilegesSELinuxContext { taskSpecContainerSpecPrivilegesSELinuxContextDisable, ..} ) <$> f taskSpecContainerSpecPrivilegesSELinuxContextDisable
{-# INLINE taskSpecContainerSpecPrivilegesSELinuxContextDisableL #-}

-- | 'taskSpecContainerSpecPrivilegesSELinuxContextUser' Lens
taskSpecContainerSpecPrivilegesSELinuxContextUserL :: Lens_' TaskSpecContainerSpecPrivilegesSELinuxContext (Maybe Text)
taskSpecContainerSpecPrivilegesSELinuxContextUserL f TaskSpecContainerSpecPrivilegesSELinuxContext{..} = (\taskSpecContainerSpecPrivilegesSELinuxContextUser -> TaskSpecContainerSpecPrivilegesSELinuxContext { taskSpecContainerSpecPrivilegesSELinuxContextUser, ..} ) <$> f taskSpecContainerSpecPrivilegesSELinuxContextUser
{-# INLINE taskSpecContainerSpecPrivilegesSELinuxContextUserL #-}

-- | 'taskSpecContainerSpecPrivilegesSELinuxContextRole' Lens
taskSpecContainerSpecPrivilegesSELinuxContextRoleL :: Lens_' TaskSpecContainerSpecPrivilegesSELinuxContext (Maybe Text)
taskSpecContainerSpecPrivilegesSELinuxContextRoleL f TaskSpecContainerSpecPrivilegesSELinuxContext{..} = (\taskSpecContainerSpecPrivilegesSELinuxContextRole -> TaskSpecContainerSpecPrivilegesSELinuxContext { taskSpecContainerSpecPrivilegesSELinuxContextRole, ..} ) <$> f taskSpecContainerSpecPrivilegesSELinuxContextRole
{-# INLINE taskSpecContainerSpecPrivilegesSELinuxContextRoleL #-}

-- | 'taskSpecContainerSpecPrivilegesSELinuxContextType' Lens
taskSpecContainerSpecPrivilegesSELinuxContextTypeL :: Lens_' TaskSpecContainerSpecPrivilegesSELinuxContext (Maybe Text)
taskSpecContainerSpecPrivilegesSELinuxContextTypeL f TaskSpecContainerSpecPrivilegesSELinuxContext{..} = (\taskSpecContainerSpecPrivilegesSELinuxContextType -> TaskSpecContainerSpecPrivilegesSELinuxContext { taskSpecContainerSpecPrivilegesSELinuxContextType, ..} ) <$> f taskSpecContainerSpecPrivilegesSELinuxContextType
{-# INLINE taskSpecContainerSpecPrivilegesSELinuxContextTypeL #-}

-- | 'taskSpecContainerSpecPrivilegesSELinuxContextLevel' Lens
taskSpecContainerSpecPrivilegesSELinuxContextLevelL :: Lens_' TaskSpecContainerSpecPrivilegesSELinuxContext (Maybe Text)
taskSpecContainerSpecPrivilegesSELinuxContextLevelL f TaskSpecContainerSpecPrivilegesSELinuxContext{..} = (\taskSpecContainerSpecPrivilegesSELinuxContextLevel -> TaskSpecContainerSpecPrivilegesSELinuxContext { taskSpecContainerSpecPrivilegesSELinuxContextLevel, ..} ) <$> f taskSpecContainerSpecPrivilegesSELinuxContextLevel
{-# INLINE taskSpecContainerSpecPrivilegesSELinuxContextLevelL #-}



-- * TaskSpecContainerSpecSecrets

-- | 'taskSpecContainerSpecSecretsFile' Lens
taskSpecContainerSpecSecretsFileL :: Lens_' TaskSpecContainerSpecSecrets (Maybe TaskSpecContainerSpecFile)
taskSpecContainerSpecSecretsFileL f TaskSpecContainerSpecSecrets{..} = (\taskSpecContainerSpecSecretsFile -> TaskSpecContainerSpecSecrets { taskSpecContainerSpecSecretsFile, ..} ) <$> f taskSpecContainerSpecSecretsFile
{-# INLINE taskSpecContainerSpecSecretsFileL #-}

-- | 'taskSpecContainerSpecSecretsSecretId' Lens
taskSpecContainerSpecSecretsSecretIdL :: Lens_' TaskSpecContainerSpecSecrets (Maybe Text)
taskSpecContainerSpecSecretsSecretIdL f TaskSpecContainerSpecSecrets{..} = (\taskSpecContainerSpecSecretsSecretId -> TaskSpecContainerSpecSecrets { taskSpecContainerSpecSecretsSecretId, ..} ) <$> f taskSpecContainerSpecSecretsSecretId
{-# INLINE taskSpecContainerSpecSecretsSecretIdL #-}

-- | 'taskSpecContainerSpecSecretsSecretName' Lens
taskSpecContainerSpecSecretsSecretNameL :: Lens_' TaskSpecContainerSpecSecrets (Maybe Text)
taskSpecContainerSpecSecretsSecretNameL f TaskSpecContainerSpecSecrets{..} = (\taskSpecContainerSpecSecretsSecretName -> TaskSpecContainerSpecSecrets { taskSpecContainerSpecSecretsSecretName, ..} ) <$> f taskSpecContainerSpecSecretsSecretName
{-# INLINE taskSpecContainerSpecSecretsSecretNameL #-}



-- * TaskSpecLogDriver

-- | 'taskSpecLogDriverName' Lens
taskSpecLogDriverNameL :: Lens_' TaskSpecLogDriver (Maybe Text)
taskSpecLogDriverNameL f TaskSpecLogDriver{..} = (\taskSpecLogDriverName -> TaskSpecLogDriver { taskSpecLogDriverName, ..} ) <$> f taskSpecLogDriverName
{-# INLINE taskSpecLogDriverNameL #-}

-- | 'taskSpecLogDriverOptions' Lens
taskSpecLogDriverOptionsL :: Lens_' TaskSpecLogDriver (Maybe (Map.Map String Text))
taskSpecLogDriverOptionsL f TaskSpecLogDriver{..} = (\taskSpecLogDriverOptions -> TaskSpecLogDriver { taskSpecLogDriverOptions, ..} ) <$> f taskSpecLogDriverOptions
{-# INLINE taskSpecLogDriverOptionsL #-}



-- * TaskSpecNetworks

-- | 'taskSpecNetworksTarget' Lens
taskSpecNetworksTargetL :: Lens_' TaskSpecNetworks (Maybe Text)
taskSpecNetworksTargetL f TaskSpecNetworks{..} = (\taskSpecNetworksTarget -> TaskSpecNetworks { taskSpecNetworksTarget, ..} ) <$> f taskSpecNetworksTarget
{-# INLINE taskSpecNetworksTargetL #-}

-- | 'taskSpecNetworksAliases' Lens
taskSpecNetworksAliasesL :: Lens_' TaskSpecNetworks (Maybe [Text])
taskSpecNetworksAliasesL f TaskSpecNetworks{..} = (\taskSpecNetworksAliases -> TaskSpecNetworks { taskSpecNetworksAliases, ..} ) <$> f taskSpecNetworksAliases
{-# INLINE taskSpecNetworksAliasesL #-}



-- * TaskSpecPlacement

-- | 'taskSpecPlacementConstraints' Lens
taskSpecPlacementConstraintsL :: Lens_' TaskSpecPlacement (Maybe [Text])
taskSpecPlacementConstraintsL f TaskSpecPlacement{..} = (\taskSpecPlacementConstraints -> TaskSpecPlacement { taskSpecPlacementConstraints, ..} ) <$> f taskSpecPlacementConstraints
{-# INLINE taskSpecPlacementConstraintsL #-}

-- | 'taskSpecPlacementPreferences' Lens
taskSpecPlacementPreferencesL :: Lens_' TaskSpecPlacement (Maybe [TaskSpecPlacementPreferences])
taskSpecPlacementPreferencesL f TaskSpecPlacement{..} = (\taskSpecPlacementPreferences -> TaskSpecPlacement { taskSpecPlacementPreferences, ..} ) <$> f taskSpecPlacementPreferences
{-# INLINE taskSpecPlacementPreferencesL #-}

-- | 'taskSpecPlacementPlatforms' Lens
taskSpecPlacementPlatformsL :: Lens_' TaskSpecPlacement (Maybe [NodeDescriptionPlatform])
taskSpecPlacementPlatformsL f TaskSpecPlacement{..} = (\taskSpecPlacementPlatforms -> TaskSpecPlacement { taskSpecPlacementPlatforms, ..} ) <$> f taskSpecPlacementPlatforms
{-# INLINE taskSpecPlacementPlatformsL #-}



-- * TaskSpecPlacementPreferences

-- | 'taskSpecPlacementPreferencesSpread' Lens
taskSpecPlacementPreferencesSpreadL :: Lens_' TaskSpecPlacementPreferences (Maybe TaskSpecPlacementSpread)
taskSpecPlacementPreferencesSpreadL f TaskSpecPlacementPreferences{..} = (\taskSpecPlacementPreferencesSpread -> TaskSpecPlacementPreferences { taskSpecPlacementPreferencesSpread, ..} ) <$> f taskSpecPlacementPreferencesSpread
{-# INLINE taskSpecPlacementPreferencesSpreadL #-}



-- * TaskSpecPlacementSpread

-- | 'taskSpecPlacementSpreadSpreadDescriptor' Lens
taskSpecPlacementSpreadSpreadDescriptorL :: Lens_' TaskSpecPlacementSpread (Maybe Text)
taskSpecPlacementSpreadSpreadDescriptorL f TaskSpecPlacementSpread{..} = (\taskSpecPlacementSpreadSpreadDescriptor -> TaskSpecPlacementSpread { taskSpecPlacementSpreadSpreadDescriptor, ..} ) <$> f taskSpecPlacementSpreadSpreadDescriptor
{-# INLINE taskSpecPlacementSpreadSpreadDescriptorL #-}



-- * TaskSpecResources

-- | 'taskSpecResourcesLimits' Lens
taskSpecResourcesLimitsL :: Lens_' TaskSpecResources (Maybe TaskSpecResourcesLimits)
taskSpecResourcesLimitsL f TaskSpecResources{..} = (\taskSpecResourcesLimits -> TaskSpecResources { taskSpecResourcesLimits, ..} ) <$> f taskSpecResourcesLimits
{-# INLINE taskSpecResourcesLimitsL #-}

-- | 'taskSpecResourcesReservation' Lens
taskSpecResourcesReservationL :: Lens_' TaskSpecResources (Maybe TaskSpecResourcesReservation)
taskSpecResourcesReservationL f TaskSpecResources{..} = (\taskSpecResourcesReservation -> TaskSpecResources { taskSpecResourcesReservation, ..} ) <$> f taskSpecResourcesReservation
{-# INLINE taskSpecResourcesReservationL #-}



-- * TaskSpecResourcesLimits

-- | 'taskSpecResourcesLimitsNanoCpUs' Lens
taskSpecResourcesLimitsNanoCpUsL :: Lens_' TaskSpecResourcesLimits (Maybe Integer)
taskSpecResourcesLimitsNanoCpUsL f TaskSpecResourcesLimits{..} = (\taskSpecResourcesLimitsNanoCpUs -> TaskSpecResourcesLimits { taskSpecResourcesLimitsNanoCpUs, ..} ) <$> f taskSpecResourcesLimitsNanoCpUs
{-# INLINE taskSpecResourcesLimitsNanoCpUsL #-}

-- | 'taskSpecResourcesLimitsMemoryBytes' Lens
taskSpecResourcesLimitsMemoryBytesL :: Lens_' TaskSpecResourcesLimits (Maybe Integer)
taskSpecResourcesLimitsMemoryBytesL f TaskSpecResourcesLimits{..} = (\taskSpecResourcesLimitsMemoryBytes -> TaskSpecResourcesLimits { taskSpecResourcesLimitsMemoryBytes, ..} ) <$> f taskSpecResourcesLimitsMemoryBytes
{-# INLINE taskSpecResourcesLimitsMemoryBytesL #-}



-- * TaskSpecResourcesReservation

-- | 'taskSpecResourcesReservationNanoCpUs' Lens
taskSpecResourcesReservationNanoCpUsL :: Lens_' TaskSpecResourcesReservation (Maybe Integer)
taskSpecResourcesReservationNanoCpUsL f TaskSpecResourcesReservation{..} = (\taskSpecResourcesReservationNanoCpUs -> TaskSpecResourcesReservation { taskSpecResourcesReservationNanoCpUs, ..} ) <$> f taskSpecResourcesReservationNanoCpUs
{-# INLINE taskSpecResourcesReservationNanoCpUsL #-}

-- | 'taskSpecResourcesReservationMemoryBytes' Lens
taskSpecResourcesReservationMemoryBytesL :: Lens_' TaskSpecResourcesReservation (Maybe Integer)
taskSpecResourcesReservationMemoryBytesL f TaskSpecResourcesReservation{..} = (\taskSpecResourcesReservationMemoryBytes -> TaskSpecResourcesReservation { taskSpecResourcesReservationMemoryBytes, ..} ) <$> f taskSpecResourcesReservationMemoryBytes
{-# INLINE taskSpecResourcesReservationMemoryBytesL #-}



-- * TaskSpecRestartPolicy

-- | 'taskSpecRestartPolicyCondition' Lens
taskSpecRestartPolicyConditionL :: Lens_' TaskSpecRestartPolicy (Maybe E'Condition)
taskSpecRestartPolicyConditionL f TaskSpecRestartPolicy{..} = (\taskSpecRestartPolicyCondition -> TaskSpecRestartPolicy { taskSpecRestartPolicyCondition, ..} ) <$> f taskSpecRestartPolicyCondition
{-# INLINE taskSpecRestartPolicyConditionL #-}

-- | 'taskSpecRestartPolicyDelay' Lens
taskSpecRestartPolicyDelayL :: Lens_' TaskSpecRestartPolicy (Maybe Integer)
taskSpecRestartPolicyDelayL f TaskSpecRestartPolicy{..} = (\taskSpecRestartPolicyDelay -> TaskSpecRestartPolicy { taskSpecRestartPolicyDelay, ..} ) <$> f taskSpecRestartPolicyDelay
{-# INLINE taskSpecRestartPolicyDelayL #-}

-- | 'taskSpecRestartPolicyMaxAttempts' Lens
taskSpecRestartPolicyMaxAttemptsL :: Lens_' TaskSpecRestartPolicy (Maybe Integer)
taskSpecRestartPolicyMaxAttemptsL f TaskSpecRestartPolicy{..} = (\taskSpecRestartPolicyMaxAttempts -> TaskSpecRestartPolicy { taskSpecRestartPolicyMaxAttempts, ..} ) <$> f taskSpecRestartPolicyMaxAttempts
{-# INLINE taskSpecRestartPolicyMaxAttemptsL #-}

-- | 'taskSpecRestartPolicyWindow' Lens
taskSpecRestartPolicyWindowL :: Lens_' TaskSpecRestartPolicy (Maybe Integer)
taskSpecRestartPolicyWindowL f TaskSpecRestartPolicy{..} = (\taskSpecRestartPolicyWindow -> TaskSpecRestartPolicy { taskSpecRestartPolicyWindow, ..} ) <$> f taskSpecRestartPolicyWindow
{-# INLINE taskSpecRestartPolicyWindowL #-}



-- * TaskState



-- * TaskStatus

-- | 'taskStatusTimestamp' Lens
taskStatusTimestampL :: Lens_' TaskStatus (Maybe Text)
taskStatusTimestampL f TaskStatus{..} = (\taskStatusTimestamp -> TaskStatus { taskStatusTimestamp, ..} ) <$> f taskStatusTimestamp
{-# INLINE taskStatusTimestampL #-}

-- | 'taskStatusState' Lens
taskStatusStateL :: Lens_' TaskStatus (Maybe TaskState)
taskStatusStateL f TaskStatus{..} = (\taskStatusState -> TaskStatus { taskStatusState, ..} ) <$> f taskStatusState
{-# INLINE taskStatusStateL #-}

-- | 'taskStatusMessage' Lens
taskStatusMessageL :: Lens_' TaskStatus (Maybe Text)
taskStatusMessageL f TaskStatus{..} = (\taskStatusMessage -> TaskStatus { taskStatusMessage, ..} ) <$> f taskStatusMessage
{-# INLINE taskStatusMessageL #-}

-- | 'taskStatusErr' Lens
taskStatusErrL :: Lens_' TaskStatus (Maybe Text)
taskStatusErrL f TaskStatus{..} = (\taskStatusErr -> TaskStatus { taskStatusErr, ..} ) <$> f taskStatusErr
{-# INLINE taskStatusErrL #-}

-- | 'taskStatusContainerStatus' Lens
taskStatusContainerStatusL :: Lens_' TaskStatus (Maybe TaskStatusContainerStatus)
taskStatusContainerStatusL f TaskStatus{..} = (\taskStatusContainerStatus -> TaskStatus { taskStatusContainerStatus, ..} ) <$> f taskStatusContainerStatus
{-# INLINE taskStatusContainerStatusL #-}



-- * TaskStatusContainerStatus

-- | 'taskStatusContainerStatusContainerId' Lens
taskStatusContainerStatusContainerIdL :: Lens_' TaskStatusContainerStatus (Maybe Text)
taskStatusContainerStatusContainerIdL f TaskStatusContainerStatus{..} = (\taskStatusContainerStatusContainerId -> TaskStatusContainerStatus { taskStatusContainerStatusContainerId, ..} ) <$> f taskStatusContainerStatusContainerId
{-# INLINE taskStatusContainerStatusContainerIdL #-}

-- | 'taskStatusContainerStatusPid' Lens
taskStatusContainerStatusPidL :: Lens_' TaskStatusContainerStatus (Maybe Int)
taskStatusContainerStatusPidL f TaskStatusContainerStatus{..} = (\taskStatusContainerStatusPid -> TaskStatusContainerStatus { taskStatusContainerStatusPid, ..} ) <$> f taskStatusContainerStatusPid
{-# INLINE taskStatusContainerStatusPidL #-}

-- | 'taskStatusContainerStatusExitCode' Lens
taskStatusContainerStatusExitCodeL :: Lens_' TaskStatusContainerStatus (Maybe Int)
taskStatusContainerStatusExitCodeL f TaskStatusContainerStatus{..} = (\taskStatusContainerStatusExitCode -> TaskStatusContainerStatus { taskStatusContainerStatusExitCode, ..} ) <$> f taskStatusContainerStatusExitCode
{-# INLINE taskStatusContainerStatusExitCodeL #-}



-- * ThrottleDevice

-- | 'throttleDevicePath' Lens
throttleDevicePathL :: Lens_' ThrottleDevice (Maybe Text)
throttleDevicePathL f ThrottleDevice{..} = (\throttleDevicePath -> ThrottleDevice { throttleDevicePath, ..} ) <$> f throttleDevicePath
{-# INLINE throttleDevicePathL #-}

-- | 'throttleDeviceRate' Lens
throttleDeviceRateL :: Lens_' ThrottleDevice (Maybe Integer)
throttleDeviceRateL f ThrottleDevice{..} = (\throttleDeviceRate -> ThrottleDevice { throttleDeviceRate, ..} ) <$> f throttleDeviceRate
{-# INLINE throttleDeviceRateL #-}



-- * Volume

-- | 'volumeName' Lens
volumeNameL :: Lens_' Volume (Text)
volumeNameL f Volume{..} = (\volumeName -> Volume { volumeName, ..} ) <$> f volumeName
{-# INLINE volumeNameL #-}

-- | 'volumeDriver' Lens
volumeDriverL :: Lens_' Volume (Text)
volumeDriverL f Volume{..} = (\volumeDriver -> Volume { volumeDriver, ..} ) <$> f volumeDriver
{-# INLINE volumeDriverL #-}

-- | 'volumeMountpoint' Lens
volumeMountpointL :: Lens_' Volume (Text)
volumeMountpointL f Volume{..} = (\volumeMountpoint -> Volume { volumeMountpoint, ..} ) <$> f volumeMountpoint
{-# INLINE volumeMountpointL #-}

-- | 'volumeStatus' Lens
volumeStatusL :: Lens_' Volume (Maybe (Map.Map String A.Value))
volumeStatusL f Volume{..} = (\volumeStatus -> Volume { volumeStatus, ..} ) <$> f volumeStatus
{-# INLINE volumeStatusL #-}

-- | 'volumeLabels' Lens
volumeLabelsL :: Lens_' Volume ((Map.Map String Text))
volumeLabelsL f Volume{..} = (\volumeLabels -> Volume { volumeLabels, ..} ) <$> f volumeLabels
{-# INLINE volumeLabelsL #-}

-- | 'volumeScope' Lens
volumeScopeL :: Lens_' Volume (E'Scope)
volumeScopeL f Volume{..} = (\volumeScope -> Volume { volumeScope, ..} ) <$> f volumeScope
{-# INLINE volumeScopeL #-}

-- | 'volumeOptions' Lens
volumeOptionsL :: Lens_' Volume ((Map.Map String Text))
volumeOptionsL f Volume{..} = (\volumeOptions -> Volume { volumeOptions, ..} ) <$> f volumeOptions
{-# INLINE volumeOptionsL #-}

-- | 'volumeUsageData' Lens
volumeUsageDataL :: Lens_' Volume (Maybe VolumeUsageData)
volumeUsageDataL f Volume{..} = (\volumeUsageData -> Volume { volumeUsageData, ..} ) <$> f volumeUsageData
{-# INLINE volumeUsageDataL #-}



-- * VolumeUsageData

-- | 'volumeUsageDataSize' Lens
volumeUsageDataSizeL :: Lens_' VolumeUsageData (Int)
volumeUsageDataSizeL f VolumeUsageData{..} = (\volumeUsageDataSize -> VolumeUsageData { volumeUsageDataSize, ..} ) <$> f volumeUsageDataSize
{-# INLINE volumeUsageDataSizeL #-}

-- | 'volumeUsageDataRefCount' Lens
volumeUsageDataRefCountL :: Lens_' VolumeUsageData (Int)
volumeUsageDataRefCountL f VolumeUsageData{..} = (\volumeUsageDataRefCount -> VolumeUsageData { volumeUsageDataRefCount, ..} ) <$> f volumeUsageDataRefCount
{-# INLINE volumeUsageDataRefCountL #-}


