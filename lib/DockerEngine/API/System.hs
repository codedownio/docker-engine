{-
   Docker Engine API

   The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release of Docker, so API calls are versioned to ensure that clients don't break.  For Docker Engine 17.06, the API version is 1.30. To lock to this version, you prefix the URL with `/v1.30`. For example, calling `/info` is the same as calling `/v1.30/info`.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  In previous versions of Docker, it was possible to access the API without providing a version. This behaviour is now deprecated will be removed in a future version of Docker.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer Docker daemons.  This documentation is for version 1.30 of the API, which was introduced with Docker 17.06. Use this table to find documentation for previous versions of the API:  Docker version  | API version | Changes ----------------|-------------|--------- 17.05.x | [1.29](https://docs.docker.com/engine/api/v1.29/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-29-api-changes) 17.04.x | [1.28](https://docs.docker.com/engine/api/v1.28/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-28-api-changes) 17.03.1 | [1.27](https://docs.docker.com/engine/api/v1.27/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-27-api-changes) 1.13.1 & 17.03.0 | [1.26](https://docs.docker.com/engine/api/v1.26/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-26-api-changes) 1.13.0 | [1.25](https://docs.docker.com/engine/api/v1.25/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-25-api-changes) 1.12.x | [1.24](https://docs.docker.com/engine/api/v1.24/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-24-api-changes) 1.11.x | [1.23](https://docs.docker.com/engine/api/v1.23/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-23-api-changes) 1.10.x | [1.22](https://docs.docker.com/engine/api/v1.22/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-22-api-changes) 1.9.x | [1.21](https://docs.docker.com/engine/api/v1.21/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-21-api-changes) 1.8.x | [1.20](https://docs.docker.com/engine/api/v1.20/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-20-api-changes) 1.7.x | [1.19](https://docs.docker.com/engine/api/v1.19/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-19-api-changes) 1.6.x | [1.18](https://docs.docker.com/engine/api/v1.18/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-18-api-changes)  # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a Base64 encoded (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 

   OpenAPI Version: 3.0.1
   Docker Engine API API version: 1.30
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : DockerEngine.API.System
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module DockerEngine.API.System where

import DockerEngine.Core
import DockerEngine.MimeTypes
import DockerEngine.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** System

-- *** systemAuth

-- | @POST \/auth@
-- 
-- Check auth configuration
-- 
-- Validate credentials for a registry and, if available, get an identity token for accessing the registry without password.
-- 
systemAuth 
  :: (Consumes SystemAuth MimeJSON)
  => DockerEngineRequest SystemAuth MimeJSON InlineResponse2009 MimeJSON
systemAuth =
  _mkRequest "POST" ["/auth"]

data SystemAuth 

-- | /Body Param/ "authConfig" - Authentication to check
instance HasBodyParam SystemAuth AuthConfig 

-- | @application/json@
instance Consumes SystemAuth MimeJSON

-- | @application/json@
instance Produces SystemAuth MimeJSON


-- *** systemDataUsage

-- | @GET \/system\/df@
-- 
-- Get data usage information
-- 
systemDataUsage 
  :: Accept accept -- ^ request accept ('MimeType')
  -> DockerEngineRequest SystemDataUsage MimeNoContent InlineResponse20013 accept
systemDataUsage  _ =
  _mkRequest "GET" ["/system/df"]

data SystemDataUsage  
-- | @application/json@
instance Produces SystemDataUsage MimeJSON
-- | @text/plain@
instance Produces SystemDataUsage MimePlainText


-- *** systemEvents

-- | @GET \/events@
-- 
-- Monitor events
-- 
-- Stream real-time events from the server.  Various objects within Docker report events when something happens to them.  Containers report these events: `attach`, `commit`, `copy`, `create`, `destroy`, `detach`, `die`, `exec_create`, `exec_detach`, `exec_start`, `export`, `health_status`, `kill`, `oom`, `pause`, `rename`, `resize`, `restart`, `start`, `stop`, `top`, `unpause`, and `update`  Images report these events: `delete`, `import`, `load`, `pull`, `push`, `save`, `tag`, and `untag`  Volumes report these events: `create`, `mount`, `unmount`, and `destroy`  Networks report these events: `create`, `connect`, `disconnect`, `destroy`, `update`, and `remove`  The Docker daemon reports these events: `reload`  Services report these events: `create`, `update`, and `remove`  Nodes report these events: `create`, `update`, and `remove`  Secrets report these events: `create`, `update`, and `remove` 
-- 
systemEvents 
  :: DockerEngineRequest SystemEvents MimeNoContent InlineResponse20012 MimeJSON
systemEvents =
  _mkRequest "GET" ["/events"]

data SystemEvents  

-- | /Optional Param/ "since" - Show events created since this timestamp then stream new events.
instance HasOptionalParam SystemEvents SinceText where
  applyOptionalParam req (SinceText xs) =
    req `setQuery` toQuery ("since", Just xs)

-- | /Optional Param/ "until" - Show events created until this timestamp then stop streaming.
instance HasOptionalParam SystemEvents Until where
  applyOptionalParam req (Until xs) =
    req `setQuery` toQuery ("until", Just xs)

-- | /Optional Param/ "filters" - A JSON encoded value of filters (a `map[string][]string`) to process on the event list. Available filters:  - `container=<string>` container name or ID - `daemon=<string>` daemon name or ID - `event=<string>` event type - `image=<string>` image name or ID - `label=<string>` image or container label - `network=<string>` network name or ID - `plugin`=<string> plugin name or ID - `scope`Ôºù<string> local or swarm - `type=<string>` object to filter by, one of `container`, `image`, `volume`, `network`, `daemon`, `plugin`, `node`, `service` or `secret` - `volume=<string>` volume name or ID 
instance HasOptionalParam SystemEvents Filters where
  applyOptionalParam req (Filters xs) =
    req `setQuery` toQuery ("filters", Just xs)
-- | @application/json@
instance Produces SystemEvents MimeJSON


-- *** systemInfo

-- | @GET \/info@
-- 
-- Get system information
-- 
systemInfo 
  :: DockerEngineRequest SystemInfo MimeNoContent InlineResponse20010 MimeJSON
systemInfo =
  _mkRequest "GET" ["/info"]

data SystemInfo  
-- | @application/json@
instance Produces SystemInfo MimeJSON


-- *** systemPing

-- | @GET \/_ping@
-- 
-- Ping
-- 
-- This is a dummy endpoint you can use to test if the server is accessible.
-- 
systemPing 
  :: DockerEngineRequest SystemPing MimeNoContent Text MimePlainText
systemPing =
  _mkRequest "GET" ["/_ping"]

data SystemPing  
-- | @text/plain@
instance Produces SystemPing MimePlainText


-- *** systemVersion

-- | @GET \/version@
-- 
-- Get version
-- 
-- Returns the version of Docker that is running and various information about the system that Docker is running on.
-- 
systemVersion 
  :: DockerEngineRequest SystemVersion MimeNoContent InlineResponse20011 MimeJSON
systemVersion =
  _mkRequest "GET" ["/version"]

data SystemVersion  
-- | @application/json@
instance Produces SystemVersion MimeJSON

