{-
   Docker Engine API

   The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release of Docker, so API calls are versioned to ensure that clients don't break.  For Docker Engine 17.06, the API version is 1.30. To lock to this version, you prefix the URL with `/v1.30`. For example, calling `/info` is the same as calling `/v1.30/info`.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  In previous versions of Docker, it was possible to access the API without providing a version. This behaviour is now deprecated will be removed in a future version of Docker.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer Docker daemons.  This documentation is for version 1.30 of the API, which was introduced with Docker 17.06. Use this table to find documentation for previous versions of the API:  Docker version  | API version | Changes ----------------|-------------|--------- 17.05.x | [1.29](https://docs.docker.com/engine/api/v1.29/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-29-api-changes) 17.04.x | [1.28](https://docs.docker.com/engine/api/v1.28/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-28-api-changes) 17.03.1 | [1.27](https://docs.docker.com/engine/api/v1.27/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-27-api-changes) 1.13.1 & 17.03.0 | [1.26](https://docs.docker.com/engine/api/v1.26/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-26-api-changes) 1.13.0 | [1.25](https://docs.docker.com/engine/api/v1.25/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-25-api-changes) 1.12.x | [1.24](https://docs.docker.com/engine/api/v1.24/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-24-api-changes) 1.11.x | [1.23](https://docs.docker.com/engine/api/v1.23/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-23-api-changes) 1.10.x | [1.22](https://docs.docker.com/engine/api/v1.22/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-22-api-changes) 1.9.x | [1.21](https://docs.docker.com/engine/api/v1.21/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-21-api-changes) 1.8.x | [1.20](https://docs.docker.com/engine/api/v1.20/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-20-api-changes) 1.7.x | [1.19](https://docs.docker.com/engine/api/v1.19/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-19-api-changes) 1.6.x | [1.18](https://docs.docker.com/engine/api/v1.18/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-18-api-changes)  # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a Base64 encoded (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 

   OpenAPI Version: 3.0.1
   Docker Engine API API version: 1.30
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : DockerEngine.API.Secret
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module DockerEngine.API.Secret where

import DockerEngine.Core
import DockerEngine.MimeTypes
import DockerEngine.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Secret

-- *** secretCreate

-- | @POST \/secrets\/create@
-- 
-- Create a secret
-- 
secretCreate 
  :: (Consumes SecretCreate MimeJSON)
  => DockerEngineRequest SecretCreate MimeJSON InlineResponse2013 MimeJSON
secretCreate =
  _mkRequest "POST" ["/secrets/create"]

data SecretCreate 
instance HasBodyParam SecretCreate SecretSpec

-- | @application/json@
instance Consumes SecretCreate MimeJSON

-- | @application/json@
instance Produces SecretCreate MimeJSON


-- *** secretDelete

-- | @DELETE \/secrets\/{id}@
-- 
-- Delete a secret
-- 
-- Note: Has 'Produces' instances, but no response schema
-- 
secretDelete 
  :: Id -- ^ "id" -  ID of the secret
  -> DockerEngineRequest SecretDelete MimeNoContent res MimeJSON
secretDelete (Id id) =
  _mkRequest "DELETE" ["/secrets/",toPath id]

data SecretDelete  
-- | @application/json@
instance Produces SecretDelete MimeJSON


-- *** secretInspect

-- | @GET \/secrets\/{id}@
-- 
-- Inspect a secret
-- 
secretInspect 
  :: Id -- ^ "id" -  ID of the secret
  -> DockerEngineRequest SecretInspect MimeNoContent Secret MimeJSON
secretInspect (Id id) =
  _mkRequest "GET" ["/secrets/",toPath id]

data SecretInspect  
-- | @application/json@
instance Produces SecretInspect MimeJSON


-- *** secretList

-- | @GET \/secrets@
-- 
-- List secrets
-- 
secretList 
  :: DockerEngineRequest SecretList MimeNoContent [Secret] MimeJSON
secretList =
  _mkRequest "GET" ["/secrets"]

data SecretList  

-- | /Optional Param/ "filters" - A JSON encoded value of the filters (a `map[string][]string`) to process on the secrets list. Available filters:  - `id=<secret id>` - `label=<key> or label=<key>=value` - `name=<secret name>` - `names=<secret name>` 
instance HasOptionalParam SecretList Filters where
  applyOptionalParam req (Filters xs) =
    req `setQuery` toQuery ("filters", Just xs)
-- | @application/json@
instance Produces SecretList MimeJSON


-- *** secretUpdate

-- | @POST \/secrets\/{id}\/update@
-- 
-- Update a Secret
-- 
-- Note: Has 'Produces' instances, but no response schema
-- 
secretUpdate 
  :: (Consumes SecretUpdate contentType)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> Id -- ^ "id" -  The ID or name of the secret
  -> Version -- ^ "version" -  The version number of the secret object being updated. This is required to avoid conflicting writes.
  -> DockerEngineRequest SecretUpdate contentType res accept
secretUpdate _  _ (Id id) (Version version) =
  _mkRequest "POST" ["/secrets/",toPath id,"/update"]
    `setQuery` toQuery ("version", Just version)

data SecretUpdate 

-- | /Body Param/ "body" - The spec of the secret to update. Currently, only the Labels field can be updated. All other fields must remain unchanged from the [SecretInspect endpoint](#operation/SecretInspect) response values.
instance HasBodyParam SecretUpdate SecretSpec 

-- | @application/json@
instance Consumes SecretUpdate MimeJSON
-- | @text/plain@
instance Consumes SecretUpdate MimePlainText

-- | @application/json@
instance Produces SecretUpdate MimeJSON
-- | @text/plain@
instance Produces SecretUpdate MimePlainText

